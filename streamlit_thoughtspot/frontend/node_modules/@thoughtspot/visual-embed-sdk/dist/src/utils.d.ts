/**
 * Copyright (c) 2023
 *
 * Common utility functions for ThoughtSpot Visual Embed SDK
 *
 * @summary Utils
 * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>
 */
import { EmbedConfig, QueryParams, RuntimeFilter, CustomisationsInterface, DOMSelector, ViewConfig } from './types';
/**
 * Construct a runtime filters query string from the given filters.
 * Refer to the following docs for more details on runtime filter syntax:
 * https://cloud-docs.thoughtspot.com/admin/ts-cloud/apply-runtime-filter.html
 * https://cloud-docs.thoughtspot.com/admin/ts-cloud/runtime-filter-operators.html
 * @param runtimeFilters
 */
export declare const getFilterQuery: (runtimeFilters: RuntimeFilter[]) => string;
/**
 * Return a query param string composed from the given params object
 * @param queryParams
 */
export declare const getQueryParamString: (queryParams: QueryParams, shouldSerializeParamValues?: boolean) => string;
/**
 * Get a string representation of a dimension value in CSS
 * If numeric, it is considered in pixels.
 * @param value
 */
export declare const getCssDimension: (value: number | string) => string;
/**
 * Append a string to a URL's hash fragment
 * @param url A URL
 * @param stringToAppend The string to append to the URL hash
 */
export declare const appendToUrlHash: (url: string, stringToAppend: string) => string;
export declare function getRedirectUrl(url: string, stringToAppend: string, path?: string): string;
export declare const getEncodedQueryParamsString: (queryString: string) => string;
export declare const getOffsetTop: (element: any) => any;
export declare const embedEventStatus: {
    START: string;
    END: string;
};
export declare const setAttributes: (element: HTMLElement, attributes: {
    [key: string]: string | number | boolean;
}) => void;
export declare const checkReleaseVersionInBeta: (releaseVersion: string, suppressBetaWarning: boolean) => boolean;
export declare const getCustomisations: (embedConfig: EmbedConfig, viewConfig: ViewConfig) => CustomisationsInterface;
/**
 * Gets a reference to the DOM node given
 * a selector.
 * @param domSelector
 */
export declare function getDOMNode(domSelector: DOMSelector): HTMLElement;
//# sourceMappingURL=utils.d.ts.map