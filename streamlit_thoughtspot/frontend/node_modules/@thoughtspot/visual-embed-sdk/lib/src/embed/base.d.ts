/**
 * Copyright (c) 2022
 *
 * Base classes
 *
 * @summary Base classes
 * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>
 */
import EventEmitter from 'eventemitter3';
import { EmbedConfig, PrefetchFeatures } from '../types';
import { AuthFailureType } from '../auth';
export declare let authPromise: Promise<boolean>;
export declare const getEmbedConfig: () => EmbedConfig;
export declare const getAuthPromise: () => Promise<boolean>;
export declare function notifyAuthSDKSuccess(): void;
export declare function notifyAuthSuccess(): void;
export declare function notifyAuthFailure(failureType: AuthFailureType): void;
export declare function notifyLogout(): void;
/**
 * Perform authentication on the ThoughtSpot app as applicable.
 */
export declare const handleAuth: () => Promise<boolean>;
/**
 * Prefetches static resources from the specified URL. Web browsers can then cache the prefetched resources and serve them from the user's local disk to provide faster access to your app.
 * @param url The URL provided for prefetch
 * @param prefetchFeatures Specify features which needs to be prefetched.
 * @version SDK: 1.4.0 | ThoughtSpot: ts7.sep.cl, 7.2.1
 */
export declare const prefetch: (url?: string, prefetchFeatures?: PrefetchFeatures[]) => void;
/**
 * Initializes the Visual Embed SDK globally and perform
 * authentication if applicable.
 * @param embedConfig The configuration object containing ThoughtSpot host,
 * authentication mechanism and so on.
 * example: authStatus = init(config);
 * authStatus.on(AuthStatus.FAILURE, (reason) => { // do something here });
 * @returns event emitter which emits events on authentication success, failure and logout. See {@link AuthStatus}
 * @version SDK: 1.0.0 | ThoughtSpot ts7.april.cl, 7.2.1
 */
export declare const init: (embedConfig: EmbedConfig) => EventEmitter;
export declare function disableAutoLogin(): void;
/**
 * Logs out from ThoughtSpot. This also sets the autoLogin flag to false, to prevent
 * the SDK from automatically logging in again.
 *
 * You can call the `init` method again to re login, if autoLogin is set to true in this
 * second call it will be honored.
 *
 * @param doNotDisableAutoLogin This flag when passed will not disable autoLogin
 * @returns Promise which resolves when logout completes.
 * @version SDK: 1.10.1 | ThoughtSpot: 8.2.0.cl, 8.4.1-sw
 */
export declare const logout: (doNotDisableAutoLogin?: boolean) => Promise<boolean>;
/**
 * Renders functions in a queue, resolves to next function only after the callback next is called
 * @param fn The function being registered
 */
export declare const renderInQueue: (fn: (next?: (val?: any) => void) => Promise<any>) => Promise<any>;
export declare function reset(): void;
//# sourceMappingURL=base.d.ts.map