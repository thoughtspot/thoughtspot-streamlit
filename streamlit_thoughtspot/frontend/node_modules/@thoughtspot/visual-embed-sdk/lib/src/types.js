/**
 * Copyright (c) 2022
 *
 * TypeScript type definitions for ThoughtSpot Visual Embed SDK
 *
 * @summary Type definitions for Embed SDK
 * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>
 */
/**
 * The authentication mechanism for allowing access to the
 * the embedded app
 */
// eslint-disable-next-line no-shadow
export var AuthType;
(function (AuthType) {
    /**
     * No authentication on the SDK. Passthrough to the embedded App. Alias for `Passthrough`.
     */
    AuthType["None"] = "None";
    /**
     * No authentication on the SDK. Passthrough to the embedded App.
     */
    AuthType["Passthrough"] = "None";
    /**
     * SSO using SAML
     * @deprecated Use {@link SAML} instead
     */
    AuthType["SSO"] = "SSO_SAML";
    /**
     * SSO using SAML
     */
    AuthType["SAML"] = "SSO_SAML";
    /**
     * SSO using OIDC
     */
    AuthType["OIDC"] = "SSO_OIDC";
    /**
     * Trusted authentication server
     */
    AuthType["AuthServer"] = "AuthServer";
    /**
     * Use the ThoughtSpot login API to authenticate to the cluster directly.
     *
     * Warning: This feature is primarily intended for developer testing. It is
     * strongly advised not to use this authentication method in production.
     */
    AuthType["Basic"] = "Basic";
})(AuthType || (AuthType = {}));
/**
 * A map of the supported runtime filter operations
 */
// eslint-disable-next-line no-shadow
export var RuntimeFilterOp;
(function (RuntimeFilterOp) {
    /**
     * Equals
     */
    RuntimeFilterOp["EQ"] = "EQ";
    /**
     * Does not equal
     */
    RuntimeFilterOp["NE"] = "NE";
    /**
     * Less than
     */
    RuntimeFilterOp["LT"] = "LT";
    /**
     * Less than or equal to
     */
    RuntimeFilterOp["LE"] = "LE";
    /**
     * Greater than
     */
    RuntimeFilterOp["GT"] = "GT";
    /**
     * Greater than or equal to
     */
    RuntimeFilterOp["GE"] = "GE";
    /**
     * Contains
     */
    RuntimeFilterOp["CONTAINS"] = "CONTAINS";
    /**
     * Begins with
     */
    RuntimeFilterOp["BEGINS_WITH"] = "BEGINS_WITH";
    /**
     * Ends with
     */
    RuntimeFilterOp["ENDS_WITH"] = "ENDS_WITH";
    /**
     * Between, inclusive of higher value
     */
    RuntimeFilterOp["BW_INC_MAX"] = "BW_INC_MAX";
    /**
     * Between, inclusive of lower value
     */
    RuntimeFilterOp["BW_INC_MIN"] = "BW_INC_MIN";
    /**
     * Between, inclusive of both higher and lower value
     */
    RuntimeFilterOp["BW_INC"] = "BW_INC";
    /**
     * Between, non-inclusive
     */
    RuntimeFilterOp["BW"] = "BW";
    /**
     * Is included in this list of values
     */
    RuntimeFilterOp["IN"] = "IN";
})(RuntimeFilterOp || (RuntimeFilterOp = {}));
/**
 * Event types emitted by the embedded ThoughtSpot application.
 */
// eslint-disable-next-line no-shadow
export var EmbedEvent;
(function (EmbedEvent) {
    /**
     * Rendering has initialized.
     * @return timestamp - The timestamp when the event was generated.
     */
    EmbedEvent["Init"] = "init";
    /**
     * Authentication has either succeeded or failed.
     * @return isLoggedIn - A Boolean specifying whether authentication was successful.
     */
    EmbedEvent["AuthInit"] = "authInit";
    /**
     * The embed object container has loaded.
     * @return timestamp - The timestamp when the event was generated.
     */
    EmbedEvent["Load"] = "load";
    /**
     * Data pertaining to answer or Liveboard is received
     * @return data - The answer or Liveboard data
     */
    EmbedEvent["Data"] = "data";
    /**
     * Search/answer/Liveboard filters have been applied/updated
     * @hidden
     */
    EmbedEvent["FiltersChanged"] = "filtersChanged";
    /**
     * Search query has been updated
     */
    EmbedEvent["QueryChanged"] = "queryChanged";
    /**
     * A drill down operation has been performed.
     * @return additionalFilters - Any additional filters applied
     * @return drillDownColumns - The columns on which drill down was performed
     * @return nonFilteredColumns - The columns that were not filtered
     */
    EmbedEvent["Drilldown"] = "drillDown";
    /**
     * One or more data sources have been selected.
     * @return dataSourceIds - the list of data sources
     */
    EmbedEvent["DataSourceSelected"] = "dataSourceSelected";
    /**
     * One or more data columns have been selected.
     * @return columnIds - the list of columns
     * @version SDK: 1.10.0 | ThoughtSpot: 8.2.0.cl, 8.4.1-sw
     */
    EmbedEvent["AddRemoveColumns"] = "addRemoveColumns";
    /**
     * A custom action has been triggered
     * @return actionId - The id of the custom action
     * @return data - The answer or Liveboard data
     */
    EmbedEvent["CustomAction"] = "customAction";
    /**
     * A double click has been triggered on table/chart
     * @return ContextMenuInputPoints - data point that is double clicked
     * @version SDK: 1.5.0 | ThoughtSpot: ts7.oct.cl, 7.2.1
     */
    EmbedEvent["VizPointDoubleClick"] = "vizPointDoubleClick";
    /**
     * A click has been triggered on table/chart
     * @return ContextMenuInputPoints - data point that is clicked
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["VizPointClick"] = "vizPointClick";
    /**
     * An error has occurred.
     * @return error - An error object or message
     */
    EmbedEvent["Error"] = "Error";
    /**
     * The embedded object has sent an alert
     * @return alert - An alert object
     */
    EmbedEvent["Alert"] = "alert";
    /**
     * The ThoughtSpot auth session has expired.
     */
    EmbedEvent["AuthExpire"] = "ThoughtspotAuthExpired";
    /**
     * ThoughtSpot failed to validate the auth session.
     * @hidden
     */
    EmbedEvent["AuthFailure"] = "ThoughtspotAuthFailure";
    /**
     * ThoughtSpot failed to validate the auth session.
     * @hidden
     */
    EmbedEvent["AuthLogout"] = "ThoughtspotAuthLogout";
    /**
     * The height of the embedded Liveboard or visualization has been computed.
     * @return data - The height of the embedded Liveboard or visualization
     * @hidden
     */
    EmbedEvent["EmbedHeight"] = "EMBED_HEIGHT";
    /**
     * The center of visible iframe viewport is calculated.
     * @return data - The center of the visible Iframe viewport.
     * @hidden
     */
    EmbedEvent["EmbedIframeCenter"] = "EmbedIframeCenter";
    /**
     * Detects the route change.
     */
    EmbedEvent["RouteChange"] = "ROUTE_CHANGE";
    /**
     * The v1 event type for Data
     * @hidden
     */
    EmbedEvent["V1Data"] = "exportVizDataToParent";
    /**
     * Emitted when the embed does not have cookie access. This
     * happens on Safari where third-party cookies are blocked by default.
     *
     * @version SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1
     */
    EmbedEvent["NoCookieAccess"] = "noCookieAccess";
    /**
     * Emitted when SAML is complete
     * @private
     * @hidden
     */
    EmbedEvent["SAMLComplete"] = "samlComplete";
    /**
     * Emitted when any modal is opened in the app
     * @version SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1-sw
     */
    EmbedEvent["DialogOpen"] = "dialog-open";
    /**
     * Emitted when any modal is closed in the app
     * @version SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1-sw
     */
    EmbedEvent["DialogClose"] = "dialog-close";
    /**
     * Emitted when a liveboard has completed rendering,
     * this event can be used as a hook to trigger events on the
     * rendered liveboard
     * @version SDK: 1.9.1 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw
     */
    EmbedEvent["LiveboardRendered"] = "PinboardRendered";
    /**
     * This can be used to register an event listener which
     * is triggered on all events.
     * @Version SDK: 1.10.0 | ThoughtSpot: 8.2.0.cl, 8.4.1-sw
     */
    EmbedEvent["ALL"] = "*";
    /**
     * Emitted when answer is saved in the app
     * @Version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["Save"] = "save";
    /**
     * Emitted when the download action is triggered on an answer
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["Download"] = "download";
    /**
     * Emitted when the Download as PDF action is triggered on an answer
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["DownloadAsPdf"] = "downloadAsPdf";
    /**
     * Emitted when the Download as CSV action is triggered on an answer
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["DownloadAsCsv"] = "downloadAsCsv";
    /**
     * Emitted when the Download as XLSX action is triggered on an answer
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["DownloadAsXlsx"] = "downloadAsXlsx";
    /**
     * Emitted when an answer is deleted in the app
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["AnswerDelete"] = "answerDelete";
    /**
     * Emitted when an answer is pinned to a Liveboard
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["Pin"] = "pin";
    /**
     * Emitted when SpotIQ analysis is triggered
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["SpotIQAnalyze"] = "spotIQAnalyze";
    /**
     * Emitted when a user shares an object with another user or group
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["Share"] = "share";
    /**
     * Emitted when a user clicks the Include action to include a specific value or data on a chart or table
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["DrillInclude"] = "context-menu-item-include";
    /**
     * Emitted when a user clicks the Exclude action to exclude a specific value or data on a chart or table
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["DrillExclude"] = "context-menu-item-exclude";
    /**
     * Emitted when copied column value on the app
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["CopyToClipboard"] = "context-menu-item-copy-to-clipboard";
    /**
     * Emitted when a user clicks the Update TML action
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["UpdateTML"] = "updateTSL";
    /**
     * Emitted when a user clicks the Edit TML action
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["EditTML"] = "editTSL";
    /**
     * Emitted when ExportTML trigger in answer on the app
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["ExportTML"] = "exportTSL";
    /**
     * Emitted when an answer is saved as a view
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["SaveAsView"] = "saveAsView";
    /**
     * Emitted when copy of existing answer on the app
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["CopyAEdit"] = "copyAEdit";
    /**
     * Emitted when a user clicks Show underlying data on an answe
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["ShowUnderlyingData"] = "showUnderlyingData";
    /**
     * Emitted when an answer is switched to a chart or table view
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    EmbedEvent["AnswerChartSwitcher"] = "answerChartSwitcher";
    /**
     * Internal event to communicate the initial settings back to the TS APP
     * @hidden
     */
    EmbedEvent["APP_INIT"] = "appInit";
    /**
     * Emitted when a user clicks Show Liveboard details on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["LiveboardInfo"] = "pinboardInfo";
    /**
     * Emitted when a user clicks on the Favorite icon on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["AddToFavorites"] = "addToFavorites";
    /**
     * Emitted when a user clicks Schedule on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["Schedule"] = "subscription";
    /**
     * Emitted when a user clicks Edit on a Liveboard or visualization
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["Edit"] = "edit";
    /**
     * Emitted when a user clicks Make a copy on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["MakeACopy"] = "makeACopy";
    /**
     * Emitted when a user clicks Present on a Liveboard or visualization
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["Present"] = "present";
    /**
     * Emitted when a user clicks Delete on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["Delete"] = "delete";
    /**
     * Emitted when a user clicks Manage schedules on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["SchedulesList"] = "schedule-list";
    /**
     * Emitted when a user clicks Cancel in edit mode on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["Cancel"] = "cancel";
    /**
     * Emitted when a user clicks Explore on a visualization
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["Explore"] = "explore";
    /**
     * Emitted when a user clicks Copy link action on a visualization
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    EmbedEvent["CopyLink"] = "embedDocument";
})(EmbedEvent || (EmbedEvent = {}));
/**
 * Event types that can be triggered by the host application
 * to the embedded ThoughtSpot app
 *
 * To trigger an event use the corresponding
 * {@link LiveboardEmbed.trigger} or {@link AppEmbed.trigger} or {@link SearchEmbed.trigger} method.
 */
// eslint-disable-next-line no-shadow
export var HostEvent;
(function (HostEvent) {
    /**
     * Trigger a search
     * @param dataSourceIds - The list of data source GUIDs
     * @param searchQuery - The search query
     */
    HostEvent["Search"] = "search";
    /**
     * Trigger a drill on certain points by certain column
     * @param points - an object containing selectedPoints/clickedPoints
     *              eg. { selectedPoints: []}
     * @param columnGuid - a string guid of the column to drill by. This is optional,
     *                     if not provided it will auto drill by the configured column.
     * @version SDK: 1.5.0 | ThoughtSpot: ts7.oct.cl, 7.2.1
     */
    HostEvent["DrillDown"] = "triggerDrillDown";
    /**
     * Apply filters
     * @hidden
     */
    HostEvent["Filter"] = "filter";
    /**
     * Reload the answer or visualization
     * @hidden
     */
    HostEvent["Reload"] = "reload";
    /**
     * Set the visible visualizations on a Liveboard.
     * @param - an array of ids of visualizations to show, the ids not passed
     *          will be hidden.
     * @version SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1-sw
     */
    HostEvent["SetVisibleVizs"] = "SetPinboardVisibleVizs";
    /**
     * Update the runtime filters. The runtime filters passed here are extended
     * on to the existing runtime filters if they exist.
     * @param - {@link RuntimeFilter}[] an array of {@link RuntimeFilter} Types.
     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw
     */
    HostEvent["UpdateRuntimeFilters"] = "UpdateRuntimeFilters";
    /**
     * Navigate to a specific page in App embed without any reload.
     * This is the same as calling `appEmbed.navigateToPage(path, true)`
     * @param path - the path to navigate to (can be a number[1/-1] to go forward/back)
     * @version SDK: 1.12.0 | ThoughtSpot 8.4.0.cl, 8.4.1-sw
     */
    HostEvent["Navigate"] = "Navigate";
    /**
     * Gets the current pinboard content.
     * @version SDK: 1.13.0 | ThoughtSpot: 8.5.0.cl, 8.8.1-sw
     */
    HostEvent["getExportRequestForCurrentPinboard"] = "getExportRequestForCurrentPinboard";
    /**
     * Triggers the Pin action on an embedded object
     * @param - incase of Liveboard embed, takes in an object with vizId as a key
     * can be left empty for search and visualization embeds
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["Pin"] = "pin";
    /**
     * Triggers the Show Liveboard details action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["LiveboardInfo"] = "pinboardInfo";
    /**
     * Triggers the Schedule action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["Schedule"] = "subscription";
    /**
     * Triggers the Manage schedule action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["SchedulesList"] = "schedule-list";
    /**
     * Triggers the Export TML action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["ExportTML"] = "exportTSL";
    /**
     * Triggers the Edit TML action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["EditTML"] = "editTSL";
    /**
     * Triggers the Update TML action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["UpdateTML"] = "updateTSL";
    /**
     * Triggers the Download PDF action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["DownloadAsPdf"] = "downloadAsPdf";
    /**
     * Triggers the Make a copy action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["MakeACopy"] = "makeACopy";
    /**
     * Triggers the Delete action on a Liveboard
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["Remove"] = "delete";
    /**
     * Triggers the Explore action on a visualization
     * @param - an object with vizId as a key
     * eg: {vizId: '730496d6-6903-4601-937e-2c691821af3c'}
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["Explore"] = "explore";
    /**
     * Triggers the Create alert action on a visualization
     * @param - an object with vizId as a key
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["CreateMonitor"] = "createMonitor";
    /**
     * Triggers the Manage alert action on a visualization
     * @param - an object with vizId as a key
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["ManageMonitor"] = "manageMonitor";
    /**
     * Triggers the Edit action on a Liveboard or visualization
     * @param - object - to trigger the action for a specfic visualization in Liveboard embed, pass in vizId as a key
     * @example
     * liveboardEmbed.trigger(HostEvent.Edit)
     * liveboardEmbed.trigger(HostEvent.Edit, {vizId: '730496d6-6903-4601-937e-2c691821af3c'})
     * vizEmbed.trigger((HostEvent.Edit)
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["Edit"] = "edit";
    /**
     * Triggers the Copy link action on a Liveboard or visualization
     * @param - object - to trigger the action for a specfic visualization in Liveboard embed, pass in vizId as a key
     * @example
     * liveboardEmbed.trigger(HostEvent.CopyLink)
     * liveboardEmbed.trigger(HostEvent.CopyLink, {vizId: '730496d6-6903-4601-937e-2c691821af3c'})
     * vizEmbed.trigger((HostEvent.CopyLink)
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["CopyLink"] = "embedDocument";
    /**
     * Triggers the Present action on a Liveboard or visualization
     * @param - object - to trigger the action for a specfic visualization in Liveboard embed, pass in vizId as a key
     * @example
     * liveboardEmbed.trigger(HostEvent.Present)
     * liveboardEmbed.trigger(HostEvent.Present, {vizId: '730496d6-6903-4601-937e-2c691821af3c'})
     * vizEmbed.trigger((HostEvent.Present)
     * @version SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw
     */
    HostEvent["Present"] = "present";
})(HostEvent || (HostEvent = {}));
/**
 * The different visual modes that the data sources panel within
 * search could appear in, i.e., hidden, collapsed, or expanded.
 */
// eslint-disable-next-line no-shadow
export var DataSourceVisualMode;
(function (DataSourceVisualMode) {
    /**
     * Data source panel is hidden.
     */
    DataSourceVisualMode["Hidden"] = "hide";
    /**
     * Data source panel is collapsed, but the user can manually expand it.
     */
    DataSourceVisualMode["Collapsed"] = "collapse";
    /**
     * Data source panel is expanded, but the user can manually collapse it.
     */
    DataSourceVisualMode["Expanded"] = "expand";
})(DataSourceVisualMode || (DataSourceVisualMode = {}));
/**
 * The query params passed down to the embedded ThoughtSpot app
 * containing configuration and/or visual information.
 */
// eslint-disable-next-line no-shadow
export var Param;
(function (Param) {
    Param["DataSources"] = "dataSources";
    Param["DataSourceMode"] = "dataSourceMode";
    Param["DisableActions"] = "disableAction";
    Param["DisableActionReason"] = "disableHint";
    Param["ForceTable"] = "forceTable";
    Param["preventLiveboardFilterRemoval"] = "preventPinboardFilterRemoval";
    Param["SearchQuery"] = "searchQuery";
    Param["HideActions"] = "hideAction";
    Param["HideObjects"] = "hideObjects";
    Param["HostAppUrl"] = "hostAppUrl";
    Param["EnableVizTransformations"] = "enableVizTransform";
    Param["EnableSearchAssist"] = "enableSearchAssist";
    Param["HideResult"] = "hideResult";
    Param["UseLastSelectedDataSource"] = "useLastSelectedSources";
    Param["Tag"] = "tag";
    Param["searchTokenString"] = "searchTokenString";
    Param["executeSearch"] = "executeSearch";
    Param["fullHeight"] = "isFullHeightPinboard";
    Param["livedBoardEmbed"] = "isLiveboardEmbed";
    Param["searchEmbed"] = "isSearchEmbed";
    Param["vizEmbed"] = "isVizEmbed";
    Param["Version"] = "sdkVersion";
    Param["ViewPortHeight"] = "viewPortHeight";
    Param["ViewPortWidth"] = "viewPortWidth";
    Param["VisibleActions"] = "visibleAction";
    Param["CustomCSSUrl"] = "customCssUrl";
    Param["DisableLoginRedirect"] = "disableLoginRedirect";
    Param["visibleVizs"] = "pinboardVisibleVizs";
    Param["LiveboardV2Enabled"] = "isPinboardV2Enabled";
    Param["ShowAlerts"] = "showAlerts";
    Param["Locale"] = "locale";
    Param["CustomStyle"] = "customStyle";
})(Param || (Param = {}));
/**
 * The list of actions that can be performed on visual ThoughtSpot
 * entities, such as answers and Liveboards.
 */
// eslint-disable-next-line no-shadow
export var Action;
(function (Action) {
    Action["Save"] = "save";
    /**
     * @hidden
     */
    Action["Update"] = "update";
    /**
     * @hidden
     */
    Action["SaveUntitled"] = "saveUntitled";
    Action["SaveAsView"] = "saveAsView";
    Action["MakeACopy"] = "makeACopy";
    Action["EditACopy"] = "editACopy";
    Action["CopyLink"] = "embedDocument";
    /**
     * @hidden
     */
    Action["ResetLayout"] = "resetLayout";
    Action["Schedule"] = "subscription";
    Action["SchedulesList"] = "schedule-list";
    Action["Share"] = "share";
    Action["AddFilter"] = "addFilter";
    Action["ConfigureFilter"] = "configureFilter";
    /**
     * @hidden
     */
    Action["AddFormula"] = "addFormula";
    /**
     * @hidden
     */
    Action["SearchOnTop"] = "searchOnTop";
    Action["SpotIQAnalyze"] = "spotIQAnalyze";
    /**
     * @hidden
     */
    Action["ExplainInsight"] = "explainInsight";
    /**
     * @hidden
     */
    Action["SpotIQFollow"] = "spotIQFollow";
    Action["ShareViz"] = "shareViz";
    /**
     * @hidden
     */
    Action["ReplaySearch"] = "replaySearch";
    Action["ShowUnderlyingData"] = "showUnderlyingData";
    Action["Download"] = "download";
    Action["DownloadAsPdf"] = "downloadAsPdf";
    Action["DownloadAsCsv"] = "downloadAsCSV";
    Action["DownloadAsXlsx"] = "downloadAsXLSX";
    /**
     * @hidden
     */
    Action["DownloadTrace"] = "downloadTrace";
    Action["ExportTML"] = "exportTSL";
    Action["ImportTML"] = "importTSL";
    Action["UpdateTML"] = "updateTSL";
    Action["EditTML"] = "editTSL";
    Action["Present"] = "present";
    Action["ToggleSize"] = "toggleSize";
    Action["Edit"] = "edit";
    Action["EditTitle"] = "editTitle";
    Action["Remove"] = "delete";
    /**
     * @hidden
     */
    Action["Ungroup"] = "ungroup";
    /**
     * @hidden
     */
    Action["Describe"] = "describe";
    /**
     * @hidden
     */
    Action["Relate"] = "relate";
    /**
     * @hidden
     */
    Action["CustomizeHeadlines"] = "customizeHeadlines";
    /**
     * @hidden
     */
    Action["PinboardInfo"] = "pinboardInfo";
    Action["LiveboardInfo"] = "pinboardInfo";
    /**
     * @hidden
     */
    Action["SendAnswerFeedback"] = "sendFeedback";
    /**
     * @hidden
     */
    Action["DownloadEmbraceQueries"] = "downloadEmbraceQueries";
    Action["Pin"] = "pin";
    /**
     * @hidden
     */
    Action["AnalysisInfo"] = "analysisInfo";
    Action["Subscription"] = "subscription";
    Action["Explore"] = "explore";
    Action["DrillInclude"] = "context-menu-item-include";
    Action["DrillExclude"] = "context-menu-item-exclude";
    Action["CopyToClipboard"] = "context-menu-item-copy-to-clipboard";
    Action["CopyAndEdit"] = "context-menu-item-copy-and-edit";
    /**
     * @hidden
     */
    Action["DrillEdit"] = "context-menu-item-edit";
    Action["EditMeasure"] = "context-menu-item-edit-measure";
    Action["Separator"] = "context-menu-item-separator";
    /**
     * @hidden
     */
    Action["DrillDown"] = "DRILL";
    Action["RequestAccess"] = "requestAccess";
    Action["QueryDetailsButtons"] = "queryDetailsButtons";
    /**
     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw
     */
    Action["AnswerDelete"] = "onDeleteAnswer";
    /**
     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw
     */
    Action["AnswerChartSwitcher"] = "answerChartSwitcher";
    /**
     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw
     */
    Action["AddToFavorites"] = "addToFavorites";
    /**
     * @version SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw
     */
    Action["EditDetails"] = "editDetails";
    /**
     * @version SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    Action["CreateMonitor"] = "createMonitor";
    /**
     * @version SDK: 1.11.1 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw
     */
    Action["ReportError"] = "reportError";
})(Action || (Action = {}));
// eslint-disable-next-line no-shadow
export var OperationType;
(function (OperationType) {
    OperationType["GetChartWithData"] = "GetChartWithData";
    OperationType["GetTableWithHeadlineData"] = "GetTableWithHeadlineData";
})(OperationType || (OperationType = {}));
//# sourceMappingURL=types.js.map