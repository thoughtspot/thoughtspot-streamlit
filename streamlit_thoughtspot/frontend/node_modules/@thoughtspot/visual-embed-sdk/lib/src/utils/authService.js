// eslint-disable-next-line import/no-cycle
import { EndPoints } from '../auth';
function failureLoggedFetch(url, options = {}) {
    return fetch(url, options).then(async (r) => {
        var _a;
        if (!r.ok && r.type !== 'opaqueredirect' && r.type !== 'opaque') {
            console.error('Failure', await ((_a = r.text) === null || _a === void 0 ? void 0 : _a.call(r)));
        }
        return r;
    });
}
export function fetchSessionInfoService(authVerificationUrl) {
    return failureLoggedFetch(authVerificationUrl, {
        credentials: 'include',
    });
}
export async function fetchAuthTokenService(authEndpoint) {
    return fetch(authEndpoint);
}
export async function fetchAuthService(thoughtSpotHost, username, authToken) {
    return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.TOKEN_LOGIN}?username=${username}&auth_token=${authToken}`, {
        credentials: 'include',
        // We do not want to follow the redirect, as it starts giving a CORS error
        redirect: 'manual',
    });
}
export async function fetchAuthPostService(thoughtSpotHost, username, authToken) {
    return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.TOKEN_LOGIN}`, {
        method: 'POST',
        headers: {
            'content-type': 'application/x-www-form-urlencoded',
            'x-requested-by': 'ThoughtSpot',
        },
        body: `username=${encodeURIComponent(username)}&auth_token=${encodeURIComponent(authToken)}`,
        credentials: 'include',
        // We do not want to follow the redirect, as it starts giving a CORS error
        redirect: 'manual',
    });
}
export async function fetchBasicAuthService(thoughtSpotHost, username, password) {
    return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.BASIC_LOGIN}`, {
        method: 'POST',
        headers: {
            'content-type': 'application/x-www-form-urlencoded',
            'x-requested-by': 'ThoughtSpot',
        },
        body: `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`,
        credentials: 'include',
    });
}
export async function fetchLogoutService(thoughtSpotHost) {
    return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.LOGOUT}`, {
        credentials: 'include',
        method: 'POST',
        headers: {
            'x-requested-by': 'ThoughtSpot',
        },
    });
}
//# sourceMappingURL=authService.js.map