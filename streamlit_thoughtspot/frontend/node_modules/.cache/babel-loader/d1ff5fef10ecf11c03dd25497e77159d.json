{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { SearchEmbed } from '@thoughtspot/visual-embed-sdk';\nimport React, { useEffect } from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      const name = this.props.args[\"name\"];\n      useEffect(() => {\n        var element = document.getElementById('ts-embed');\n        const searchEmbed = new SearchEmbed(element, {\n          frameParams: {\n            width: '100%',\n            height: '100%'\n          },\n          answerId: \"<%=savedAnswerGUID%>\",\n          dataSources: ['<%=datasourceGUID%>'],\n          collapseDataSources: false,\n          disabledActions: [],\n          disabledActionReason: '<reason for disabling>',\n          enableSearchAssist: true,\n          forceTable: false,\n          hiddenActions: [],\n          hideDataSources: false,\n          hideResults: false,\n          searchOptions: {\n            searchTokenString: '<TML-query-string>',\n            executeSearch: true\n          }\n        });\n      }, []);\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","SearchEmbed","React","useEffect","MyComponent","state","numClicks","isFocused","render","name","props","args","element","document","getElementById","searchEmbed","frameParams","width","height","answerId","dataSources","collapseDataSources","disabledActions","disabledActionReason","enableSearchAssist","forceTable","hiddenActions","hideDataSources","hideResults","searchOptions","searchTokenString","executeSearch","theme","style"],"sources":["/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent\n}\nfrom '@thoughtspot/visual-embed-sdk';\n\nimport React, { ReactNode, useEffect } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    useEffect(()=>{\n      var element! =  document.getElementById('ts-embed');\n      const searchEmbed = new SearchEmbed(element, {\n        frameParams: {\n            width: '100%',\n            height: '100%',\n        },\n        answerId: \"<%=savedAnswerGUID%>\",\n        dataSources: ['<%=datasourceGUID%>'],\n        collapseDataSources: false,\n        disabledActions: [],\n        disabledActionReason: '<reason for disabling>',\n        enableSearchAssist: true,\n        forceTable: false,\n        hiddenActions: [],\n        hideDataSources: false,\n        hideResults: false,\n        searchOptions: {\n            searchTokenString: '<TML-query-string>',\n            executeSearch: true,\n        },\n    });\n    },[])\n\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    return (\n      <span>\n      </span>\n    )\n  }\n\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":";AAAA,SAEEA,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,SACEC,WADF,QAQK,+BARL;AAUA,OAAOC,KAAP,IAA2BC,SAA3B,QAA4C,OAA5C;;AAOA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BL,sBAA1B,CAAwD;EAAA;IAAA;IAAA,KAC/CM,KAD+C,GACvC;MAAEC,SAAS,EAAE,CAAb;MAAgBC,SAAS,EAAE;IAA3B,CADuC;;IAAA,KAG/CC,MAH+C,GAGtC,MAAiB;MAE/B,MAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;MACAR,SAAS,CAAC,MAAI;QACZ,IAAIS,OAAO,GAAKC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAhB;QACA,MAAMC,WAAW,GAAG,IAAId,WAAJ,CAAgBW,OAAhB,EAAyB;UAC3CI,WAAW,EAAE;YACTC,KAAK,EAAE,MADE;YAETC,MAAM,EAAE;UAFC,CAD8B;UAK3CC,QAAQ,EAAE,sBALiC;UAM3CC,WAAW,EAAE,CAAC,qBAAD,CAN8B;UAO3CC,mBAAmB,EAAE,KAPsB;UAQ3CC,eAAe,EAAE,EAR0B;UAS3CC,oBAAoB,EAAE,wBATqB;UAU3CC,kBAAkB,EAAE,IAVuB;UAW3CC,UAAU,EAAE,KAX+B;UAY3CC,aAAa,EAAE,EAZ4B;UAa3CC,eAAe,EAAE,KAb0B;UAc3CC,WAAW,EAAE,KAd8B;UAe3CC,aAAa,EAAE;YACXC,iBAAiB,EAAE,oBADR;YAEXC,aAAa,EAAE;UAFJ;QAf4B,CAAzB,CAApB;MAoBD,CAtBQ,EAsBP,EAtBO,CAAT;MAwBA,MAAM;QAAEC;MAAF,IAAY,KAAKtB,KAAvB;MACA,MAAMuB,KAA0B,GAAG,EAAnC;MAEA,oBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;IAID,CArCqD;EAAA;;AAAA,C,CA0CxD;AACA;AACA;AACA;AACA;;;AACA,eAAejC,uBAAuB,CAACI,WAAD,CAAtC"},"metadata":{},"sourceType":"module"}