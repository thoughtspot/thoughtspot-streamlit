{"ast":null,"code":"import{Streamlit,withStreamlitConnection}from\"streamlit-component-lib\";import{SearchEmbed,AuthType,init}from'@thoughtspot/visual-embed-sdk';import React,{useEffect}from\"react\";/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */function ThoughtspotSearchComponent(_ref){var args=_ref.args;var host=args[\"host\"];var sso=Object.keys(args).includes(\"sso\")?args[\"sso\"]:false;var height=Object.keys(args).includes(\"height\")?args[\"height\"]:600;var width=Object.keys(args).includes(\"width\")?args[\"width\"]:1000;var dataSources=Object.keys(args).includes(\"datasources\")?args[\"datasources\"]:[];var searchString=Object.keys(args).includes(\"searchstring\")?args[\"searchstring\"]:null;Streamlit.setFrameHeight(height);init({thoughtSpotHost:host,authType:sso?AuthType.SAML:AuthType.None});useEffect(function(){var element=document.getElementById('ts-embed');var searchEmbed=new SearchEmbed(element,{searchOptions:{searchTokenString:searchString,executeSearch:true},dataSources:dataSources,frameParams:{width:width+\"px\",height:height+\"px\"}});searchEmbed.render();});return/*#__PURE__*/React.createElement(\"div\",{style:{width:width+\"px\",height:height+\"px\"},id:\"ts-embed\"},\"TS Embed\");}// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ThoughtspotSearchComponent);","map":{"version":3,"names":["Streamlit","withStreamlitConnection","SearchEmbed","AuthType","init","React","useEffect","ThoughtspotSearchComponent","args","host","sso","Object","keys","includes","height","width","dataSources","searchString","setFrameHeight","thoughtSpotHost","authType","SAML","None","element","document","getElementById","searchEmbed","searchOptions","searchTokenString","executeSearch","frameParams","render"],"sources":["/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/src/ThoughtspotSearchComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps\n} from \"streamlit-component-lib\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent\n}\nfrom '@thoughtspot/visual-embed-sdk';\nimport React, {useEffect, ReactElement, ReactNode} from \"react\"\n\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\n\n function ThoughtspotSearchComponent({args}: ComponentProps): ReactElement {\n\n  let host = args[\"host\"];\n  let sso = Object.keys(args).includes(\"sso\") ? args[\"sso\"] : false\n  let height = Object.keys(args).includes(\"height\") ? args[\"height\"] : 600\n  let width = Object.keys(args).includes(\"width\") ? args[\"width\"] : 1000\n  let dataSources = Object.keys(args).includes(\"datasources\") ? args[\"datasources\"] : []\n  let searchString = Object.keys(args).includes(\"searchstring\") ? args[\"searchstring\"] : null\n\n  Streamlit.setFrameHeight(height)\n\n  \n  init({\n    thoughtSpotHost: host,\n    authType: sso ? AuthType.SAML : AuthType.None,\n  });\n\n  useEffect(()=>{\n      var element : any =  document.getElementById('ts-embed');\n      const searchEmbed = new SearchEmbed(element, {\n        searchOptions:{\n          searchTokenString:searchString,\n          executeSearch:true\n        },\n        dataSources: dataSources,\n        frameParams: {\n            width: width+\"px\",\n            height: height+\"px\",\n        },\n      });\n      searchEmbed.render()\n    })\n    return (\n      <div style={{width:width+\"px\",height:height+\"px\"}} id=\"ts-embed\">\n        TS Embed\n      </div>  \n    )\n }\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ThoughtspotSearchComponent)\n"],"mappings":"AAAA,OACEA,SADF,CAGEC,uBAHF,KAKO,yBALP,CAMA,OACEC,WADF,CAEEC,QAFF,CAGEC,IAHF,KAQK,+BARL,CASA,MAAOC,MAAP,EAAeC,SAAf,KAAwD,OAAxD,CAQA;AACA;AACA;AACA,GAGC,QAASC,2BAAT,MAA0E,IAArCC,KAAqC,MAArCA,IAAqC,CAEzE,GAAIC,KAAI,CAAGD,IAAI,CAAC,MAAD,CAAf,CACA,GAAIE,IAAG,CAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,QAAlB,CAA2B,KAA3B,EAAoCL,IAAI,CAAC,KAAD,CAAxC,CAAkD,KAA5D,CACA,GAAIM,OAAM,CAAGH,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,QAAlB,CAA2B,QAA3B,EAAuCL,IAAI,CAAC,QAAD,CAA3C,CAAwD,GAArE,CACA,GAAIO,MAAK,CAAGJ,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,QAAlB,CAA2B,OAA3B,EAAsCL,IAAI,CAAC,OAAD,CAA1C,CAAsD,IAAlE,CACA,GAAIQ,YAAW,CAAGL,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,QAAlB,CAA2B,aAA3B,EAA4CL,IAAI,CAAC,aAAD,CAAhD,CAAkE,EAApF,CACA,GAAIS,aAAY,CAAGN,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,QAAlB,CAA2B,cAA3B,EAA6CL,IAAI,CAAC,cAAD,CAAjD,CAAoE,IAAvF,CAEAR,SAAS,CAACkB,cAAV,CAAyBJ,MAAzB,EAGAV,IAAI,CAAC,CACHe,eAAe,CAAEV,IADd,CAEHW,QAAQ,CAAEV,GAAG,CAAGP,QAAQ,CAACkB,IAAZ,CAAmBlB,QAAQ,CAACmB,IAFtC,CAAD,CAAJ,CAKAhB,SAAS,CAAC,UAAI,CACV,GAAIiB,QAAa,CAAIC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAArB,CACA,GAAMC,YAAW,CAAG,GAAIxB,YAAJ,CAAgBqB,OAAhB,CAAyB,CAC3CI,aAAa,CAAC,CACZC,iBAAiB,CAACX,YADN,CAEZY,aAAa,CAAC,IAFF,CAD6B,CAK3Cb,WAAW,CAAEA,WAL8B,CAM3Cc,WAAW,CAAE,CACTf,KAAK,CAAEA,KAAK,CAAC,IADJ,CAETD,MAAM,CAAEA,MAAM,CAAC,IAFN,CAN8B,CAAzB,CAApB,CAWAY,WAAW,CAACK,MAAZ,GACD,CAdM,CAAT,CAeE,mBACE,2BAAK,KAAK,CAAE,CAAChB,KAAK,CAACA,KAAK,CAAC,IAAb,CAAkBD,MAAM,CAACA,MAAM,CAAC,IAAhC,CAAZ,CAAmD,EAAE,CAAC,UAAtD,aADF,CAKF,CAEF;AACA;AACA;AACA;AACA;AACA,cAAeb,wBAAuB,CAACM,0BAAD,CAAtC"},"metadata":{},"sourceType":"module"}