{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\n\nexport class BinaryBuilder extends VariableWidthBuilder {\n  constructor(opts) {\n    super(opts);\n    this._values = new BufferBuilder(new Uint8Array(0));\n  }\n\n  get byteLength() {\n    let size = this._pendingLength + this.length * 4;\n    this._offsets && (size += this._offsets.byteLength);\n    this._values && (size += this._values.byteLength);\n    this._nulls && (size += this._nulls.byteLength);\n    return size;\n  }\n\n  setValue(index, value) {\n    return super.setValue(index, toUint8Array(value));\n  }\n\n  _flushPending(pending, pendingLength) {\n    const offsets = this._offsets;\n\n    const data = this._values.reserve(pendingLength).buffer;\n\n    let index = 0,\n        length = 0,\n        offset = 0,\n        value;\n\n    for ([index, value] of pending) {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        length = value.length;\n        data.set(value, offset);\n        offsets.set(index, length);\n        offset += length;\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,oBAAT,QAAqD,YAArD;AAEA;;AACA,OAAM,MAAOC,aAAP,SAA0CD,oBAA1C,CAA6E;EAC/EE,YAAYC,IAAZ,EAA+C;IAC3C,MAAMA,IAAN;IACA,KAAKC,OAAL,GAAe,IAAIL,aAAJ,CAAkB,IAAIM,UAAJ,CAAe,CAAf,CAAlB,CAAf;EACH;;EACoB,IAAVC,UAAU;IACjB,IAAIC,IAAI,GAAG,KAAKC,cAAL,GAAuB,KAAKC,MAAL,GAAc,CAAhD;IACA,KAAKC,QAAL,KAAkBH,IAAI,IAAI,KAAKG,QAAL,CAAcJ,UAAxC;IACA,KAAKF,OAAL,KAAiBG,IAAI,IAAI,KAAKH,OAAL,CAAaE,UAAtC;IACA,KAAKK,MAAL,KAAgBJ,IAAI,IAAI,KAAKI,MAAL,CAAYL,UAApC;IACA,OAAOC,IAAP;EACH;;EACMK,QAAQ,CAACC,KAAD,EAAgBC,KAAhB,EAAiC;IAC5C,OAAO,MAAMF,QAAN,CAAeC,KAAf,EAAsBf,YAAY,CAACgB,KAAD,CAAlC,CAAP;EACH;;EACSC,aAAa,CAACC,OAAD,EAA+CC,aAA/C,EAAoE;IACvF,MAAMC,OAAO,GAAG,KAAKR,QAArB;;IACA,MAAMS,IAAI,GAAG,KAAKf,OAAL,CAAagB,OAAb,CAAqBH,aAArB,EAAoCI,MAAjD;;IACA,IAAIR,KAAK,GAAG,CAAZ;IAAA,IAAeJ,MAAM,GAAG,CAAxB;IAAA,IAA2Ba,MAAM,GAAG,CAApC;IAAA,IAAuCR,KAAvC;;IACA,KAAK,CAACD,KAAD,EAAQC,KAAR,CAAL,IAAuBE,OAAvB,EAAgC;MAC5B,IAAIF,KAAK,KAAKS,SAAd,EAAyB;QACrBL,OAAO,CAACM,GAAR,CAAYX,KAAZ,EAAmB,CAAnB;MACH,CAFD,MAEO;QACHJ,MAAM,GAAGK,KAAK,CAACL,MAAf;QACAU,IAAI,CAACK,GAAL,CAASV,KAAT,EAAgBQ,MAAhB;QACAJ,OAAO,CAACM,GAAR,CAAYX,KAAZ,EAAmBJ,MAAnB;QACAa,MAAM,IAAIb,MAAV;MACH;IACJ;EACJ;;AA7B8E","names":["toUint8Array","BufferBuilder","VariableWidthBuilder","BinaryBuilder","constructor","opts","_values","Uint8Array","byteLength","size","_pendingLength","length","_offsets","_nulls","setValue","index","value","_flushPending","pending","pendingLength","offsets","data","reserve","buffer","offset","undefined","set"],"sources":["builder/binary.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}