{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getEncodedQueryParamsString, getCssDimension, getOffsetTop, embedEventStatus, setAttributes, getCustomisations } from '../utils';\nimport { getThoughtSpotHost, URL_MAX_LENGTH, DEFAULT_EMBED_WIDTH, DEFAULT_EMBED_HEIGHT, getV2BasePath } from '../config';\nimport { EmbedEvent, Action, Param } from '../types';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nimport { processEventData } from '../utils/processData';\nimport { processTrigger } from '../utils/processTrigger';\nimport pkgInfo from '../../package.json';\nimport { getAuthPromise, getEmbedConfig, renderInQueue } from './base';\nconst {\n  version\n} = pkgInfo;\n/**\n * Global prefix for all Thoughtspot postHash Params.\n */\n\nexport const THOUGHTSPOT_PARAM_PREFIX = 'ts-';\n/**\n * The event id map from v2 event names to v1 event id\n * v1 events are the classic embed events implemented in Blink v1\n * We cannot rename v1 event types to maintain backward compatibility\n * @internal\n */\n\nconst V1EventMap = {\n  [EmbedEvent.Data]: [EmbedEvent.V1Data]\n};\n/**\n * Base class for embedding v2 experience\n * Note: the v2 version of ThoughtSpot Blink is built on the new stack:\n * React+GraphQL\n */\n\nexport class TsEmbed {\n  constructor(domSelector, viewConfig) {\n    /**\n     * Should we encode URL Query Params using base64 encoding which thoughtspot\n     * will generate for embedding. This provides additional security to\n     * thoughtspot clusters against Cross site scripting attacks.\n     * @default false\n     */\n    this.shouldEncodeUrlQueryParams = false;\n    this.defaultHiddenActions = [Action.ReportError];\n    /**\n     * Send Custom style as part of payload of APP_INIT\n     */\n\n    this.appInitCb = (_, responder) => {\n      responder({\n        type: EmbedEvent.APP_INIT,\n        data: {\n          customisations: getCustomisations(this.embedConfig)\n        }\n      });\n    };\n    /**\n     * Register APP_INIT event and sendback init payload\n     */\n\n\n    this.registerAppInit = () => {\n      this.on(EmbedEvent.APP_INIT, this.appInitCb);\n    };\n\n    this.el = this.getDOMNode(domSelector); // TODO: handle error\n\n    this.embedConfig = getEmbedConfig();\n    this.thoughtSpotHost = getThoughtSpotHost(this.embedConfig);\n    this.thoughtSpotV2Base = getV2BasePath(this.embedConfig);\n    this.eventHandlerMap = new Map();\n    this.isError = false;\n    this.viewConfig = viewConfig;\n    this.shouldEncodeUrlQueryParams = this.embedConfig.shouldEncodeUrlQueryParams;\n    this.registerAppInit();\n  }\n  /**\n   * Gets a reference to the root DOM node where\n   * the embedded content will appear.\n   * @param domSelector\n   */\n\n\n  getDOMNode(domSelector) {\n    return typeof domSelector === 'string' ? document.querySelector(domSelector) : domSelector;\n  }\n  /**\n   * Throws error encountered during initialization.\n   */\n\n\n  throwInitError() {\n    this.handleError('You need to init the ThoughtSpot SDK module first');\n  }\n  /**\n   * Handles errors within the SDK\n   * @param error The error message or object\n   */\n\n\n  handleError(error) {\n    this.isError = true;\n    this.executeCallbacks(EmbedEvent.Error, {\n      error\n    }); // Log error\n\n    console.error(error);\n  }\n  /**\n   * Extracts the type field from the event payload\n   * @param event The window message event\n   */\n\n\n  getEventType(event) {\n    var _a, _b; // eslint-disable-next-line no-underscore-dangle\n\n\n    return ((_a = event.data) === null || _a === void 0 ? void 0 : _a.type) || ((_b = event.data) === null || _b === void 0 ? void 0 : _b.__type);\n  }\n  /**\n   * Extracts the port field from the event payload\n   * @param event  The window message event\n   * @returns\n   */\n\n\n  getEventPort(event) {\n    if (event.ports.length && event.ports[0]) {\n      return event.ports[0];\n    }\n\n    return null;\n  }\n  /**\n   * fix for ts7.sep.cl\n   * will be removed for ts7.oct.cl\n   * @hidden\n   */\n\n\n  formatEventData(event, eventType) {\n    const eventData = { ...event.data,\n      type: eventType\n    };\n\n    if (!eventData.data) {\n      eventData.data = event.data.payload;\n    }\n\n    return eventData;\n  }\n  /**\n   * Adds a global event listener to window for \"message\" events.\n   * ThoughtSpot detects if a particular event is targeted to this\n   * embed instance through an identifier contained in the payload,\n   * and executes the registered callbacks accordingly.\n   */\n\n\n  subscribeToEvents() {\n    window.addEventListener('message', event => {\n      const eventType = this.getEventType(event);\n      const eventPort = this.getEventPort(event);\n      const eventData = this.formatEventData(event, eventType);\n\n      if (event.source === this.iFrame.contentWindow) {\n        this.executeCallbacks(eventType, processEventData(eventType, eventData, this.thoughtSpotHost, this.el), eventPort);\n      }\n    });\n  }\n  /**\n   * Constructs the base URL string to load the ThoughtSpot app.\n   */\n\n\n  getEmbedBasePath(query) {\n    let queryString = query;\n\n    if (this.shouldEncodeUrlQueryParams) {\n      queryString = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(queryString.substr(1))}`;\n    }\n\n    const basePath = [this.thoughtSpotHost, this.thoughtSpotV2Base, queryString].filter(x => x.length > 0).join('/');\n    return `${basePath}#/embed`;\n  }\n  /**\n   * Common query params set for all the embed modes.\n   * @returns queryParams\n   */\n\n\n  getBaseQueryParams() {\n    var _a;\n\n    const queryParams = {};\n    let hostAppUrl = ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.host) || ''; // The below check is needed because TS Cloud firewall, blocks localhost/127.0.0.1\n    // in any url param.\n\n    if (hostAppUrl.includes('localhost') || hostAppUrl.includes('127.0.0.1')) {\n      hostAppUrl = 'local-host';\n    }\n\n    queryParams[Param.HostAppUrl] = encodeURIComponent(hostAppUrl);\n    queryParams[Param.ViewPortHeight] = window.innerHeight;\n    queryParams[Param.ViewPortWidth] = window.innerWidth;\n    queryParams[Param.Version] = version;\n\n    if (this.embedConfig.disableLoginRedirect === true || this.embedConfig.autoLogin === true) {\n      queryParams[Param.DisableLoginRedirect] = true;\n    } // TODO remove this\n\n\n    if (this.embedConfig.customCssUrl) {\n      queryParams[Param.CustomCSSUrl] = this.embedConfig.customCssUrl;\n    }\n\n    const {\n      disabledActions,\n      disabledActionReason,\n      hiddenActions,\n      visibleActions,\n      showAlerts,\n      additionalFlags,\n      locale\n    } = this.viewConfig;\n\n    if (Array.isArray(visibleActions) && Array.isArray(hiddenActions)) {\n      this.handleError('You cannot have both hidden actions and visible actions');\n      return queryParams;\n    }\n\n    if (disabledActions === null || disabledActions === void 0 ? void 0 : disabledActions.length) {\n      queryParams[Param.DisableActions] = disabledActions;\n    }\n\n    if (disabledActionReason) {\n      queryParams[Param.DisableActionReason] = disabledActionReason;\n    }\n\n    queryParams[Param.HideActions] = [...this.defaultHiddenActions, ...(hiddenActions !== null && hiddenActions !== void 0 ? hiddenActions : [])];\n\n    if (Array.isArray(visibleActions)) {\n      queryParams[Param.VisibleActions] = visibleActions;\n    }\n\n    if (showAlerts !== undefined) {\n      queryParams[Param.ShowAlerts] = showAlerts;\n    }\n\n    if (locale !== undefined) {\n      queryParams[Param.Locale] = locale;\n    }\n\n    if (additionalFlags && additionalFlags.constructor.name === 'Object') {\n      Object.assign(queryParams, additionalFlags);\n    }\n\n    return queryParams;\n  }\n  /**\n   * Constructs the base URL string to load v1 of the ThoughtSpot app.\n   * This is used for embedding Liveboards, visualizations, and full application.\n   * @param queryString The query string to append to the URL.\n   * @param isAppEmbed A Boolean parameter to specify if you are embedding\n   * the full application.\n   */\n\n\n  getV1EmbedBasePath(queryString) {\n    let showPrimaryNavbar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let disableProfileAndHelp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let isAppEmbed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let enableSearchAssist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const queryStringFrag = queryString ? `&${queryString}` : '';\n    const primaryNavParam = `&primaryNavHidden=${!showPrimaryNavbar}`;\n    const disableProfileAndHelpParam = `&profileAndHelpInNavBarHidden=${disableProfileAndHelp}`;\n    const enableSearchAssistParam = `&${Param.EnableSearchAssist}=${enableSearchAssist}`;\n    let queryParams = `?embedApp=true${isAppEmbed ? primaryNavParam : ''}${isAppEmbed ? disableProfileAndHelpParam : ''}${enableSearchAssist ? enableSearchAssistParam : ''}${queryStringFrag}`;\n\n    if (this.shouldEncodeUrlQueryParams) {\n      queryParams = `?base64UrlEncodedFlags=${getEncodedQueryParamsString(queryParams.substr(1))}`;\n    }\n\n    let path = `${this.thoughtSpotHost}/${queryParams}#`;\n\n    if (!isAppEmbed) {\n      path = `${path}/embed`;\n    }\n\n    return path;\n  }\n  /**\n   * Renders the embedded ThoughtSpot app in an iframe and sets up\n   * event listeners.\n   * @param url\n   * @param frameOptions\n   */\n\n\n  renderIFrame(url) {\n    let frameOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this.isError) {\n      return;\n    }\n\n    if (!this.thoughtSpotHost) {\n      this.throwInitError();\n    }\n\n    if (url.length > URL_MAX_LENGTH) {// warn: The URL is too long\n    }\n\n    renderInQueue(nextInQueue => {\n      var _a;\n\n      const initTimestamp = Date.now();\n      this.executeCallbacks(EmbedEvent.Init, {\n        data: {\n          timestamp: initTimestamp\n        },\n        type: EmbedEvent.Init\n      });\n      uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_START);\n      (_a = getAuthPromise()) === null || _a === void 0 ? void 0 : _a.then(isLoggedIn => {\n        if (!isLoggedIn) {\n          this.el.innerHTML = this.embedConfig.loginFailedMessage;\n          return;\n        }\n\n        uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_COMPLETE);\n        this.iFrame = this.iFrame || document.createElement('iframe');\n        this.iFrame.src = url; // according to screenfull.js documentation\n        // allowFullscreen, webkitallowfullscreen and mozallowfullscreen must be true\n\n        this.iFrame.allowFullscreen = true; // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n\n        this.iFrame.webkitallowfullscreen = true; // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n\n        this.iFrame.mozallowfullscreen = true;\n        const {\n          height: frameHeight,\n          width: frameWidth,\n          ...restParams\n        } = frameOptions;\n        const width = getCssDimension(frameWidth || DEFAULT_EMBED_WIDTH);\n        const height = getCssDimension(frameHeight || DEFAULT_EMBED_HEIGHT);\n        setAttributes(this.iFrame, restParams);\n        this.iFrame.style.width = `${width}`;\n        this.iFrame.style.height = `${height}`;\n        this.iFrame.style.border = '0';\n        this.iFrame.name = 'ThoughtSpot Embedded Analytics';\n        this.iFrame.addEventListener('load', () => {\n          nextInQueue();\n          const loadTimestamp = Date.now();\n          this.executeCallbacks(EmbedEvent.Load, {\n            data: {\n              timestamp: loadTimestamp\n            },\n            type: EmbedEvent.Load\n          });\n          uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_IFRAME_LOAD_PERFORMANCE, {\n            timeTookToLoad: loadTimestamp - initTimestamp\n          });\n        });\n        this.iFrame.addEventListener('error', () => {\n          nextInQueue();\n        });\n        this.el.innerHTML = '';\n        this.el.appendChild(this.iFrame);\n        const prefetchIframe = document.querySelectorAll('.prefetchIframe');\n\n        if (prefetchIframe.length) {\n          prefetchIframe.forEach(el => {\n            el.remove();\n          });\n        }\n\n        this.subscribeToEvents();\n      }).catch(error => {\n        nextInQueue();\n        uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_RENDER_FAILED);\n        this.el.innerHTML = this.embedConfig.loginFailedMessage;\n        this.handleError(error);\n      });\n    });\n  }\n  /**\n   * Sets the height of the iframe\n   * @param height The height in pixels\n   */\n\n\n  setIFrameHeight(height) {\n    this.iFrame.style.height = `${height}px`;\n  }\n  /**\n   * Executes all registered event handlers for a particular event type\n   * @param eventType The event type\n   * @param data The payload invoked with the event handler\n   * @param eventPort The event Port for a specific MessageChannel\n   */\n\n\n  executeCallbacks(eventType, data, eventPort) {\n    const callbacks = this.eventHandlerMap.get(eventType) || [];\n    const allHandlers = this.eventHandlerMap.get(EmbedEvent.ALL) || [];\n    callbacks.push(...allHandlers);\n    const dataStatus = (data === null || data === void 0 ? void 0 : data.status) || embedEventStatus.END;\n    callbacks.forEach(callbackObj => {\n      if (callbackObj.options.start && dataStatus === embedEventStatus.START || // When start status is true it trigger only start releated payload\n      !callbackObj.options.start && dataStatus === embedEventStatus.END // When start status is false it trigger only end releated payload\n      ) {\n        callbackObj.callback(data, payload => {\n          this.triggerEventOnPort(eventPort, payload);\n        });\n      }\n    });\n  }\n  /**\n   * Returns the ThoughtSpot hostname or IP address.\n   */\n\n\n  getThoughtSpotHost() {\n    return this.thoughtSpotHost;\n  }\n  /**\n   * Gets the v1 event type (if applicable) for the EmbedEvent type\n   * @param eventType The v2 event type\n   * @returns The corresponding v1 event type if one exists\n   * or else the v2 event type itself\n   */\n\n\n  getCompatibleEventType(eventType) {\n    return V1EventMap[eventType] || eventType;\n  }\n  /**\n   * Calculates the iframe center for the current visible viewPort\n   * of iframe using Scroll position of Host App, offsetTop for iframe\n   * in Host app. ViewPort height of the tab.\n   * @returns iframe Center in visible viewport,\n   *  Iframe height,\n   *  View port height.\n   */\n\n\n  getIframeCenter() {\n    const offsetTopClient = getOffsetTop(this.iFrame);\n    const scrollTopClient = window.scrollY;\n    const viewPortHeight = window.innerHeight;\n    const iframeHeight = this.iFrame.offsetHeight;\n    const iframeScrolled = scrollTopClient - offsetTopClient;\n    let iframeVisibleViewPort;\n    let iframeOffset;\n\n    if (iframeScrolled < 0) {\n      iframeVisibleViewPort = viewPortHeight - (offsetTopClient - scrollTopClient);\n      iframeVisibleViewPort = Math.min(iframeHeight, iframeVisibleViewPort);\n      iframeOffset = 0;\n    } else {\n      iframeVisibleViewPort = Math.min(iframeHeight - iframeScrolled, viewPortHeight);\n      iframeOffset = iframeScrolled;\n    }\n\n    const iframeCenter = iframeOffset + iframeVisibleViewPort / 2;\n    return {\n      iframeCenter,\n      iframeScrolled,\n      iframeHeight,\n      viewPortHeight,\n      iframeVisibleViewPort\n    };\n  }\n  /**\n   * Registers an event listener to trigger an alert when the ThoughtSpot app\n   * sends an event of a particular message type to the host application.\n   *\n   * @param messageType The message type\n   * @param callback A callback as a function\n   * @param options The message options\n   */\n\n\n  on(messageType, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      start: false\n    };\n\n    if (this.isRendered) {\n      this.handleError('Please register event handlers before calling render');\n    }\n\n    const callbacks = this.eventHandlerMap.get(messageType) || [];\n    callbacks.push({\n      options,\n      callback\n    });\n    this.eventHandlerMap.set(messageType, callbacks);\n    return this;\n  }\n  /**\n   * Triggers an event on specific Port registered against\n   * for the EmbedEvent\n   * @param eventType The message type\n   * @param data The payload to send\n   */\n\n\n  triggerEventOnPort(eventPort, payload) {\n    if (eventPort) {\n      try {\n        eventPort.postMessage({\n          type: payload.type,\n          data: payload.data\n        });\n      } catch (e) {\n        eventPort.postMessage({\n          error: e\n        });\n        console.log(e);\n      }\n    } else {\n      console.log('Event Port is not defined');\n    }\n  }\n  /**\n   * Triggers an event to the embedded app\n   * @param messageType The event type\n   * @param data The payload to send with the message\n   */\n\n\n  trigger(messageType, data) {\n    uploadMixpanelEvent(`${MIXPANEL_EVENT.VISUAL_SDK_TRIGGER}-${messageType}`);\n    return processTrigger(this.iFrame, messageType, this.thoughtSpotHost, data);\n  }\n  /**\n   * Marks the ThoughtSpot object to have been rendered\n   * Needs to be overridden by subclasses to do the actual\n   * rendering of the iframe.\n   * @param args\n   */\n\n\n  render() {\n    this.isRendered = true;\n    return this;\n  }\n  /**\n   * Get the Post Url Params for THOUGHTSPOT from the current\n   * host app URL.\n   * THOUGHTSPOT URL params starts with a prefix \"ts-\"\n   */\n\n\n  getThoughtSpotPostUrlParams() {\n    const urlHash = window.location.hash;\n    const queryParams = window.location.search;\n    const postHashParams = urlHash.split('?');\n    const postURLParams = postHashParams[postHashParams.length - 1];\n    const queryParamsObj = new URLSearchParams(queryParams);\n    const postURLParamsObj = new URLSearchParams(postURLParams);\n    const params = new URLSearchParams();\n\n    const addKeyValuePairCb = (value, key) => {\n      if (key.startsWith(THOUGHTSPOT_PARAM_PREFIX)) {\n        params.append(key, value);\n      }\n    };\n\n    queryParamsObj.forEach(addKeyValuePairCb);\n    postURLParamsObj.forEach(addKeyValuePairCb);\n    let tsParams = params.toString();\n    tsParams = tsParams ? `?${tsParams}` : '';\n    return tsParams;\n  }\n\n}\n/**\n * Base class for embedding v1 experience\n * Note: The v1 version of ThoughtSpot Blink works on the AngularJS stack\n * which is currently under migration to v2\n */\n\nexport class V1Embed extends TsEmbed {\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n    this.viewConfig = viewConfig;\n  }\n  /**\n   * Render the app in an iframe and set up event handlers\n   * @param iframeSrc\n   */\n\n\n  renderV1Embed(iframeSrc) {\n    this.renderIFrame(iframeSrc, this.viewConfig.frameParams);\n  } // @override\n\n\n  on(messageType, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      start: false\n    };\n    const eventType = this.getCompatibleEventType(messageType);\n    return super.on(eventType, callback, options);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getEncodedQueryParamsString","getCssDimension","getOffsetTop","embedEventStatus","setAttributes","getCustomisations","getThoughtSpotHost","URL_MAX_LENGTH","DEFAULT_EMBED_WIDTH","DEFAULT_EMBED_HEIGHT","getV2BasePath","EmbedEvent","Action","Param","uploadMixpanelEvent","MIXPANEL_EVENT","processEventData","processTrigger","pkgInfo","getAuthPromise","getEmbedConfig","renderInQueue","version","THOUGHTSPOT_PARAM_PREFIX","V1EventMap","Data","V1Data","TsEmbed","constructor","domSelector","viewConfig","ReportError","_","responder","type","APP_INIT","data","customisations","embedConfig","on","appInitCb","el","getDOMNode","thoughtSpotHost","thoughtSpotV2Base","eventHandlerMap","Map","isError","shouldEncodeUrlQueryParams","registerAppInit","document","querySelector","throwInitError","handleError","error","executeCallbacks","Error","console","getEventType","event","_a","_b","__type","getEventPort","ports","length","formatEventData","eventType","eventData","payload","subscribeToEvents","window","addEventListener","eventPort","source","iFrame","contentWindow","getEmbedBasePath","query","queryString","substr","basePath","filter","x","join","getBaseQueryParams","queryParams","hostAppUrl","location","host","includes","HostAppUrl","encodeURIComponent","ViewPortHeight","innerHeight","ViewPortWidth","innerWidth","Version","disableLoginRedirect","autoLogin","DisableLoginRedirect","customCssUrl","CustomCSSUrl","disabledActions","disabledActionReason","hiddenActions","visibleActions","showAlerts","additionalFlags","locale","Array","isArray","DisableActions","DisableActionReason","HideActions","defaultHiddenActions","VisibleActions","undefined","ShowAlerts","Locale","name","Object","assign","getV1EmbedBasePath","showPrimaryNavbar","disableProfileAndHelp","isAppEmbed","enableSearchAssist","queryStringFrag","primaryNavParam","disableProfileAndHelpParam","enableSearchAssistParam","EnableSearchAssist","path","renderIFrame","url","frameOptions","nextInQueue","initTimestamp","Date","now","Init","timestamp","VISUAL_SDK_RENDER_START","then","isLoggedIn","innerHTML","loginFailedMessage","VISUAL_SDK_RENDER_COMPLETE","createElement","src","allowFullscreen","webkitallowfullscreen","mozallowfullscreen","height","frameHeight","width","frameWidth","restParams","style","border","loadTimestamp","Load","VISUAL_SDK_IFRAME_LOAD_PERFORMANCE","timeTookToLoad","appendChild","prefetchIframe","querySelectorAll","forEach","remove","catch","VISUAL_SDK_RENDER_FAILED","setIFrameHeight","callbacks","get","allHandlers","ALL","push","dataStatus","status","END","callbackObj","options","start","START","callback","triggerEventOnPort","getCompatibleEventType","getIframeCenter","offsetTopClient","scrollTopClient","scrollY","viewPortHeight","iframeHeight","offsetHeight","iframeScrolled","iframeVisibleViewPort","iframeOffset","Math","min","iframeCenter","messageType","isRendered","set","postMessage","e","log","trigger","VISUAL_SDK_TRIGGER","render","getThoughtSpotPostUrlParams","urlHash","hash","search","postHashParams","split","postURLParams","queryParamsObj","URLSearchParams","postURLParamsObj","params","addKeyValuePairCb","value","key","startsWith","append","tsParams","toString","V1Embed","renderV1Embed","iframeSrc","frameParams"],"sourceRoot":"","sources":["../../../src/embed/ts-embed.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}