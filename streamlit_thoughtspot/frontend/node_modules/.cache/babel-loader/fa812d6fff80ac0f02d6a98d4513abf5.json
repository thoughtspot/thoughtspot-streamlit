{"ast":null,"code":"import { initMixpanel } from './mixpanel-service';\nimport { AuthType, EmbedEvent } from './types';\nimport { getRedirectUrl } from './utils'; // eslint-disable-next-line import/no-cycle\n\nimport { fetchSessionInfoService, fetchAuthTokenService, fetchAuthService, fetchBasicAuthService, fetchLogoutService, fetchAuthPostService } from './utils/authService'; // eslint-disable-next-line import/no-mutable-exports\n\nexport let loggedInStatus = false; // eslint-disable-next-line import/no-mutable-exports\n\nexport let samlAuthWindow = null; // eslint-disable-next-line import/no-mutable-exports\n\nexport let samlCompletionPromise = null;\nlet sessionInfo = null;\nlet releaseVersion = '';\nexport const SSO_REDIRECTION_MARKER_GUID = '5e16222e-ef02-43e9-9fbd-24226bf3ce5b';\nexport const EndPoints = {\n  AUTH_VERIFICATION: '/callosum/v1/session/info',\n  SAML_LOGIN_TEMPLATE: targetUrl => `/callosum/v1/saml/login?targetURLPath=${targetUrl}`,\n  OIDC_LOGIN_TEMPLATE: targetUrl => `/callosum/v1/oidc/login?targetURLPath=${targetUrl}`,\n  TOKEN_LOGIN: '/callosum/v1/session/login/token',\n  BASIC_LOGIN: '/callosum/v1/session/login',\n  LOGOUT: '/callosum/v1/session/logout'\n};\nexport var AuthFailureType;\n\n(function (AuthFailureType) {\n  AuthFailureType[\"SDK\"] = \"SDK\";\n  AuthFailureType[\"NO_COOKIE_ACCESS\"] = \"NO_COOKIE_ACCESS\";\n  AuthFailureType[\"EXPIRY\"] = \"EXPIRY\";\n  AuthFailureType[\"OTHER\"] = \"OTHER\";\n})(AuthFailureType || (AuthFailureType = {}));\n\nexport var AuthStatus;\n\n(function (AuthStatus) {\n  /**\n   * Emits when the SDK fails to authenticate\n   */\n  AuthStatus[\"FAILURE\"] = \"FAILURE\";\n  /**\n   * Emits when the SDK succeeds to authenticate\n   */\n\n  AuthStatus[\"SDK_SUCCESS\"] = \"SDK_SUCCESS\";\n  /**\n   * Emits when the App sends a auth success\n   */\n\n  AuthStatus[\"SUCCESS\"] = \"SUCCESS\";\n  /**\n   * Emits when there is a logout\n   */\n\n  AuthStatus[\"LOGOUT\"] = \"LOGOUT\";\n})(AuthStatus || (AuthStatus = {}));\n/**\n * Check if we are logged into the ThoughtSpot cluster\n * @param thoughtSpotHost The ThoughtSpot cluster hostname or IP\n */\n\n\nasync function isLoggedIn(thoughtSpotHost) {\n  const authVerificationUrl = `${thoughtSpotHost}${EndPoints.AUTH_VERIFICATION}`;\n  let response = null;\n\n  try {\n    response = await fetchSessionInfoService(authVerificationUrl);\n    const sessionInfoResp = await response.json();\n    releaseVersion = sessionInfoResp.releaseVersion;\n  } catch (e) {\n    return false;\n  }\n\n  return response.status === 200;\n}\n/**\n * Return releaseVersion if available\n */\n\n\nexport function getReleaseVersion() {\n  return releaseVersion;\n}\n/**\n * Return sessionInfo if available else make a loggedIn check to fetch the sessionInfo\n */\n\nexport function getSessionInfo() {\n  return sessionInfo;\n}\nexport function initSession(sessionDetails) {\n  sessionInfo = sessionDetails;\n  initMixpanel(sessionInfo);\n}\nconst DUPLICATE_TOKEN_ERR = 'Duplicate token, please issue a new token every time getAuthToken callback is called.' + 'See https://developers.thoughtspot.com/docs/?pageid=embed-auth#trusted-auth-embed for more details.';\nlet prevAuthToken = null;\n\nfunction alertForDuplicateToken(authtoken) {\n  if (prevAuthToken === authtoken) {\n    // eslint-disable-next-line no-alert\n    alert(DUPLICATE_TOKEN_ERR);\n    throw new Error(DUPLICATE_TOKEN_ERR);\n  }\n\n  prevAuthToken = authtoken;\n}\n/**\n * Check if we are stuck at the SSO redirect URL\n */\n\n\nfunction isAtSSORedirectUrl() {\n  return window.location.href.indexOf(SSO_REDIRECTION_MARKER_GUID) >= 0;\n}\n/**\n * Remove the SSO redirect URL marker\n */\n\n\nfunction removeSSORedirectUrlMarker() {\n  // Note (sunny): This will leave a # around even if it was not in the URL\n  // to begin with. Trying to remove the hash by changing window.location will reload\n  // the page which we don't want. We'll live with adding an unnecessary hash to the\n  // parent page URL until we find any use case where that creates an issue.\n  window.location.hash = window.location.hash.replace(SSO_REDIRECTION_MARKER_GUID, '');\n}\n/**\n * Perform token based authentication\n * @param embedConfig The embed configuration\n */\n\n\nexport const doTokenAuth = async embedConfig => {\n  const {\n    thoughtSpotHost,\n    username,\n    authEndpoint,\n    getAuthToken\n  } = embedConfig;\n\n  if (!authEndpoint && !getAuthToken) {\n    throw new Error('Either auth endpoint or getAuthToken function must be provided');\n  }\n\n  loggedInStatus = await isLoggedIn(thoughtSpotHost);\n\n  if (!loggedInStatus) {\n    let authToken = null;\n\n    if (getAuthToken) {\n      authToken = await getAuthToken();\n      alertForDuplicateToken(authToken);\n    } else {\n      const response = await fetchAuthTokenService(authEndpoint);\n      authToken = await response.text();\n    }\n\n    let resp;\n\n    try {\n      resp = await fetchAuthPostService(thoughtSpotHost, username, authToken);\n    } catch (e) {\n      resp = await fetchAuthService(thoughtSpotHost, username, authToken);\n    } // token login issues a 302 when successful\n\n\n    loggedInStatus = resp.ok || resp.type === 'opaqueredirect';\n\n    if (loggedInStatus && embedConfig.detectCookieAccessSlow) {\n      // When 3rd party cookie access is blocked, this will fail because cookies will\n      // not be sent with the call.\n      loggedInStatus = await isLoggedIn(thoughtSpotHost);\n    }\n  }\n\n  return loggedInStatus;\n};\n/**\n * Perform basic authentication to the ThoughtSpot cluster using the cluster\n * credentials.\n *\n * Warning: This feature is primarily intended for developer testing. It is\n * strongly advised not to use this authentication method in production.\n * @param embedConfig The embed configuration\n */\n\nexport const doBasicAuth = async embedConfig => {\n  const {\n    thoughtSpotHost,\n    username,\n    password\n  } = embedConfig;\n  const loggedIn = await isLoggedIn(thoughtSpotHost);\n\n  if (!loggedIn) {\n    const response = await fetchBasicAuthService(thoughtSpotHost, username, password);\n    loggedInStatus = response.ok;\n\n    if (embedConfig.detectCookieAccessSlow) {\n      loggedInStatus = await isLoggedIn(thoughtSpotHost);\n    }\n  } else {\n    loggedInStatus = true;\n  }\n\n  return loggedInStatus;\n};\n\nasync function samlPopupFlow(ssoURL) {\n  document.body.insertAdjacentHTML('beforeend', '<div id=\"ts-saml-auth\"></div>');\n  const authElem = document.getElementById('ts-saml-auth');\n  samlCompletionPromise = samlCompletionPromise || new Promise((resolve, reject) => {\n    window.addEventListener('message', e => {\n      if (e.data.type === EmbedEvent.SAMLComplete) {\n        e.source.close();\n        resolve();\n      }\n    });\n  });\n  authElem.addEventListener('click', () => {\n    if (samlAuthWindow === null || samlAuthWindow.closed) {\n      samlAuthWindow = window.open(ssoURL, '_blank', 'location=no,height=570,width=520,scrollbars=yes,status=yes');\n    } else {\n      samlAuthWindow.focus();\n    }\n  }, {\n    once: true\n  });\n  authElem.click();\n  return samlCompletionPromise;\n}\n/**\n * Perform SAML authentication\n * @param embedConfig The embed configuration\n */\n\n\nconst doSSOAuth = async (embedConfig, ssoEndPoint) => {\n  const {\n    thoughtSpotHost\n  } = embedConfig;\n  const loggedIn = await isLoggedIn(thoughtSpotHost);\n\n  if (loggedIn) {\n    if (isAtSSORedirectUrl()) {\n      removeSSORedirectUrlMarker();\n    }\n\n    loggedInStatus = true;\n    return;\n  } // we have already tried authentication and it did not succeed, restore\n  // the current URL to the original one and invoke the callback.\n\n\n  if (isAtSSORedirectUrl()) {\n    removeSSORedirectUrlMarker();\n    loggedInStatus = false;\n    return;\n  }\n\n  const ssoURL = `${thoughtSpotHost}${ssoEndPoint}`;\n\n  if (embedConfig.noRedirect) {\n    await samlPopupFlow(ssoURL);\n    loggedInStatus = true;\n    return;\n  }\n\n  window.location.href = ssoURL;\n};\n\nexport const doSamlAuth = async embedConfig => {\n  const {\n    thoughtSpotHost\n  } = embedConfig; // redirect for SSO, when the SSO authentication is done, this page will be loaded\n  // again and the same JS will execute again.\n\n  const ssoRedirectUrl = embedConfig.noRedirect ? `${thoughtSpotHost}/v2/#/embed/saml-complete` : getRedirectUrl(window.location.href, SSO_REDIRECTION_MARKER_GUID, embedConfig.redirectPath); // bring back the page to the same URL\n\n  const ssoEndPoint = `${EndPoints.SAML_LOGIN_TEMPLATE(encodeURIComponent(ssoRedirectUrl))}`;\n  await doSSOAuth(embedConfig, ssoEndPoint);\n  return loggedInStatus;\n};\nexport const doOIDCAuth = async embedConfig => {\n  const {\n    thoughtSpotHost\n  } = embedConfig; // redirect for SSO, when the SSO authentication is done, this page will be loaded\n  // again and the same JS will execute again.\n\n  const ssoRedirectUrl = embedConfig.noRedirect ? `${thoughtSpotHost}/v2/#/embed/saml-complete` : getRedirectUrl(window.location.href, SSO_REDIRECTION_MARKER_GUID, embedConfig.redirectPath); // bring back the page to the same URL\n\n  const ssoEndPoint = `${EndPoints.OIDC_LOGIN_TEMPLATE(encodeURIComponent(ssoRedirectUrl))}`;\n  await doSSOAuth(embedConfig, ssoEndPoint);\n  return loggedInStatus;\n};\nexport const logout = async embedConfig => {\n  const {\n    thoughtSpotHost\n  } = embedConfig;\n  const response = await fetchLogoutService(thoughtSpotHost);\n  loggedInStatus = false;\n  return loggedInStatus;\n};\n/**\n * Perform authentication on the ThoughtSpot cluster\n * @param embedConfig The embed configuration\n */\n\nexport const authenticate = async embedConfig => {\n  const {\n    authType\n  } = embedConfig;\n\n  switch (authType) {\n    case AuthType.SSO:\n    case AuthType.SAML:\n      return doSamlAuth(embedConfig);\n\n    case AuthType.OIDC:\n      return doOIDCAuth(embedConfig);\n\n    case AuthType.AuthServer:\n      return doTokenAuth(embedConfig);\n\n    case AuthType.Basic:\n      return doBasicAuth(embedConfig);\n\n    default:\n      return Promise.resolve(true);\n  }\n};\n/**\n * Check if we are authenticated to the ThoughtSpot cluster\n */\n\nexport const isAuthenticated = () => loggedInStatus;","map":{"version":3,"mappings":"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","names":["initMixpanel","AuthType","EmbedEvent","getRedirectUrl","fetchSessionInfoService","fetchAuthTokenService","fetchAuthService","fetchBasicAuthService","fetchLogoutService","fetchAuthPostService","loggedInStatus","samlAuthWindow","samlCompletionPromise","sessionInfo","releaseVersion","SSO_REDIRECTION_MARKER_GUID","EndPoints","AUTH_VERIFICATION","SAML_LOGIN_TEMPLATE","targetUrl","OIDC_LOGIN_TEMPLATE","TOKEN_LOGIN","BASIC_LOGIN","LOGOUT","AuthFailureType","AuthStatus","isLoggedIn","thoughtSpotHost","authVerificationUrl","response","sessionInfoResp","json","e","status","getReleaseVersion","getSessionInfo","initSession","sessionDetails","DUPLICATE_TOKEN_ERR","prevAuthToken","alertForDuplicateToken","authtoken","alert","Error","isAtSSORedirectUrl","window","location","href","indexOf","removeSSORedirectUrlMarker","hash","replace","doTokenAuth","embedConfig","username","authEndpoint","getAuthToken","authToken","text","resp","ok","type","detectCookieAccessSlow","doBasicAuth","password","loggedIn","samlPopupFlow","ssoURL","document","body","insertAdjacentHTML","authElem","getElementById","Promise","resolve","reject","addEventListener","data","SAMLComplete","source","close","closed","open","focus","once","click","doSSOAuth","ssoEndPoint","noRedirect","doSamlAuth","ssoRedirectUrl","redirectPath","encodeURIComponent","doOIDCAuth","logout","authenticate","authType","SSO","SAML","OIDC","AuthServer","Basic","isAuthenticated"],"sourceRoot":"","sources":["../../src/auth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}