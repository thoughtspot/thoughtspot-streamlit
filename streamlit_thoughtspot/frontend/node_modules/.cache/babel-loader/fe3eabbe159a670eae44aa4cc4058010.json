{"ast":null,"code":"import _asyncToGenerator from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\n/** @ignore */\n\nexport var AsyncByteQueue = /*#__PURE__*/function (_AsyncQueue) {\n  _inherits(AsyncByteQueue, _AsyncQueue);\n\n  var _super = _createSuper(AsyncByteQueue);\n\n  function AsyncByteQueue() {\n    _classCallCheck(this, AsyncByteQueue);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AsyncByteQueue, [{\n    key: \"write\",\n    value: function write(value) {\n      if ((value = toUint8Array(value)).byteLength > 0) {\n        return _get(_getPrototypeOf(AsyncByteQueue.prototype), \"write\", this).call(this, value);\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return sync ? decodeUtf8(this.toUint8Array(true)) : this.toUint8Array(false).then(decodeUtf8);\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      var _this = this;\n\n      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return sync ? joinUint8Arrays(this._values)[0] : _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var buffers, byteLength, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffers = [], byteLength = 0;\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context.prev = 3;\n                _iterator = _asyncIterator(_this);\n\n              case 5:\n                _context.next = 7;\n                return _iterator.next();\n\n              case 7:\n                if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                chunk = _step.value;\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n\n              case 11:\n                _iteratorAbruptCompletion = false;\n                _context.next = 5;\n                break;\n\n              case 14:\n                _context.next = 20;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](3);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 20:\n                _context.prev = 20;\n                _context.prev = 21;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                _context.next = 25;\n                return _iterator.return();\n\n              case 25:\n                _context.prev = 25;\n\n                if (!_didIteratorError) {\n                  _context.next = 28;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 28:\n                return _context.finish(25);\n\n              case 29:\n                return _context.finish(20);\n\n              case 30:\n                return _context.abrupt(\"return\", joinUint8Arrays(buffers, byteLength)[0]);\n\n              case 31:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 16, 20, 30], [21,, 25, 29]]);\n      }))();\n    }\n  }]);\n\n  return AsyncByteQueue;\n}(AsyncQueue);\n/** @ignore */\n\nexport var ByteStream = /*#__PURE__*/function (_Symbol$iterator) {\n  function ByteStream(source) {\n    _classCallCheck(this, ByteStream);\n\n    if (source) {\n      this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n    }\n  }\n\n  _createClass(ByteStream, [{\n    key: _Symbol$iterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next(value) {\n      return this.source.next(value);\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return this.source.throw(value);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return this.source.return(value);\n    }\n  }, {\n    key: \"peek\",\n    value: function peek(size) {\n      return this.source.peek(size);\n    }\n  }, {\n    key: \"read\",\n    value: function read(size) {\n      return this.source.read(size);\n    }\n  }]);\n\n  return ByteStream;\n}(Symbol.iterator);\n/** @ignore */\n\nexport var AsyncByteStream = /*#__PURE__*/function (_Symbol$asyncIterator) {\n  function AsyncByteStream(source) {\n    _classCallCheck(this, AsyncByteStream);\n\n    if (source instanceof AsyncByteStream) {\n      this.source = source.source;\n    } else if (source instanceof AsyncByteQueue) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isReadableNodeStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n    } else if (isReadableDOMStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n    } else if (isFetchResponse(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body));\n    } else if (isIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n    } else if (isPromise(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isAsyncIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    }\n  }\n\n  _createClass(AsyncByteStream, [{\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next(value) {\n      return this.source.next(value);\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return this.source.throw(value);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return this.source.return(value);\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this.source.closed;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      return this.source.cancel(reason);\n    }\n  }, {\n    key: \"peek\",\n    value: function peek(size) {\n      return this.source.peek(size);\n    }\n  }, {\n    key: \"read\",\n    value: function read(size) {\n      return this.source.read(size);\n    }\n  }]);\n\n  return AsyncByteStream;\n}(Symbol.asyncIterator);\n/** @ignore */\n\nvar ByteStreamSource = /*#__PURE__*/function () {\n  function ByteStreamSource(source) {\n    _classCallCheck(this, ByteStreamSource);\n\n    this.source = source;\n  }\n\n  _createClass(ByteStreamSource, [{\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this.return(reason);\n    }\n  }, {\n    key: \"peek\",\n    value: function peek(size) {\n      return this.next(size, 'peek').value;\n    }\n  }, {\n    key: \"read\",\n    value: function read(size) {\n      return this.next(size, 'read').value;\n    }\n  }, {\n    key: \"next\",\n    value: function next(size) {\n      var cmd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'read';\n      return this.source.next({\n        cmd: cmd,\n        size: size\n      });\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return Object.create(this.source.throw && this.source.throw(value) || ITERATOR_DONE);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return Object.create(this.source.return && this.source.return(value) || ITERATOR_DONE);\n    }\n  }]);\n\n  return ByteStreamSource;\n}();\n/** @ignore */\n\n\nvar AsyncByteStreamSource = /*#__PURE__*/function () {\n  function AsyncByteStreamSource(source) {\n    var _this2 = this;\n\n    _classCallCheck(this, AsyncByteStreamSource);\n\n    this.source = source;\n    this._closedPromise = new Promise(function (r) {\n      return _this2._closedPromiseResolve = r;\n    });\n  }\n\n  _createClass(AsyncByteStreamSource, [{\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(reason) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.return(reason);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function cancel(_x) {\n        return _cancel.apply(this, arguments);\n      }\n\n      return cancel;\n    }()\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this._closedPromise;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(size) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.next(size, 'read');\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function read(_x2) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"peek\",\n    value: function () {\n      var _peek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(size) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.next(size, 'peek');\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function peek(_x3) {\n        return _peek.apply(this, arguments);\n      }\n\n      return peek;\n    }()\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(size) {\n        var cmd,\n            _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                cmd = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : 'read';\n                _context5.next = 3;\n                return this.source.next({\n                  cmd: cmd,\n                  size: size\n                });\n\n              case 3:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function next(_x4) {\n        return _next.apply(this, arguments);\n      }\n\n      return next;\n    }()\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(value) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.t1 = this.source.throw;\n\n                if (!_context6.t1) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                _context6.next = 4;\n                return this.source.throw(value);\n\n              case 4:\n                _context6.t1 = _context6.sent;\n\n              case 5:\n                _context6.t0 = _context6.t1;\n\n                if (_context6.t0) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                _context6.t0 = ITERATOR_DONE;\n\n              case 8:\n                result = _context6.t0;\n                this._closedPromiseResolve && this._closedPromiseResolve();\n                this._closedPromiseResolve = undefined;\n                return _context6.abrupt(\"return\", Object.create(result));\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _throw(_x5) {\n        return _throw2.apply(this, arguments);\n      }\n\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(value) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.t1 = this.source.return;\n\n                if (!_context7.t1) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                _context7.next = 4;\n                return this.source.return(value);\n\n              case 4:\n                _context7.t1 = _context7.sent;\n\n              case 5:\n                _context7.t0 = _context7.t1;\n\n                if (_context7.t0) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                _context7.t0 = ITERATOR_DONE;\n\n              case 8:\n                result = _context7.t0;\n                this._closedPromiseResolve && this._closedPromiseResolve();\n                this._closedPromiseResolve = undefined;\n                return _context7.abrupt(\"return\", Object.create(result));\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _return(_x6) {\n        return _return2.apply(this, arguments);\n      }\n\n      return _return;\n    }()\n  }]);\n\n  return AsyncByteStreamSource;\n}();","map":{"version":3,"mappings":"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","names":["streamAdapters","decodeUtf8","ITERATOR_DONE","AsyncQueue","toUint8Array","joinUint8Arrays","isPromise","isFetchResponse","isIterable","isAsyncIterable","isReadableDOMStream","isReadableNodeStream","AsyncByteQueue","value","byteLength","sync","then","_values","buffers","chunk","push","ByteStream","source","ByteStreamSource","fromIterable","next","throw","return","size","peek","read","Symbol","iterator","AsyncByteStream","AsyncByteStreamSource","fromAsyncIterable","fromNodeStream","fromDOMStream","body","closed","reason","cancel","asyncIterator","cmd","Object","create","_closedPromise","Promise","r","_closedPromiseResolve","result","undefined"],"sources":["io/stream.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}