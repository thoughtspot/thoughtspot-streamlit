{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { SearchEmbed, EmbedEvent } from '@thoughtspot/visual-embed-sdk';\nimport React, { useEffect } from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      const name = this.props.args[\"name\"];\n\n      function isloaded() {\n        console.log(\"loaded!!\");\n      }\n\n      useEffect(() => {\n        console.log(\"here\");\n      });\n      setTimeout(function () {\n        var element = document.getElementById('ts-embedgit');\n        const searchEmbed = new SearchEmbed(element, {\n          frameParams: {\n            width: '600px',\n            height: '600px'\n          }\n        });\n        element.innerHTML = \"err\";\n        searchEmbed.on(EmbedEvent.Init, isloaded);\n      }, 1000);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: '600px',\n          width: '600px'\n        },\n        id: \"ts-embed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","SearchEmbed","EmbedEvent","React","useEffect","MyComponent","state","numClicks","isFocused","render","name","props","args","isloaded","console","log","setTimeout","element","document","getElementById","searchEmbed","frameParams","width","height","innerHTML","on","Init"],"sources":["/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent\n}\nfrom '@thoughtspot/visual-embed-sdk';\n\nimport React, { ReactNode, useEffect } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    function isloaded(){\n      console.log(\"loaded!!\")\n    }\n    useEffect(() => {\n      console.log(\"here\")\n\n    })\n    \n    setTimeout(function(){\n      var element : any =  document.getElementById('ts-embedgit');\n      const searchEmbed = new SearchEmbed(element, {\n        frameParams: {\n            width: '600px',\n            height: '600px',\n        },\n      });\n      element.innerHTML=\"err\";\n      searchEmbed.on(EmbedEvent.Init, isloaded)\n    },1000)\n\n    return (\n      <div style={{height:'600px',width:'600px'}} id=\"ts-embed\" >\n        </div>\n    )\n  }\n\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":";AAAA,SAEEA,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,SACEC,WADF,EAKEC,UALF,QAQK,+BARL;AAUA,OAAOC,KAAP,IAA2BC,SAA3B,QAA4C,OAA5C;;AAOA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BN,sBAA1B,CAAwD;EAAA;IAAA;IAAA,KAC/CO,KAD+C,GACvC;MAAEC,SAAS,EAAE,CAAb;MAAgBC,SAAS,EAAE;IAA3B,CADuC;;IAAA,KAG/CC,MAH+C,GAGtC,MAAiB;MAE/B,MAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;;MACA,SAASC,QAAT,GAAmB;QACjBC,OAAO,CAACC,GAAR,CAAY,UAAZ;MACD;;MACDX,SAAS,CAAC,MAAM;QACdU,OAAO,CAACC,GAAR,CAAY,MAAZ;MAED,CAHQ,CAAT;MAKAC,UAAU,CAAC,YAAU;QACnB,IAAIC,OAAa,GAAIC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAArB;QACA,MAAMC,WAAW,GAAG,IAAInB,WAAJ,CAAgBgB,OAAhB,EAAyB;UAC3CI,WAAW,EAAE;YACTC,KAAK,EAAE,OADE;YAETC,MAAM,EAAE;UAFC;QAD8B,CAAzB,CAApB;QAMAN,OAAO,CAACO,SAAR,GAAkB,KAAlB;QACAJ,WAAW,CAACK,EAAZ,CAAevB,UAAU,CAACwB,IAA1B,EAAgCb,QAAhC;MACD,CAVS,EAUR,IAVQ,CAAV;MAYA,oBACE;QAAK,KAAK,EAAE;UAACU,MAAM,EAAC,OAAR;UAAgBD,KAAK,EAAC;QAAtB,CAAZ;QAA4C,EAAE,EAAC,UAA/C;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;IAID,CA9BqD;EAAA;;AAAA,C,CAmCxD;AACA;AACA;AACA;AACA;;;AACA,eAAetB,uBAAuB,CAACK,WAAD,CAAtC"},"metadata":{},"sourceType":"module"}