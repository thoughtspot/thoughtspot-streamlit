{"ast":null,"code":"// eslint-disable-next-line import/no-cycle\nimport { EndPoints } from '../auth';\n\nfunction failureLoggedFetch(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(url, options).then(async r => {\n    var _a;\n\n    if (!r.ok && r.type !== 'opaqueredirect' && r.type !== 'opaque') {\n      console.error('Failure', await ((_a = r.text) === null || _a === void 0 ? void 0 : _a.call(r)));\n    }\n\n    return r;\n  });\n}\n\nexport function fetchSessionInfoService(authVerificationUrl) {\n  return failureLoggedFetch(authVerificationUrl, {\n    credentials: 'include'\n  });\n}\nexport async function fetchAuthTokenService(authEndpoint) {\n  return fetch(authEndpoint);\n}\nexport async function fetchAuthService(thoughtSpotHost, username, authToken) {\n  return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.TOKEN_LOGIN}?username=${username}&auth_token=${authToken}`, {\n    credentials: 'include',\n    // We do not want to follow the redirect, as it starts giving a CORS error\n    redirect: 'manual'\n  });\n}\nexport async function fetchAuthPostService(thoughtSpotHost, username, authToken) {\n  return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.TOKEN_LOGIN}`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded',\n      'x-requested-by': 'ThoughtSpot'\n    },\n    body: `username=${encodeURIComponent(username)}&auth_token=${encodeURIComponent(authToken)}`,\n    credentials: 'include',\n    // We do not want to follow the redirect, as it starts giving a CORS error\n    redirect: 'manual'\n  });\n}\nexport async function fetchBasicAuthService(thoughtSpotHost, username, password) {\n  return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.BASIC_LOGIN}`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded',\n      'x-requested-by': 'ThoughtSpot'\n    },\n    body: `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`,\n    credentials: 'include'\n  });\n}\nexport async function fetchLogoutService(thoughtSpotHost) {\n  return failureLoggedFetch(`${thoughtSpotHost}${EndPoints.LOGOUT}`, {\n    credentials: 'include',\n    method: 'POST',\n    headers: {\n      'x-requested-by': 'ThoughtSpot'\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,SAAT,QAA0B,SAA1B;;AAEA,SAASC,kBAAT,CACIC,GADJ,EAE6B;EAAA,IAAzBC,OAAyB,uEAAF,EAAE;EAEzB,OAAOC,KAAK,CAACF,GAAD,EAAMC,OAAN,CAAL,CAAoBE,IAApB,CAAyB,MAAOC,CAAP,IAAY;;;IACxC,IAAI,CAACA,CAAC,CAACC,EAAH,IAASD,CAAC,CAACE,IAAF,KAAW,gBAApB,IAAwCF,CAAC,CAACE,IAAF,KAAW,QAAvD,EAAiE;MAC7DC,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyB,OAAM,OAAC,CAACC,IAAF,MAAM,IAAN,IAAMC,aAAN,GAAM,MAAN,GAAMA,QAANN,CAAM,CAAZ,CAAzB;IACH;;IACD,OAAOA,CAAP;EACH,CALM,CAAP;AAMH;;AAED,OAAM,SAAUO,uBAAV,CACFC,mBADE,EACyB;EAE3B,OAAOb,kBAAkB,CAACa,mBAAD,EAAsB;IAC3CC,WAAW,EAAE;EAD8B,CAAtB,CAAzB;AAGH;AAED,OAAO,eAAeC,qBAAf,CACHC,YADG,EACiB;EAEpB,OAAOb,KAAK,CAACa,YAAD,CAAZ;AACH;AAED,OAAO,eAAeC,gBAAf,CACHC,eADG,EAEHC,QAFG,EAGHC,SAHG,EAGc;EAEjB,OAAOpB,kBAAkB,CACrB,GAAGkB,eAAe,GAAGnB,SAAS,CAACsB,WAAW,aAAaF,QAAQ,eAAeC,SAAS,EADlE,EAErB;IACIN,WAAW,EAAE,SADjB;IAEI;IACAQ,QAAQ,EAAE;EAHd,CAFqB,CAAzB;AAQH;AAED,OAAO,eAAeC,oBAAf,CACHL,eADG,EAEHC,QAFG,EAGHC,SAHG,EAGc;EAEjB,OAAOpB,kBAAkB,CAAC,GAAGkB,eAAe,GAAGnB,SAAS,CAACsB,WAAW,EAA3C,EAA+C;IACpEG,MAAM,EAAE,MAD4D;IAEpEC,OAAO,EAAE;MACL,gBAAgB,mCADX;MAEL,kBAAkB;IAFb,CAF2D;IAMpEC,IAAI,EAAE,YAAYC,kBAAkB,CAChCR,QADgC,CAEnC,eAAeQ,kBAAkB,CAACP,SAAD,CAAW,EARuB;IASpEN,WAAW,EAAE,SATuD;IAUpE;IACAQ,QAAQ,EAAE;EAX0D,CAA/C,CAAzB;AAaH;AAED,OAAO,eAAeM,qBAAf,CACHV,eADG,EAEHC,QAFG,EAGHU,QAHG,EAGa;EAEhB,OAAO7B,kBAAkB,CAAC,GAAGkB,eAAe,GAAGnB,SAAS,CAAC+B,WAAW,EAA3C,EAA+C;IACpEN,MAAM,EAAE,MAD4D;IAEpEC,OAAO,EAAE;MACL,gBAAgB,mCADX;MAEL,kBAAkB;IAFb,CAF2D;IAMpEC,IAAI,EAAE,YAAYC,kBAAkB,CAChCR,QADgC,CAEnC,aAAaQ,kBAAkB,CAACE,QAAD,CAAU,EAR0B;IASpEf,WAAW,EAAE;EATuD,CAA/C,CAAzB;AAWH;AAED,OAAO,eAAeiB,kBAAf,CACHb,eADG,EACoB;EAEvB,OAAOlB,kBAAkB,CAAC,GAAGkB,eAAe,GAAGnB,SAAS,CAACiC,MAAM,EAAtC,EAA0C;IAC/DlB,WAAW,EAAE,SADkD;IAE/DU,MAAM,EAAE,MAFuD;IAG/DC,OAAO,EAAE;MACL,kBAAkB;IADb;EAHsD,CAA1C,CAAzB;AAOH","names":["EndPoints","failureLoggedFetch","url","options","fetch","then","r","ok","type","console","error","text","_a","fetchSessionInfoService","authVerificationUrl","credentials","fetchAuthTokenService","authEndpoint","fetchAuthService","thoughtSpotHost","username","authToken","TOKEN_LOGIN","redirect","fetchAuthPostService","method","headers","body","encodeURIComponent","fetchBasicAuthService","password","BASIC_LOGIN","fetchLogoutService","LOGOUT"],"sourceRoot":"","sources":["../../../src/utils/authService.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}