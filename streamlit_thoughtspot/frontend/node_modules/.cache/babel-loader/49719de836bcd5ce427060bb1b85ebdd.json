{"ast":null,"code":"import * as mixpanel from 'mixpanel-browser';\nexport const EndPoints = {\n  CONFIG: '/callosum/v1/system/config'\n};\nexport const MIXPANEL_EVENT = {\n  VISUAL_SDK_RENDER_START: 'visual-sdk-render-start',\n  VISUAL_SDK_CALLED_INIT: 'visual-sdk-called-init',\n  VISUAL_SDK_RENDER_COMPLETE: 'visual-sdk-render-complete',\n  VISUAL_SDK_RENDER_FAILED: 'visual-sdk-render-failed',\n  VISUAL_SDK_TRIGGER: 'visual-sdk-trigger',\n  VISUAL_SDK_IFRAME_LOAD_PERFORMANCE: 'visual-sdk-iframe-load-performance'\n};\nlet isEventCollectorOn = false;\nconst eventCollectorQueue = [];\n\nfunction setEventCollectorOn() {\n  isEventCollectorOn = true;\n}\n\nfunction getEventCollectorOnValue() {\n  return isEventCollectorOn;\n}\n/**\n * Pushes the event with its Property key-value map to mixpanel.\n * @param eventId\n * @param eventProps\n */\n\n\nexport async function uploadMixpanelEvent(eventId) {\n  let eventProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!getEventCollectorOnValue()) {\n    eventCollectorQueue.push({\n      eventId,\n      eventProps\n    });\n    return Promise.resolve();\n  }\n\n  return new Promise(() => mixpanel.track(eventId, eventProps));\n}\n\nfunction emptyQueue() {\n  eventCollectorQueue.forEach(event => {\n    uploadMixpanelEvent(event.eventId, event.eventProps);\n  });\n}\n\nexport function initMixpanel(sessionInfo) {\n  if (!sessionInfo || !sessionInfo.mixpanelToken) {\n    return;\n  } // On a public cluster the user is anonymous, so don't set the identify to userGUID\n\n\n  const isPublicCluster = !!sessionInfo.isPublicUser;\n  const token = sessionInfo.mixpanelToken;\n\n  if (token) {\n    mixpanel.init(token);\n\n    if (!isPublicCluster) {\n      mixpanel.identify(sessionInfo.userGUID);\n    }\n\n    setEventCollectorOn();\n    emptyQueue();\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,kBAA1B;AAEA,OAAO,MAAMC,SAAS,GAAG;EACrBC,MAAM,EAAE;AADa,CAAlB;AAIP,OAAO,MAAMC,cAAc,GAAG;EAC1BC,uBAAuB,EAAE,yBADC;EAE1BC,sBAAsB,EAAE,wBAFE;EAG1BC,0BAA0B,EAAE,4BAHF;EAI1BC,wBAAwB,EAAE,0BAJA;EAK1BC,kBAAkB,EAAE,oBALM;EAM1BC,kCAAkC,EAAE;AANV,CAAvB;AASP,IAAIC,kBAAkB,GAAG,KAAzB;AACA,MAAMC,mBAAmB,GAA2C,EAApE;;AAEA,SAASC,mBAAT,GAA4B;EACxBF,kBAAkB,GAAG,IAArB;AACH;;AAED,SAASG,wBAAT,GAAiC;EAC7B,OAAOH,kBAAP;AACH;AAED;;;;;;;AAKA,OAAO,eAAeI,mBAAf,CACHC,OADG,EAEY;EAAA,IAAfC,UAAe,uEAAF,EAAE;;EAEf,IAAI,CAACH,wBAAwB,EAA7B,EAAiC;IAC7BF,mBAAmB,CAACM,IAApB,CAAyB;MAAEF,OAAF;MAAWC;IAAX,CAAzB;IACA,OAAOE,OAAO,CAACC,OAAR,EAAP;EACH;;EACD,OAAO,IAAID,OAAJ,CAAY,MAAMlB,QAAQ,CAACoB,KAAT,CAAeL,OAAf,EAAwBC,UAAxB,CAAlB,CAAP;AACH;;AAED,SAASK,UAAT,GAAmB;EACfV,mBAAmB,CAACW,OAApB,CAA6BC,KAAD,IAAU;IAClCT,mBAAmB,CAACS,KAAK,CAACR,OAAP,EAAgBQ,KAAK,CAACP,UAAtB,CAAnB;EACH,CAFD;AAGH;;AAED,OAAM,SAAUQ,YAAV,CAAuBC,WAAvB,EAAuC;EACzC,IAAI,CAACA,WAAD,IAAgB,CAACA,WAAW,CAACC,aAAjC,EAAgD;IAC5C;EACH,CAHwC,CAIzC;;;EACA,MAAMC,eAAe,GAAG,CAAC,CAACF,WAAW,CAACG,YAAtC;EACA,MAAMC,KAAK,GAAGJ,WAAW,CAACC,aAA1B;;EACA,IAAIG,KAAJ,EAAW;IACP7B,QAAQ,CAAC8B,IAAT,CAAcD,KAAd;;IACA,IAAI,CAACF,eAAL,EAAsB;MAClB3B,QAAQ,CAAC+B,QAAT,CAAkBN,WAAW,CAACO,QAA9B;IACH;;IACDpB,mBAAmB;IACnBS,UAAU;EACb;AACJ","names":["mixpanel","EndPoints","CONFIG","MIXPANEL_EVENT","VISUAL_SDK_RENDER_START","VISUAL_SDK_CALLED_INIT","VISUAL_SDK_RENDER_COMPLETE","VISUAL_SDK_RENDER_FAILED","VISUAL_SDK_TRIGGER","VISUAL_SDK_IFRAME_LOAD_PERFORMANCE","isEventCollectorOn","eventCollectorQueue","setEventCollectorOn","getEventCollectorOnValue","uploadMixpanelEvent","eventId","eventProps","push","Promise","resolve","track","emptyQueue","forEach","event","initMixpanel","sessionInfo","mixpanelToken","isPublicCluster","isPublicUser","token","init","identify","userGUID"],"sourceRoot":"","sources":["../../src/mixpanel-service.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}