{"ast":null,"code":"import _classCallCheck from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS7624605610262437867 from './Schema';\nexport var org;\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        flatbuf.Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var MessageHeader;\n\n        (function (MessageHeader) {\n          MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n          MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n          MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n          MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n          MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n          MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n        })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var FieldNode = /*#__PURE__*/function () {\n          function FieldNode() {\n            _classCallCheck(this, FieldNode);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FieldNode\n           */\n\n\n          _createClass(FieldNode, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * The number of value slots in the Arrow array at this level of a nested\n             * tree\n             *\n             * @returns flatbuffers.Long\n             */\n\n          }, {\n            key: \"length\",\n            value: function length() {\n              return this.bb.readInt64(this.bb_pos);\n            }\n            /**\n             * The number of observed nulls. Fields with null_count == 0 may choose not\n             * to write their physical validity bitmap out as a materialized buffer,\n             * instead setting the length of the bitmap buffer to 0.\n             *\n             * @returns flatbuffers.Long\n             */\n\n          }, {\n            key: \"nullCount\",\n            value: function nullCount() {\n              return this.bb.readInt64(this.bb_pos + 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long length\n             * @param flatbuffers.Long null_count\n             * @returns flatbuffers.Offset\n             */\n\n          }], [{\n            key: \"createFieldNode\",\n            value: function createFieldNode(builder, length, null_count) {\n              builder.prep(8, 16);\n              builder.writeInt64(null_count);\n              builder.writeInt64(length);\n              return builder.offset();\n            }\n          }]);\n\n          return FieldNode;\n        }();\n\n        flatbuf.FieldNode = FieldNode;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var RecordBatch = /*#__PURE__*/function () {\n          function RecordBatch() {\n            _classCallCheck(this, RecordBatch);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns RecordBatch\n           */\n\n\n          _createClass(RecordBatch, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param RecordBatch= obj\n             * @returns RecordBatch\n             */\n\n          }, {\n            key: \"length\",\n            value:\n            /**\n             * number of records / rows. The arrays in the batch should all have this\n             * length\n             *\n             * @returns flatbuffers.Long\n             */\n            function length() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * Nodes correspond to the pre-ordered flattened logical schema\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.FieldNode= obj\n             * @returns org.apache.arrow.flatbuf.FieldNode\n             */\n\n          }, {\n            key: \"nodes\",\n            value: function nodes(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"nodesLength\",\n            value: function nodesLength() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * Buffers correspond to the pre-ordered flattened buffer tree\n             *\n             * The number of buffers appended to this list depends on the schema. For\n             * example, most primitive arrays will have 2 buffers, 1 for the validity\n             * bitmap and 1 for the values. For struct arrays, there will only be a\n             * single buffer for the validity (nulls) bitmap\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.Buffer= obj\n             * @returns org.apache.arrow.flatbuf.Buffer\n             */\n\n          }, {\n            key: \"buffers\",\n            value: function buffers(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"buffersLength\",\n            value: function buffersLength() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsRecordBatch\",\n            value: function getRootAsRecordBatch(bb, obj) {\n              return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startRecordBatch\",\n            value: function startRecordBatch(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long length\n             */\n\n          }, {\n            key: \"addLength\",\n            value: function addLength(builder, length) {\n              builder.addFieldInt64(0, length, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset nodesOffset\n             */\n\n          }, {\n            key: \"addNodes\",\n            value: function addNodes(builder, nodesOffset) {\n              builder.addFieldOffset(1, nodesOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startNodesVector\",\n            value: function startNodesVector(builder, numElems) {\n              builder.startVector(16, numElems, 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset buffersOffset\n             */\n\n          }, {\n            key: \"addBuffers\",\n            value: function addBuffers(builder, buffersOffset) {\n              builder.addFieldOffset(2, buffersOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startBuffersVector\",\n            value: function startBuffersVector(builder, numElems) {\n              builder.startVector(16, numElems, 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endRecordBatch\",\n            value: function endRecordBatch(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createRecordBatch\",\n            value: function createRecordBatch(builder, length, nodesOffset, buffersOffset) {\n              RecordBatch.startRecordBatch(builder);\n              RecordBatch.addLength(builder, length);\n              RecordBatch.addNodes(builder, nodesOffset);\n              RecordBatch.addBuffers(builder, buffersOffset);\n              return RecordBatch.endRecordBatch(builder);\n            }\n          }]);\n\n          return RecordBatch;\n        }();\n\n        flatbuf.RecordBatch = RecordBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var DictionaryBatch = /*#__PURE__*/function () {\n          function DictionaryBatch() {\n            _classCallCheck(this, DictionaryBatch);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryBatch\n           */\n\n\n          _createClass(DictionaryBatch, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param DictionaryBatch= obj\n             * @returns DictionaryBatch\n             */\n\n          }, {\n            key: \"id\",\n            value:\n            /**\n             * @returns flatbuffers.Long\n             */\n            function id() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * @param org.apache.arrow.flatbuf.RecordBatch= obj\n             * @returns org.apache.arrow.flatbuf.RecordBatch|null\n             */\n\n          }, {\n            key: \"data\",\n            value: function data(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n            }\n            /**\n             * If isDelta is true the values in the dictionary are to be appended to a\n             * dictionary with the indicated id\n             *\n             * @returns boolean\n             */\n\n          }, {\n            key: \"isDelta\",\n            value: function isDelta() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDictionaryBatch\",\n            value: function getRootAsDictionaryBatch(bb, obj) {\n              return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDictionaryBatch\",\n            value: function startDictionaryBatch(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long id\n             */\n\n          }, {\n            key: \"addId\",\n            value: function addId(builder, id) {\n              builder.addFieldInt64(0, id, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset dataOffset\n             */\n\n          }, {\n            key: \"addData\",\n            value: function addData(builder, dataOffset) {\n              builder.addFieldOffset(1, dataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean isDelta\n             */\n\n          }, {\n            key: \"addIsDelta\",\n            value: function addIsDelta(builder, isDelta) {\n              builder.addFieldInt8(2, +isDelta, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDictionaryBatch\",\n            value: function endDictionaryBatch(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDictionaryBatch\",\n            value: function createDictionaryBatch(builder, id, dataOffset, isDelta) {\n              DictionaryBatch.startDictionaryBatch(builder);\n              DictionaryBatch.addId(builder, id);\n              DictionaryBatch.addData(builder, dataOffset);\n              DictionaryBatch.addIsDelta(builder, isDelta);\n              return DictionaryBatch.endDictionaryBatch(builder);\n            }\n          }]);\n\n          return DictionaryBatch;\n        }();\n\n        flatbuf.DictionaryBatch = DictionaryBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Message = /*#__PURE__*/function () {\n          function Message() {\n            _classCallCheck(this, Message);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Message\n           */\n\n\n          _createClass(Message, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Message= obj\n             * @returns Message\n             */\n\n          }, {\n            key: \"version\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.MetadataVersion\n             */\n            function version() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n            }\n            /**\n             * @returns org.apache.arrow.flatbuf.MessageHeader\n             */\n\n          }, {\n            key: \"headerType\",\n            value: function headerType() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ?\n              /**  */\n              this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n            }\n            /**\n             * @param flatbuffers.Table obj\n             * @returns ?flatbuffers.Table\n             */\n\n          }, {\n            key: \"header\",\n            value: function header(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n            }\n            /**\n             * @returns flatbuffers.Long\n             */\n\n          }, {\n            key: \"bodyLength\",\n            value: function bodyLength() {\n              var offset = this.bb.__offset(this.bb_pos, 10);\n\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * @param number index\n             * @param org.apache.arrow.flatbuf.KeyValue= obj\n             * @returns org.apache.arrow.flatbuf.KeyValue\n             */\n\n          }, {\n            key: \"customMetadata\",\n            value: function customMetadata(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 12);\n\n              return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"customMetadataLength\",\n            value: function customMetadataLength() {\n              var offset = this.bb.__offset(this.bb_pos, 12);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsMessage\",\n            value: function getRootAsMessage(bb, obj) {\n              return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startMessage\",\n            value: function startMessage(builder) {\n              builder.startObject(5);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.MetadataVersion version\n             */\n\n          }, {\n            key: \"addVersion\",\n            value: function addVersion(builder, version) {\n              builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.MessageHeader headerType\n             */\n\n          }, {\n            key: \"addHeaderType\",\n            value: function addHeaderType(builder, headerType) {\n              builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset headerOffset\n             */\n\n          }, {\n            key: \"addHeader\",\n            value: function addHeader(builder, headerOffset) {\n              builder.addFieldOffset(2, headerOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long bodyLength\n             */\n\n          }, {\n            key: \"addBodyLength\",\n            value: function addBodyLength(builder, bodyLength) {\n              builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset customMetadataOffset\n             */\n\n          }, {\n            key: \"addCustomMetadata\",\n            value: function addCustomMetadata(builder, customMetadataOffset) {\n              builder.addFieldOffset(4, customMetadataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createCustomMetadataVector\",\n            value: function createCustomMetadataVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startCustomMetadataVector\",\n            value: function startCustomMetadataVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endMessage\",\n            value: function endMessage(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset offset\n             */\n\n          }, {\n            key: \"finishMessageBuffer\",\n            value: function finishMessageBuffer(builder, offset) {\n              builder.finish(offset);\n            }\n          }, {\n            key: \"createMessage\",\n            value: function createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n              Message.startMessage(builder);\n              Message.addVersion(builder, version);\n              Message.addHeaderType(builder, headerType);\n              Message.addHeader(builder, headerOffset);\n              Message.addBodyLength(builder, bodyLength);\n              Message.addCustomMetadata(builder, customMetadataOffset);\n              return Message.endMessage(builder);\n            }\n          }]);\n\n          return Message;\n        }();\n\n        flatbuf.Message = Message;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"mappings":"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","names":["NS7624605610262437867","org","flatbuf","apache","arrow","Schema","MessageHeader","FieldNode","i","bb","bb_pos","readInt64","builder","length","null_count","prep","writeInt64","offset","RecordBatch","__offset","createLong","index","obj","__init","__vector","__vector_len","Buffer","readInt32","position","startObject","addFieldInt64","nodesOffset","addFieldOffset","numElems","startVector","buffersOffset","endObject","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","DictionaryBatch","__indirect","readInt8","id","dataOffset","isDelta","addFieldInt8","startDictionaryBatch","addId","addData","addIsDelta","endDictionaryBatch","Message","readInt16","MetadataVersion","V1","readUint8","NONE","__union","KeyValue","version","addFieldInt16","headerType","headerOffset","bodyLength","customMetadataOffset","data","addOffset","endVector","finish","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","addCustomMetadata","endMessage"],"sources":["fb/Message.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}