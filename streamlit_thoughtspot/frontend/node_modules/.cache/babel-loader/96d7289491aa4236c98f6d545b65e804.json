{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { Param, HostEvent } from '../types';\nimport { V1Embed } from './ts-embed';\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\n\nexport var Page;\n\n(function (Page) {\n  /**\n   * Home page\n   */\n  Page[\"Home\"] = \"home\";\n  /**\n   * Search page\n   */\n\n  Page[\"Search\"] = \"search\";\n  /**\n   * Saved answers listing page\n   */\n\n  Page[\"Answers\"] = \"answers\";\n  /**\n   * Liveboards listing page\n   */\n\n  Page[\"Liveboards\"] = \"liveboards\";\n  /**\n   * @hidden\n   */\n\n  Page[\"Pinboards\"] = \"pinboards\";\n  /**\n   * Data management page\n   */\n\n  Page[\"Data\"] = \"data\";\n  /**\n   * SpotIQ listing page\n   */\n\n  Page[\"SpotIQ\"] = \"spotiq\";\n})(Page || (Page = {}));\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\n\n\nexport class AppEmbed extends V1Embed {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n  }\n  /**\n   * Constructs a map of parameters to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n\n\n  getEmbedParams() {\n    const params = this.getBaseQueryParams();\n    const {\n      tag,\n      hideObjects,\n      liveboardV2 = false\n    } = this.viewConfig;\n\n    if (tag) {\n      params[Param.Tag] = tag;\n    }\n\n    if (hideObjects && hideObjects.length) {\n      params[Param.HideObjects] = JSON.stringify(hideObjects);\n    }\n\n    params[Param.LiveboardV2Enabled] = liveboardV2;\n    const queryParams = getQueryParamString(params, true);\n    return queryParams;\n  }\n  /**\n   * Constructs the URL of the ThoughtSpot app page to be rendered.\n   * @param pageId The ID of the page to be embedded.\n   */\n\n\n  getIFrameSrc(pageId, runtimeFilters) {\n    const filterQuery = getFilterQuery(runtimeFilters || []);\n    const queryParams = this.getEmbedParams();\n    const queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n    let url = `${this.getV1EmbedBasePath(queryString, this.viewConfig.showPrimaryNavbar, this.viewConfig.disableProfileAndHelp, true, this.viewConfig.enableSearchAssist)}/${pageId}`;\n    const tsPostHashParams = this.getThoughtSpotPostUrlParams();\n    url = `${url}${tsPostHashParams}`;\n    return url;\n  }\n  /**\n   * Gets the ThoughtSpot route of the page for a particular page ID.\n   * @param pageId The identifier for a page in the ThoughtSpot app.\n   */\n\n\n  getPageRoute(pageId) {\n    switch (pageId) {\n      case Page.Search:\n        return 'answer';\n\n      case Page.Answers:\n        return 'answers';\n\n      case Page.Liveboards:\n        return 'pinboards';\n\n      case Page.Pinboards:\n        return 'pinboards';\n\n      case Page.Data:\n        return 'data/tables';\n\n      case Page.SpotIQ:\n        return 'insights/results';\n\n      case Page.Home:\n      default:\n        return 'home';\n    }\n  }\n  /**\n   * Formats the path provided by the user.\n   * @param path The URL path.\n   * @returns The URL path that the embedded app understands.\n   */\n\n\n  formatPath(path) {\n    if (!path) {\n      return null;\n    } // remove leading slash\n\n\n    if (path.indexOf('/') === 0) {\n      return path.substring(1);\n    }\n\n    return path;\n  }\n  /**\n   * Navigate to particular page for app embed. eg:answers/pinboards/home\n   * This is used for embedding answers, pinboards, visualizations and full application only.\n   * @param path string | number The string, set to iframe src and navigate to new page\n   * eg: appEmbed.navigateToPage('pinboards')\n   * When used with `noReload` this can also be a number like 1/-1 to go forward/back.\n   * @param noReload boolean Trigger the navigation without reloading the page\n   * @version SDK: 1.12.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n   */\n\n\n  navigateToPage(path) {\n    let noReload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!this.iFrame) {\n      console.log('Please call render before invoking this method');\n      return;\n    }\n\n    if (noReload) {\n      this.trigger(HostEvent.Navigate, path);\n    } else {\n      if (typeof path !== 'string') {\n        console.warn('Path can only by a string when triggered without noReload');\n        return;\n      }\n\n      const iframeSrc = this.iFrame.src;\n      const embedPath = '#/embed';\n      const currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n      this.iFrame.src = `${iframeSrc.split(currentPath)[0]}${currentPath}/${path.replace(/^\\/?#?\\//, '')}`;\n    }\n  }\n  /**\n   * Renders the embedded application pages in the ThoughtSpot app.\n   * @param renderOptions An object containing the page ID\n   * to be embedded.\n   */\n\n\n  render() {\n    super.render();\n    const {\n      pageId,\n      runtimeFilters,\n      path\n    } = this.viewConfig;\n    const pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n    const src = this.getIFrameSrc(pageRoute, runtimeFilters);\n    this.renderV1Embed(src);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getFilterQuery","getQueryParamString","Param","HostEvent","V1Embed","Page","AppEmbed","constructor","domSelector","viewConfig","getEmbedParams","params","getBaseQueryParams","tag","hideObjects","liveboardV2","Tag","length","HideObjects","JSON","stringify","LiveboardV2Enabled","queryParams","getIFrameSrc","pageId","runtimeFilters","filterQuery","queryString","filter","Boolean","join","url","getV1EmbedBasePath","showPrimaryNavbar","disableProfileAndHelp","enableSearchAssist","tsPostHashParams","getThoughtSpotPostUrlParams","getPageRoute","Search","Answers","Liveboards","Pinboards","Data","SpotIQ","Home","formatPath","path","indexOf","substring","navigateToPage","noReload","iFrame","console","log","trigger","Navigate","warn","iframeSrc","src","embedPath","currentPath","includes","split","replace","render","pageRoute","renderV1Embed"],"sourceRoot":"","sources":["../../../src/embed/app.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}