{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { SearchEmbed } from '@thoughtspot/visual-embed-sdk/react';\nimport React from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      const name = this.props.args[\"name\"];\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(SearchEmbed, {\n        frameParams: {\n          width: '100%',\n          height: '100vh'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","SearchEmbed","React","MyComponent","state","numClicks","isFocused","render","name","props","args","theme","style","width","height"],"sources":["/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { SearchEmbed, LiveboardEmbed, AppEmbed, useEmbedRef } from '@thoughtspot/visual-embed-sdk/react';\n\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    return (\n      <span>\n      <SearchEmbed  frameParams={{width:'100%',height:'100vh'}}/>\n      </span>\n    )\n  }\n\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":";AAAA,SAEEA,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,SAASC,WAAT,QAAmE,qCAAnE;AAEA,OAAOC,KAAP,MAAiC,OAAjC;;AAOA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BJ,sBAA1B,CAAwD;EAAA;IAAA;IAAA,KAC/CK,KAD+C,GACvC;MAAEC,SAAS,EAAE,CAAb;MAAgBC,SAAS,EAAE;IAA3B,CADuC;;IAAA,KAG/CC,MAH+C,GAGtC,MAAiB;MAE/B,MAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;MAEA,MAAM;QAAEC;MAAF,IAAY,KAAKF,KAAvB;MACA,MAAMG,KAA0B,GAAG,EAAnC;MAEA,oBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACA,oBAAC,WAAD;QAAc,WAAW,EAAE;UAACC,KAAK,EAAC,MAAP;UAAcC,MAAM,EAAC;QAArB,CAA3B;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADA,CADF;IAKD,CAfqD;EAAA;;AAAA,C,CAoBxD;AACA;AACA;AACA;AACA;;;AACA,eAAed,uBAAuB,CAACG,WAAD,CAAtC"},"metadata":{},"sourceType":"module"}