{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"]; // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n\n      const {\n        theme\n      } = this.props;\n      const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      } // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        style: style,\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","state","numClicks","isFocused","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","setState","prevState","setComponentValue"],"sources":["/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":";AAAA,SACEA,SADF,EAEEC,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;;AAOA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BH,sBAA1B,CAAwD;EAAA;IAAA;IAAA,KAC/CI,KAD+C,GACvC;MAAEC,SAAS,EAAE,CAAb;MAAgBC,SAAS,EAAE;IAA3B,CADuC;;IAAA,KAG/CC,MAH+C,GAGtC,MAAiB;MAC/B;MACA;MACA,MAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb,CAH+B,CAK/B;MACA;MACA;;MACA,MAAM;QAAEC;MAAF,IAAY,KAAKF,KAAvB;MACA,MAAMG,KAA0B,GAAG,EAAnC,CAT+B,CAW/B;MACA;;MACA,IAAID,KAAJ,EAAW;QACT;QACA;QACA,MAAME,aAAa,GAAI,aACrB,KAAKT,KAAL,CAAWE,SAAX,GAAuBK,KAAK,CAACG,YAA7B,GAA4C,MAC7C,EAFD;QAGAF,KAAK,CAACG,MAAN,GAAeF,aAAf;QACAD,KAAK,CAACI,OAAN,GAAgBH,aAAhB;MACD,CArB8B,CAuB/B;MACA;MACA;MACA;;;MACA,oBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,cACUL,IADV,yBAEE;QACE,KAAK,EAAEI,KADT;QAEE,OAAO,EAAE,KAAKK,SAFhB;QAGE,QAAQ,EAAE,KAAKR,KAAL,CAAWS,QAHvB;QAIE,OAAO,EAAE,KAAKC,QAJhB;QAKE,MAAM,EAAE,KAAKC,OALf;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,eAFF,CADF;IAcD,CA5CqD;;IAAA,KA+C9CH,SA/C8C,GA+ClC,MAAY;MAC9B;MACA;MACA,KAAKI,QAAL,CACEC,SAAS,KAAK;QAAEjB,SAAS,EAAEiB,SAAS,CAACjB,SAAV,GAAsB;MAAnC,CAAL,CADX,EAEE,MAAMN,SAAS,CAACwB,iBAAV,CAA4B,KAAKnB,KAAL,CAAWC,SAAvC,CAFR;IAID,CAtDqD;;IAAA,KAyD9Cc,QAzD8C,GAyDnC,MAAY;MAC7B,KAAKE,QAAL,CAAc;QAAEf,SAAS,EAAE;MAAb,CAAd;IACD,CA3DqD;;IAAA,KA8D9Cc,OA9D8C,GA8DpC,MAAY;MAC5B,KAAKC,QAAL,CAAc;QAAEf,SAAS,EAAE;MAAb,CAAd;IACD,CAhEqD;EAAA;;AAAA,C,CAmExD;AACA;AACA;AACA;AACA;;;AACA,eAAeL,uBAAuB,CAACE,WAAD,CAAtC"},"metadata":{},"sourceType":"module"}