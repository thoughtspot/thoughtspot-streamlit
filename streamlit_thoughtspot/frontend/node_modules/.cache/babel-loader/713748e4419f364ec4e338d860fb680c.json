{"ast":null,"code":"import _toConsumableArray from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport var Visitor = /*#__PURE__*/function () {\n  function Visitor() {\n    _classCallCheck(this, Visitor);\n  }\n\n  _createClass(Visitor, [{\n    key: \"visitMany\",\n    value: function visitMany(nodes) {\n      var _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return nodes.map(function (node, i) {\n        return _this.visit.apply(_this, [node].concat(_toConsumableArray(args.map(function (x) {\n          return x[i];\n        }))));\n      });\n    }\n  }, {\n    key: \"visit\",\n    value: function visit() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.getVisitFn(args[0], false).apply(this, args);\n    }\n  }, {\n    key: \"getVisitFn\",\n    value: function getVisitFn(node) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _getVisitFn(this, node, throwIfNotFound);\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(_node) {\n      return null;\n    }\n  }]);\n\n  return Visitor;\n}();\n/** @ignore */\n\nfunction _getVisitFn(visitor, node) {\n  var throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var fn = null;\n  var dtype = Type.NONE; // tslint:disable\n\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return function () {\n    return null;\n  };\n  throw new Error(\"Unrecognized type '\".concat(Type[dtype], \"'\"));\n}\n/** @ignore */\n\n\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n\n    case Type.Int:\n      var bitWidth = type.bitWidth,\n          isSigned = type.isSigned;\n\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n\n      return Type.Int;\n\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n\n        case Precision.SINGLE:\n          return Type.Float32;\n\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n\n      return Type.Float;\n\n    case Type.Binary:\n      return Type.Binary;\n\n    case Type.Utf8:\n      return Type.Utf8;\n\n    case Type.Bool:\n      return Type.Bool;\n\n    case Type.Decimal:\n      return Type.Decimal;\n\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n\n      return Type.Time;\n\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n\n      return Type.Timestamp;\n\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n\n      return Type.Date;\n\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n\n      return Type.Interval;\n\n    case Type.Map:\n      return Type.Map;\n\n    case Type.List:\n      return Type.List;\n\n    case Type.Struct:\n      return Type.Struct;\n\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n\n      return Type.Union;\n\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n\n  throw new Error(\"Unrecognized type '\".concat(Type[type.typeId], \"'\"));\n} // Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n\n\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"mappings":"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","names":["Data","Vector","Type","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","DataType","Visitor","nodes","args","map","node","i","visit","x","getVisitFn","apply","throwIfNotFound","_node","visitor","fn","dtype","NONE","inferDType","type","Null","visitNull","Bool","visitBool","Int","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","Utf8","visitUtf8","Binary","visitBinary","FixedSizeBinary","visitFixedSizeBinary","Date","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","Timestamp","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","Time","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","Decimal","visitDecimal","List","visitList","Struct","visitStruct","Union","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","Interval","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","FixedSizeList","visitFixedSizeList","Map","visitMap","Error","typeId","bitWidth","isSigned","precision","HALF","SINGLE","DOUBLE","unit","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","mode","Dense","Sparse","prototype"],"sources":["visitor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"]},"metadata":{},"sourceType":"module"}