{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from '../vector/dictionary';\n/** @ignore */\n\nexport class Value {\n  eq(other) {\n    if (!(other instanceof Value)) {\n      other = new Literal(other);\n    }\n\n    return new Equals(this, other);\n  }\n\n  le(other) {\n    if (!(other instanceof Value)) {\n      other = new Literal(other);\n    }\n\n    return new LTeq(this, other);\n  }\n\n  ge(other) {\n    if (!(other instanceof Value)) {\n      other = new Literal(other);\n    }\n\n    return new GTeq(this, other);\n  }\n\n  lt(other) {\n    return new Not(this.ge(other));\n  }\n\n  gt(other) {\n    return new Not(this.le(other));\n  }\n\n  ne(other) {\n    return new Not(this.eq(other));\n  }\n\n}\n/** @ignore */\n\nexport class Literal extends Value {\n  constructor(v) {\n    super();\n    this.v = v;\n  }\n\n}\n/** @ignore */\n\nexport class Col extends Value {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  bind(batch) {\n    if (!this.colidx) {\n      // Assume column index doesn't change between calls to bind\n      //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n      this.colidx = -1;\n      const fields = batch.schema.fields;\n\n      for (let idx = -1; ++idx < fields.length;) {\n        if (fields[idx].name === this.name) {\n          this.colidx = idx;\n          break;\n        }\n      }\n\n      if (this.colidx < 0) {\n        throw new Error(`Failed to bind Col \"${this.name}\"`);\n      }\n    }\n\n    const vec = this.vector = batch.getChildAt(this.colidx);\n    return idx => vec.get(idx);\n  }\n\n}\n/** @ignore */\n\nexport class Predicate {\n  and() {\n    for (var _len = arguments.length, expr = new Array(_len), _key = 0; _key < _len; _key++) {\n      expr[_key] = arguments[_key];\n    }\n\n    return new And(this, ...expr);\n  }\n\n  or() {\n    for (var _len2 = arguments.length, expr = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      expr[_key2] = arguments[_key2];\n    }\n\n    return new Or(this, ...expr);\n  }\n\n  not() {\n    return new Not(this);\n  }\n\n}\n/** @ignore */\n\nexport class ComparisonPredicate extends Predicate {\n  constructor(left, right) {\n    super();\n    this.left = left;\n    this.right = right;\n  }\n\n  bind(batch) {\n    if (this.left instanceof Literal) {\n      if (this.right instanceof Literal) {\n        return this._bindLitLit(batch, this.left, this.right);\n      } else {\n        // right is a Col\n        return this._bindLitCol(batch, this.left, this.right);\n      }\n    } else {\n      // left is a Col\n      if (this.right instanceof Literal) {\n        return this._bindColLit(batch, this.left, this.right);\n      } else {\n        // right is a Col\n        return this._bindColCol(batch, this.left, this.right);\n      }\n    }\n  }\n\n}\n/** @ignore */\n\nexport class CombinationPredicate extends Predicate {\n  constructor() {\n    super();\n\n    for (var _len3 = arguments.length, children = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      children[_key3] = arguments[_key3];\n    }\n\n    this.children = children;\n  }\n\n} // add children to prototype so it doesn't get mangled in es2015/umd\n\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\n\nexport class And extends CombinationPredicate {\n  constructor() {\n    for (var _len4 = arguments.length, children = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      children[_key4] = arguments[_key4];\n    }\n\n    // Flatten any Ands\n    children = children.reduce((accum, p) => {\n      return accum.concat(p instanceof And ? p.children : p);\n    }, []);\n    super(...children);\n  }\n\n  bind(batch) {\n    const bound = this.children.map(p => p.bind(batch));\n    return (idx, batch) => bound.every(p => p(idx, batch));\n  }\n\n}\n/** @ignore */\n\nexport class Or extends CombinationPredicate {\n  constructor() {\n    for (var _len5 = arguments.length, children = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      children[_key5] = arguments[_key5];\n    }\n\n    // Flatten any Ors\n    children = children.reduce((accum, p) => {\n      return accum.concat(p instanceof Or ? p.children : p);\n    }, []);\n    super(...children);\n  }\n\n  bind(batch) {\n    const bound = this.children.map(p => p.bind(batch));\n    return (idx, batch) => bound.some(p => p(idx, batch));\n  }\n\n}\n/** @ignore */\n\nexport class Equals extends ComparisonPredicate {\n  _bindLitLit(_batch, left, right) {\n    const rtrn = left.v == right.v;\n    return () => rtrn;\n  }\n\n  _bindColCol(batch, left, right) {\n    const left_func = left.bind(batch);\n    const right_func = right.bind(batch);\n    return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);\n  }\n\n  _bindColLit(batch, col, lit) {\n    const col_func = col.bind(batch);\n\n    if (col.vector instanceof DictionaryVector) {\n      let key;\n      const vector = col.vector;\n\n      if (vector.dictionary !== this.lastDictionary) {\n        key = vector.reverseLookup(lit.v);\n        this.lastDictionary = vector.dictionary;\n        this.lastKey = key;\n      } else {\n        key = this.lastKey;\n      }\n\n      if (key === -1) {\n        // the value doesn't exist in the dictionary - always return\n        // false\n        // TODO: special-case of PredicateFunc that encapsulates this\n        // \"always false\" behavior. That way filtering operations don't\n        // have to bother checking\n        return () => false;\n      } else {\n        return idx => {\n          return vector.getKey(idx) === key;\n        };\n      }\n    } else {\n      return (idx, cols) => col_func(idx, cols) == lit.v;\n    }\n  }\n\n  _bindLitCol(batch, lit, col) {\n    // Equals is commutative\n    return this._bindColLit(batch, col, lit);\n  }\n\n}\n/** @ignore */\n\nexport class LTeq extends ComparisonPredicate {\n  _bindLitLit(_batch, left, right) {\n    const rtrn = left.v <= right.v;\n    return () => rtrn;\n  }\n\n  _bindColCol(batch, left, right) {\n    const left_func = left.bind(batch);\n    const right_func = right.bind(batch);\n    return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);\n  }\n\n  _bindColLit(batch, col, lit) {\n    const col_func = col.bind(batch);\n    return (idx, cols) => col_func(idx, cols) <= lit.v;\n  }\n\n  _bindLitCol(batch, lit, col) {\n    const col_func = col.bind(batch);\n    return (idx, cols) => lit.v <= col_func(idx, cols);\n  }\n\n}\n/** @ignore */\n\nexport class GTeq extends ComparisonPredicate {\n  _bindLitLit(_batch, left, right) {\n    const rtrn = left.v >= right.v;\n    return () => rtrn;\n  }\n\n  _bindColCol(batch, left, right) {\n    const left_func = left.bind(batch);\n    const right_func = right.bind(batch);\n    return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);\n  }\n\n  _bindColLit(batch, col, lit) {\n    const col_func = col.bind(batch);\n    return (idx, cols) => col_func(idx, cols) >= lit.v;\n  }\n\n  _bindLitCol(batch, lit, col) {\n    const col_func = col.bind(batch);\n    return (idx, cols) => lit.v >= col_func(idx, cols);\n  }\n\n}\n/** @ignore */\n\nexport class Not extends Predicate {\n  constructor(child) {\n    super();\n    this.child = child;\n  }\n\n  bind(batch) {\n    const func = this.child.bind(batch);\n    return (idx, batch) => !func(idx, batch);\n  }\n\n}\n/** @ignore */\n\nexport class CustomPredicate extends Predicate {\n  constructor(next, bind_) {\n    super();\n    this.next = next;\n    this.bind_ = bind_;\n  }\n\n  bind(batch) {\n    this.bind_(batch);\n    return this.next;\n  }\n\n}\nexport function lit(v) {\n  return new Literal(v);\n}\nexport function col(n) {\n  return new Col(n);\n}\nexport function and() {\n  for (var _len6 = arguments.length, p = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    p[_key6] = arguments[_key6];\n  }\n\n  return new And(...p);\n}\nexport function or() {\n  for (var _len7 = arguments.length, p = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    p[_key7] = arguments[_key7];\n  }\n\n  return new Or(...p);\n}\nexport function custom(next, bind) {\n  return new CustomPredicate(next, bind);\n}","map":{"version":3,"mappings":"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","names":["DictionaryVector","Value","eq","other","Literal","Equals","le","LTeq","ge","GTeq","lt","Not","gt","ne","constructor","v","Col","name","bind","batch","colidx","fields","schema","idx","length","Error","vec","vector","getChildAt","get","Predicate","and","expr","And","or","Or","not","ComparisonPredicate","left","right","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","children","prototype","Object","freeze","reduce","accum","p","concat","bound","map","every","some","_batch","rtrn","left_func","right_func","col","lit","col_func","key","dictionary","lastDictionary","reverseLookup","lastKey","getKey","cols","child","func","CustomPredicate","next","bind_","n","custom"],"sources":["compute/predicate.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n"]},"metadata":{},"sourceType":"module"}