{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { SearchEmbed, EmbedEvent } from '@thoughtspot/visual-embed-sdk';\nimport React from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      const name = this.props.args[\"name\"];\n\n      function isloaded() {\n        console.log(\"loaded!!\");\n      }\n\n      setTimeout(function () {\n        var element = document.getElementById('ts-embedz');\n        const searchEmbed = new SearchEmbed(element, {\n          frameParams: {\n            width: '600px',\n            height: '600px'\n          }\n        });\n        searchEmbed.on(EmbedEvent.Init, isloaded);\n      }, 1000);\n      const {\n        theme\n      } = this.props;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: '600px',\n          width: '600px'\n        },\n        id: \"ts-embed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"iframe\", {\n        onload: \"this.contentWindow.focus()\",\n        src: \"https://thoughtspotpmm.thoughtspot.cloud/?embedApp=true&hostAppUrl=local-host&viewPortHeight=1174&viewPortWidth=1710&sdkVersion=1.9.8&isLiveboardEmbed=true#/embed/viz/b6427b9e-f74a-4df6-8a2b-d77c3f5022f8\",\n        allowfullscreen: \"\",\n        name: \"ThoughtSpot Embedded Analytics\",\n        style: {\n          width: '100%',\n          height: '100%',\n          border: '0px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 1\n        }\n      }));\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","SearchEmbed","EmbedEvent","React","MyComponent","state","numClicks","isFocused","render","name","props","args","isloaded","console","log","setTimeout","element","document","getElementById","searchEmbed","frameParams","width","height","on","Init","theme","border"],"sources":["/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent\n}\nfrom '@thoughtspot/visual-embed-sdk';\n\nimport React, { ReactNode, useEffect } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    function isloaded(){\n      console.log(\"loaded!!\")\n    }\n    setTimeout(function(){\n      var element : any =  document.getElementById('ts-embedz');\n      const searchEmbed = new SearchEmbed(element, {\n        frameParams: {\n            width: '600px',\n            height: '600px',\n        },\n      });\n      searchEmbed.on(EmbedEvent.Init, isloaded)\n    },1000)\n\n\n    const { theme } = this.props\n\n    return (\n      <div style={{height:'600px',width:'600px'}} id=\"ts-embed\" >\n<iframe onload=\"this.contentWindow.focus()\"\nsrc=\"https://thoughtspotpmm.thoughtspot.cloud/?embedApp=true&amp;hostAppUrl=local-host&amp;viewPortHeight=1174&amp;viewPortWidth=1710&amp;sdkVersion=1.9.8&amp;isLiveboardEmbed=true#/embed/viz/b6427b9e-f74a-4df6-8a2b-d77c3f5022f8\" \nallowfullscreen=\"\" \nname=\"ThoughtSpot Embedded Analytics\" \nstyle={{width: '100%',height: '100%',border:'0px'}}></iframe>\n      </div>\n    )\n  }\n\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":";AAAA,SAEEA,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,SACEC,WADF,EAKEC,UALF,QAQK,+BARL;AAUA,OAAOC,KAAP,MAA4C,OAA5C;;AAOA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BL,sBAA1B,CAAwD;EAAA;IAAA;IAAA,KAC/CM,KAD+C,GACvC;MAAEC,SAAS,EAAE,CAAb;MAAgBC,SAAS,EAAE;IAA3B,CADuC;;IAAA,KAG/CC,MAH+C,GAGtC,MAAiB;MAE/B,MAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;;MACA,SAASC,QAAT,GAAmB;QACjBC,OAAO,CAACC,GAAR,CAAY,UAAZ;MACD;;MACDC,UAAU,CAAC,YAAU;QACnB,IAAIC,OAAa,GAAIC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAArB;QACA,MAAMC,WAAW,GAAG,IAAIlB,WAAJ,CAAgBe,OAAhB,EAAyB;UAC3CI,WAAW,EAAE;YACTC,KAAK,EAAE,OADE;YAETC,MAAM,EAAE;UAFC;QAD8B,CAAzB,CAApB;QAMAH,WAAW,CAACI,EAAZ,CAAerB,UAAU,CAACsB,IAA1B,EAAgCZ,QAAhC;MACD,CATS,EASR,IATQ,CAAV;MAYA,MAAM;QAAEa;MAAF,IAAY,KAAKf,KAAvB;MAEA,oBACE;QAAK,KAAK,EAAE;UAACY,MAAM,EAAC,OAAR;UAAgBD,KAAK,EAAC;QAAtB,CAAZ;QAA4C,EAAE,EAAC,UAA/C;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACN;QAAQ,MAAM,EAAC,4BAAf;QACA,GAAG,EAAC,6MADJ;QAEA,eAAe,EAAC,EAFhB;QAGA,IAAI,EAAC,gCAHL;QAIA,KAAK,EAAE;UAACA,KAAK,EAAE,MAAR;UAAeC,MAAM,EAAE,MAAvB;UAA8BI,MAAM,EAAC;QAArC,CAJP;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADM,CADF;IASD,CAhCqD;EAAA;;AAAA,C,CAqCxD;AACA;AACA;AACA;AACA;;;AACA,eAAe1B,uBAAuB,CAACI,WAAD,CAAtC"},"metadata":{},"sourceType":"module"}