{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { SearchEmbed, AuthType, init } from '@thoughtspot/visual-embed-sdk';\nimport React from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      init({\n        thoughtSpotHost: \"https://se-thoughtspot-cloud.thoughtspot.cloud/#\",\n        authType: AuthType.None\n      });\n      const name = this.props.args[\"name\"];\n      setTimeout(function () {\n        var element = document.getElementById('ts-embed');\n        element.innerHTML = \"it changed\";\n        const searchEmbed = new SearchEmbed(element, {\n          frameParams: {\n            width: '100%',\n            height: '100%'\n          }\n        });\n        element.innerHTML = \"it changed2\";\n      }, 1000);\n      const {\n        theme\n      } = this.props;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"ts-embed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }\n      }, \"TS EMBED!!\");\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","SearchEmbed","AuthType","init","React","MyComponent","state","numClicks","isFocused","render","thoughtSpotHost","authType","None","name","props","args","setTimeout","element","document","getElementById","innerHTML","searchEmbed","frameParams","width","height","theme"],"sources":["/Users/nathan.schroeder/Documents/dev/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent\n}\nfrom '@thoughtspot/visual-embed-sdk';\n\nimport React, { ReactNode, useEffect } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    init({\n      thoughtSpotHost: \"https://se-thoughtspot-cloud.thoughtspot.cloud/#\",\n      authType: AuthType.None,\n    });\n    const name = this.props.args[\"name\"]\n\n    setTimeout(function(){\n      var element : any =  document.getElementById('ts-embed');\n      element.innerHTML = \"it changed\"\n      const searchEmbed = new SearchEmbed(element, {\n        frameParams: {\n            width: '100%',\n            height: '100%',\n        },\n      });\n      element.innerHTML = \"it changed2\"\n    },1000)\n\n\n    const { theme } = this.props\n\n    return (\n      <div id=\"ts-embed\" >\n          TS EMBED!!\n      </div>\n    )\n  }\n\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":";AAAA,SAEEA,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,SACEC,WADF,EAEEC,QAFF,EAGEC,IAHF,QAQK,+BARL;AAUA,OAAOC,KAAP,MAA4C,OAA5C;;AAOA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BN,sBAA1B,CAAwD;EAAA;IAAA;IAAA,KAC/CO,KAD+C,GACvC;MAAEC,SAAS,EAAE,CAAb;MAAgBC,SAAS,EAAE;IAA3B,CADuC;;IAAA,KAG/CC,MAH+C,GAGtC,MAAiB;MAC/BN,IAAI,CAAC;QACHO,eAAe,EAAE,kDADd;QAEHC,QAAQ,EAAET,QAAQ,CAACU;MAFhB,CAAD,CAAJ;MAIA,MAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;MAEAC,UAAU,CAAC,YAAU;QACnB,IAAIC,OAAa,GAAIC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAArB;QACAF,OAAO,CAACG,SAAR,GAAoB,YAApB;QACA,MAAMC,WAAW,GAAG,IAAIpB,WAAJ,CAAgBgB,OAAhB,EAAyB;UAC3CK,WAAW,EAAE;YACTC,KAAK,EAAE,MADE;YAETC,MAAM,EAAE;UAFC;QAD8B,CAAzB,CAApB;QAMAP,OAAO,CAACG,SAAR,GAAoB,aAApB;MACD,CAVS,EAUR,IAVQ,CAAV;MAaA,MAAM;QAAEK;MAAF,IAAY,KAAKX,KAAvB;MAEA,oBACE;QAAK,EAAE,EAAC,UAAR;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBADF;IAKD,CA9BqD;EAAA;;AAAA,C,CAmCxD;AACA;AACA;AACA;AACA;;;AACA,eAAed,uBAAuB,CAACK,WAAD,CAAtC"},"metadata":{},"sourceType":"module"}