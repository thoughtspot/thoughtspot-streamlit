{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport streamAdapters from '../io/adapters';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { ITERATOR_DONE, ReadableInterop } from '../io/interfaces';\nimport { MessageReader, AsyncMessageReader, JSONMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding } from './message';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isArrowJSON, isFileHandle, isFetchResponse, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nexport class RecordBatchReader extends ReadableInterop {\n  constructor(impl) {\n    super();\n    this._impl = impl;\n  }\n\n  get closed() {\n    return this._impl.closed;\n  }\n\n  get schema() {\n    return this._impl.schema;\n  }\n\n  get autoDestroy() {\n    return this._impl.autoDestroy;\n  }\n\n  get dictionaries() {\n    return this._impl.dictionaries;\n  }\n\n  get numDictionaries() {\n    return this._impl.numDictionaries;\n  }\n\n  get numRecordBatches() {\n    return this._impl.numRecordBatches;\n  }\n\n  get footer() {\n    return this._impl.isFile() ? this._impl.footer : null;\n  }\n\n  isSync() {\n    return this._impl.isSync();\n  }\n\n  isAsync() {\n    return this._impl.isAsync();\n  }\n\n  isFile() {\n    return this._impl.isFile();\n  }\n\n  isStream() {\n    return this._impl.isStream();\n  }\n\n  next() {\n    return this._impl.next();\n  }\n\n  throw(value) {\n    return this._impl.throw(value);\n  }\n\n  return(value) {\n    return this._impl.return(value);\n  }\n\n  cancel() {\n    return this._impl.cancel();\n  }\n\n  reset(schema) {\n    this._impl.reset(schema);\n\n    this._DOMStream = undefined;\n    this._nodeStream = undefined;\n    return this;\n  }\n\n  open(options) {\n    const opening = this._impl.open(options);\n\n    return isPromise(opening) ? opening.then(() => this) : this;\n  }\n\n  readRecordBatch(index) {\n    return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n  }\n\n  [Symbol.iterator]() {\n    return this._impl[Symbol.iterator]();\n  }\n\n  [Symbol.asyncIterator]() {\n    return this._impl[Symbol.asyncIterator]();\n  }\n\n  toDOMStream() {\n    return streamAdapters.toDOMStream(this.isSync() ? {\n      [Symbol.iterator]: () => this\n    } : {\n      [Symbol.asyncIterator]: () => this\n    });\n  }\n\n  toNodeStream() {\n    return streamAdapters.toNodeStream(this.isSync() ? {\n      [Symbol.iterator]: () => this\n    } : {\n      [Symbol.asyncIterator]: () => this\n    }, {\n      objectMode: true\n    });\n  }\n  /** @nocollapse */\n  // @ts-ignore\n\n\n  static throughNode(options) {\n    throw new Error(`\"throughNode\" not available in this environment`);\n  }\n  /** @nocollapse */\n\n\n  static throughDOM( // @ts-ignore\n  writableStrategy, // @ts-ignore\n  readableStrategy) {\n    throw new Error(`\"throughDOM\" not available in this environment`);\n  }\n  /** @nocollapse */\n\n\n  static from(source) {\n    if (source instanceof RecordBatchReader) {\n      return source;\n    } else if (isArrowJSON(source)) {\n      return fromArrowJSON(source);\n    } else if (isFileHandle(source)) {\n      return fromFileHandle(source);\n    } else if (isPromise(source)) {\n      return (async () => await RecordBatchReader.from(await source))();\n    } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n      return fromAsyncByteStream(new AsyncByteStream(source));\n    }\n\n    return fromByteStream(new ByteStream(source));\n  }\n  /** @nocollapse */\n\n\n  static readAll(source) {\n    if (source instanceof RecordBatchReader) {\n      return source.isSync() ? readAllSync(source) : readAllAsync(source);\n    } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {\n      return readAllSync(source);\n    }\n\n    return readAllAsync(source);\n  }\n\n} //\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\n\nexport class RecordBatchStreamReader extends RecordBatchReader {\n  constructor(_impl) {\n    super(_impl);\n    this._impl = _impl;\n  }\n\n  [Symbol.iterator]() {\n    return this._impl[Symbol.iterator]();\n  }\n\n  async *[Symbol.asyncIterator]() {\n    yield* this[Symbol.iterator]();\n  }\n\n}\n/** @ignore */\n\nexport class AsyncRecordBatchStreamReader extends RecordBatchReader {\n  constructor(_impl) {\n    super(_impl);\n    this._impl = _impl;\n  }\n\n  [Symbol.iterator]() {\n    throw new Error(`AsyncRecordBatchStreamReader is not Iterable`);\n  }\n\n  [Symbol.asyncIterator]() {\n    return this._impl[Symbol.asyncIterator]();\n  }\n\n}\n/** @ignore */\n\nexport class RecordBatchFileReader extends RecordBatchStreamReader {\n  constructor(_impl) {\n    super(_impl);\n    this._impl = _impl;\n  }\n\n}\n/** @ignore */\n\nexport class AsyncRecordBatchFileReader extends AsyncRecordBatchStreamReader {\n  constructor(_impl) {\n    super(_impl);\n    this._impl = _impl;\n  }\n\n}\n/** @ignore */\n\nclass RecordBatchReaderImpl {\n  constructor() {\n    let dictionaries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();\n    this.closed = false;\n    this.autoDestroy = true;\n    this._dictionaryIndex = 0;\n    this._recordBatchIndex = 0;\n    this.dictionaries = dictionaries;\n  }\n\n  get numDictionaries() {\n    return this._dictionaryIndex;\n  }\n\n  get numRecordBatches() {\n    return this._recordBatchIndex;\n  }\n\n  isSync() {\n    return false;\n  }\n\n  isAsync() {\n    return false;\n  }\n\n  isFile() {\n    return false;\n  }\n\n  isStream() {\n    return false;\n  }\n\n  reset(schema) {\n    this._dictionaryIndex = 0;\n    this._recordBatchIndex = 0;\n    this.schema = schema;\n    this.dictionaries = new Map();\n    return this;\n  }\n\n  _loadRecordBatch(header, body) {\n    return new RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n  }\n\n  _loadDictionaryBatch(header, body) {\n    const {\n      id,\n      isDelta,\n      data\n    } = header;\n    const {\n      dictionaries,\n      schema\n    } = this;\n    const dictionary = dictionaries.get(id);\n\n    if (isDelta || !dictionary) {\n      const type = schema.dictionaries.get(id);\n      return dictionary && isDelta ? dictionary.concat(Vector.new(this._loadVectors(data, body, [type])[0])) : Vector.new(this._loadVectors(data, body, [type])[0]);\n    }\n\n    return dictionary;\n  }\n\n  _loadVectors(header, body, types) {\n    return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n  }\n\n}\n/** @ignore */\n\n\nclass RecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n  constructor(source, dictionaries) {\n    super(dictionaries);\n    this._reader = !isArrowJSON(source) ? new MessageReader(this._handle = source) : new JSONMessageReader(this._handle = source);\n  }\n\n  isSync() {\n    return true;\n  }\n\n  isStream() {\n    return true;\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n\n  cancel() {\n    if (!this.closed && (this.closed = true)) {\n      this.reset()._reader.return();\n\n      this._reader = null;\n      this.dictionaries = null;\n    }\n  }\n\n  open(options) {\n    if (!this.closed) {\n      this.autoDestroy = shouldAutoDestroy(this, options);\n\n      if (!(this.schema || (this.schema = this._reader.readSchema()))) {\n        this.cancel();\n      }\n    }\n\n    return this;\n  }\n\n  throw(value) {\n    if (!this.closed && this.autoDestroy && (this.closed = true)) {\n      return this.reset()._reader.throw(value);\n    }\n\n    return ITERATOR_DONE;\n  }\n\n  return(value) {\n    if (!this.closed && this.autoDestroy && (this.closed = true)) {\n      return this.reset()._reader.return(value);\n    }\n\n    return ITERATOR_DONE;\n  }\n\n  next() {\n    if (this.closed) {\n      return ITERATOR_DONE;\n    }\n\n    let message,\n        {\n      _reader: reader\n    } = this;\n\n    while (message = this._readNextMessageAndValidate()) {\n      if (message.isSchema()) {\n        this.reset(message.header());\n      } else if (message.isRecordBatch()) {\n        this._recordBatchIndex++;\n        const header = message.header();\n        const buffer = reader.readMessageBody(message.bodyLength);\n\n        const recordBatch = this._loadRecordBatch(header, buffer);\n\n        return {\n          done: false,\n          value: recordBatch\n        };\n      } else if (message.isDictionaryBatch()) {\n        this._dictionaryIndex++;\n        const header = message.header();\n        const buffer = reader.readMessageBody(message.bodyLength);\n\n        const vector = this._loadDictionaryBatch(header, buffer);\n\n        this.dictionaries.set(header.id, vector);\n      }\n    }\n\n    if (this.schema && this._recordBatchIndex === 0) {\n      this._recordBatchIndex++;\n      return {\n        done: false,\n        value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n      };\n    }\n\n    return this.return();\n  }\n\n  _readNextMessageAndValidate(type) {\n    return this._reader.readMessage(type);\n  }\n\n}\n/** @ignore */\n\n\nclass AsyncRecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n  constructor(source, dictionaries) {\n    super(dictionaries);\n    this._reader = new AsyncMessageReader(this._handle = source);\n  }\n\n  isAsync() {\n    return true;\n  }\n\n  isStream() {\n    return true;\n  }\n\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n\n  async cancel() {\n    if (!this.closed && (this.closed = true)) {\n      await this.reset()._reader.return();\n      this._reader = null;\n      this.dictionaries = null;\n    }\n  }\n\n  async open(options) {\n    if (!this.closed) {\n      this.autoDestroy = shouldAutoDestroy(this, options);\n\n      if (!(this.schema || (this.schema = await this._reader.readSchema()))) {\n        await this.cancel();\n      }\n    }\n\n    return this;\n  }\n\n  async throw(value) {\n    if (!this.closed && this.autoDestroy && (this.closed = true)) {\n      return await this.reset()._reader.throw(value);\n    }\n\n    return ITERATOR_DONE;\n  }\n\n  async return(value) {\n    if (!this.closed && this.autoDestroy && (this.closed = true)) {\n      return await this.reset()._reader.return(value);\n    }\n\n    return ITERATOR_DONE;\n  }\n\n  async next() {\n    if (this.closed) {\n      return ITERATOR_DONE;\n    }\n\n    let message,\n        {\n      _reader: reader\n    } = this;\n\n    while (message = await this._readNextMessageAndValidate()) {\n      if (message.isSchema()) {\n        await this.reset(message.header());\n      } else if (message.isRecordBatch()) {\n        this._recordBatchIndex++;\n        const header = message.header();\n        const buffer = await reader.readMessageBody(message.bodyLength);\n\n        const recordBatch = this._loadRecordBatch(header, buffer);\n\n        return {\n          done: false,\n          value: recordBatch\n        };\n      } else if (message.isDictionaryBatch()) {\n        this._dictionaryIndex++;\n        const header = message.header();\n        const buffer = await reader.readMessageBody(message.bodyLength);\n\n        const vector = this._loadDictionaryBatch(header, buffer);\n\n        this.dictionaries.set(header.id, vector);\n      }\n    }\n\n    if (this.schema && this._recordBatchIndex === 0) {\n      this._recordBatchIndex++;\n      return {\n        done: false,\n        value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n      };\n    }\n\n    return await this.return();\n  }\n\n  async _readNextMessageAndValidate(type) {\n    return await this._reader.readMessage(type);\n  }\n\n}\n/** @ignore */\n\n\nclass RecordBatchFileReaderImpl extends RecordBatchStreamReaderImpl {\n  constructor(source, dictionaries) {\n    super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n  }\n\n  get footer() {\n    return this._footer;\n  }\n\n  get numDictionaries() {\n    return this._footer ? this._footer.numDictionaries : 0;\n  }\n\n  get numRecordBatches() {\n    return this._footer ? this._footer.numRecordBatches : 0;\n  }\n\n  isSync() {\n    return true;\n  }\n\n  isFile() {\n    return true;\n  }\n\n  open(options) {\n    if (!this.closed && !this._footer) {\n      this.schema = (this._footer = this._readFooter()).schema;\n\n      for (const block of this._footer.dictionaryBatches()) {\n        block && this._readDictionaryBatch(this._dictionaryIndex++);\n      }\n    }\n\n    return super.open(options);\n  }\n\n  readRecordBatch(index) {\n    if (this.closed) {\n      return null;\n    }\n\n    if (!this._footer) {\n      this.open();\n    }\n\n    const block = this._footer && this._footer.getRecordBatch(index);\n\n    if (block && this._handle.seek(block.offset)) {\n      const message = this._reader.readMessage(MessageHeader.RecordBatch);\n\n      if (message && message.isRecordBatch()) {\n        const header = message.header();\n\n        const buffer = this._reader.readMessageBody(message.bodyLength);\n\n        const recordBatch = this._loadRecordBatch(header, buffer);\n\n        return recordBatch;\n      }\n    }\n\n    return null;\n  }\n\n  _readDictionaryBatch(index) {\n    const block = this._footer && this._footer.getDictionaryBatch(index);\n\n    if (block && this._handle.seek(block.offset)) {\n      const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n\n      if (message && message.isDictionaryBatch()) {\n        const header = message.header();\n\n        const buffer = this._reader.readMessageBody(message.bodyLength);\n\n        const vector = this._loadDictionaryBatch(header, buffer);\n\n        this.dictionaries.set(header.id, vector);\n      }\n    }\n  }\n\n  _readFooter() {\n    const {\n      _handle\n    } = this;\n    const offset = _handle.size - magicAndPadding;\n\n    const length = _handle.readInt32(offset);\n\n    const buffer = _handle.readAt(offset - length, length);\n\n    return Footer.decode(buffer);\n  }\n\n  _readNextMessageAndValidate(type) {\n    if (!this._footer) {\n      this.open();\n    }\n\n    if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n      const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n\n      if (block && this._handle.seek(block.offset)) {\n        return this._reader.readMessage(type);\n      }\n    }\n\n    return null;\n  }\n\n}\n/** @ignore */\n\n\nclass AsyncRecordBatchFileReaderImpl extends AsyncRecordBatchStreamReaderImpl {\n  constructor(source) {\n    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    }\n\n    const byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;\n    const dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n    super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n  }\n\n  get footer() {\n    return this._footer;\n  }\n\n  get numDictionaries() {\n    return this._footer ? this._footer.numDictionaries : 0;\n  }\n\n  get numRecordBatches() {\n    return this._footer ? this._footer.numRecordBatches : 0;\n  }\n\n  isFile() {\n    return true;\n  }\n\n  isAsync() {\n    return true;\n  }\n\n  async open(options) {\n    if (!this.closed && !this._footer) {\n      this.schema = (this._footer = await this._readFooter()).schema;\n\n      for (const block of this._footer.dictionaryBatches()) {\n        block && (await this._readDictionaryBatch(this._dictionaryIndex++));\n      }\n    }\n\n    return await super.open(options);\n  }\n\n  async readRecordBatch(index) {\n    if (this.closed) {\n      return null;\n    }\n\n    if (!this._footer) {\n      await this.open();\n    }\n\n    const block = this._footer && this._footer.getRecordBatch(index);\n\n    if (block && (await this._handle.seek(block.offset))) {\n      const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n\n      if (message && message.isRecordBatch()) {\n        const header = message.header();\n        const buffer = await this._reader.readMessageBody(message.bodyLength);\n\n        const recordBatch = this._loadRecordBatch(header, buffer);\n\n        return recordBatch;\n      }\n    }\n\n    return null;\n  }\n\n  async _readDictionaryBatch(index) {\n    const block = this._footer && this._footer.getDictionaryBatch(index);\n\n    if (block && (await this._handle.seek(block.offset))) {\n      const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n\n      if (message && message.isDictionaryBatch()) {\n        const header = message.header();\n        const buffer = await this._reader.readMessageBody(message.bodyLength);\n\n        const vector = this._loadDictionaryBatch(header, buffer);\n\n        this.dictionaries.set(header.id, vector);\n      }\n    }\n  }\n\n  async _readFooter() {\n    const {\n      _handle\n    } = this;\n    _handle._pending && (await _handle._pending);\n    const offset = _handle.size - magicAndPadding;\n    const length = await _handle.readInt32(offset);\n    const buffer = await _handle.readAt(offset - length, length);\n    return Footer.decode(buffer);\n  }\n\n  async _readNextMessageAndValidate(type) {\n    if (!this._footer) {\n      await this.open();\n    }\n\n    if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n      const block = this._footer.getRecordBatch(this._recordBatchIndex);\n\n      if (block && (await this._handle.seek(block.offset))) {\n        return await this._reader.readMessage(type);\n      }\n    }\n\n    return null;\n  }\n\n}\n/** @ignore */\n\n\nclass RecordBatchJSONReaderImpl extends RecordBatchStreamReaderImpl {\n  constructor(source, dictionaries) {\n    super(source, dictionaries);\n  }\n\n  _loadVectors(header, body, types) {\n    return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n  }\n\n} //\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\n\n\nfunction shouldAutoDestroy(self, options) {\n  return options && typeof options['autoDestroy'] === 'boolean' ? options['autoDestroy'] : self['autoDestroy'];\n}\n/** @ignore */\n\n\nfunction* readAllSync(source) {\n  const reader = RecordBatchReader.from(source);\n\n  try {\n    if (!reader.open({\n      autoDestroy: false\n    }).closed) {\n      do {\n        yield reader;\n      } while (!reader.reset().open().closed);\n    }\n  } finally {\n    reader.cancel();\n  }\n}\n/** @ignore */\n\n\nasync function* readAllAsync(source) {\n  const reader = await RecordBatchReader.from(source);\n\n  try {\n    if (!(await reader.open({\n      autoDestroy: false\n    })).closed) {\n      do {\n        yield reader;\n      } while (!(await reader.reset().open()).closed);\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n/** @ignore */\n\n\nfunction fromArrowJSON(source) {\n  return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */\n\n\nfunction fromByteStream(source) {\n  const bytes = source.peek(magicLength + 7 & ~7);\n  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read())) : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(function* () {}()));\n}\n/** @ignore */\n\n\nasync function fromAsyncByteStream(source) {\n  const bytes = await source.peek(magicLength + 7 & ~7);\n  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(await source.read())) : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(async function* () {}()));\n}\n/** @ignore */\n\n\nasync function fromFileHandle(source) {\n  const {\n    size\n  } = await source.stat();\n  const file = new AsyncRandomAccessFile(source, size);\n\n  if (size >= magicX2AndPadding) {\n    if (checkForMagicArrowString(await file.readAt(0, magicLength + 7 & ~7))) {\n      return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file));\n    }\n  }\n\n  return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file));\n}","map":{"version":3,"mappings":"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","names":["Vector","MessageHeader","Footer","streamAdapters","ByteStream","AsyncByteStream","RandomAccessFile","AsyncRandomAccessFile","VectorLoader","JSONVectorLoader","RecordBatch","_InternalEmptyPlaceholderRecordBatch","ITERATOR_DONE","ReadableInterop","MessageReader","AsyncMessageReader","JSONMessageReader","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","isPromise","isIterable","isAsyncIterable","isIteratorResult","isArrowJSON","isFileHandle","isFetchResponse","isReadableDOMStream","isReadableNodeStream","RecordBatchReader","constructor","impl","_impl","closed","schema","autoDestroy","dictionaries","numDictionaries","numRecordBatches","footer","isFile","isSync","isAsync","isStream","next","throw","value","return","cancel","reset","_DOMStream","undefined","_nodeStream","open","options","opening","then","readRecordBatch","index","Symbol","iterator","asyncIterator","toDOMStream","toNodeStream","objectMode","throughNode","Error","throughDOM","writableStrategy","readableStrategy","from","source","fromArrowJSON","fromFileHandle","fromAsyncByteStream","fromByteStream","readAll","readAllSync","readAllAsync","ArrayBuffer","isView","RecordBatchStreamReader","AsyncRecordBatchStreamReader","RecordBatchFileReader","AsyncRecordBatchFileReader","RecordBatchReaderImpl","Map","_dictionaryIndex","_recordBatchIndex","_loadRecordBatch","header","body","length","_loadVectors","fields","_loadDictionaryBatch","id","isDelta","data","dictionary","get","type","concat","new","types","nodes","buffers","visitMany","RecordBatchStreamReaderImpl","_reader","_handle","shouldAutoDestroy","readSchema","message","reader","_readNextMessageAndValidate","isSchema","isRecordBatch","buffer","readMessageBody","bodyLength","recordBatch","done","isDictionaryBatch","vector","set","readMessage","AsyncRecordBatchStreamReaderImpl","RecordBatchFileReaderImpl","_footer","_readFooter","block","dictionaryBatches","_readDictionaryBatch","getRecordBatch","seek","offset","getDictionaryBatch","DictionaryBatch","size","readInt32","readAt","decode","AsyncRecordBatchFileReaderImpl","rest","byteLength","shift","_pending","RecordBatchJSONReaderImpl","self","bytes","peek","read","stat","file"],"sources":["ipc/reader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n"]},"metadata":{},"sourceType":"module"}