{"ast":null,"code":"import _asyncToGenerator from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { toUint8Array } from '../util/buffer';\n/** @ignore */\n\nexport var RandomAccessFile = /*#__PURE__*/function (_ByteStream) {\n  _inherits(RandomAccessFile, _ByteStream);\n\n  var _super = _createSuper(RandomAccessFile);\n\n  function RandomAccessFile(buffer, byteLength) {\n    var _this;\n\n    _classCallCheck(this, RandomAccessFile);\n\n    _this = _super.call(this);\n    _this.position = 0;\n    _this.buffer = toUint8Array(buffer);\n    _this.size = typeof byteLength === 'undefined' ? _this.buffer.byteLength : byteLength;\n    return _this;\n  }\n\n  _createClass(RandomAccessFile, [{\n    key: \"readInt32\",\n    value: function readInt32(position) {\n      var _this$readAt = this.readAt(position, 4),\n          buffer = _this$readAt.buffer,\n          byteOffset = _this$readAt.byteOffset;\n\n      return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(position) {\n      this.position = Math.min(position, this.size);\n      return position < this.size;\n    }\n  }, {\n    key: \"read\",\n    value: function read(nBytes) {\n      var buffer = this.buffer,\n          size = this.size,\n          position = this.position;\n\n      if (buffer && position < size) {\n        if (typeof nBytes !== 'number') {\n          nBytes = Infinity;\n        }\n\n        this.position = Math.min(size, position + Math.min(size - position, nBytes));\n        return buffer.subarray(position, this.position);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"readAt\",\n    value: function readAt(position, nBytes) {\n      var buf = this.buffer;\n      var end = Math.min(this.size, position + nBytes);\n      return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.buffer && (this.buffer = null);\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      this.close();\n      return {\n        done: true,\n        value: value\n      };\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      this.close();\n      return {\n        done: true,\n        value: value\n      };\n    }\n  }]);\n\n  return RandomAccessFile;\n}(ByteStream);\n/** @ignore */\n\nexport var AsyncRandomAccessFile = /*#__PURE__*/function (_AsyncByteStream) {\n  _inherits(AsyncRandomAccessFile, _AsyncByteStream);\n\n  var _super2 = _createSuper(AsyncRandomAccessFile);\n\n  function AsyncRandomAccessFile(file, byteLength) {\n    var _this2;\n\n    _classCallCheck(this, AsyncRandomAccessFile);\n\n    _this2 = _super2.call(this);\n    _this2.position = 0;\n    _this2._handle = file;\n\n    if (typeof byteLength === 'number') {\n      _this2.size = byteLength;\n    } else {\n      _this2._pending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return file.stat();\n\n              case 2:\n                _this2.size = _context.sent.size;\n                delete _this2._pending;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n\n    return _this2;\n  }\n\n  _createClass(AsyncRandomAccessFile, [{\n    key: \"readInt32\",\n    value: function () {\n      var _readInt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(position) {\n        var _yield$this$readAt, buffer, byteOffset;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.readAt(position, 4);\n\n              case 2:\n                _yield$this$readAt = _context2.sent;\n                buffer = _yield$this$readAt.buffer;\n                byteOffset = _yield$this$readAt.byteOffset;\n                return _context2.abrupt(\"return\", new DataView(buffer, byteOffset).getInt32(0, true));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readInt32(_x) {\n        return _readInt.apply(this, arguments);\n      }\n\n      return readInt32;\n    }()\n  }, {\n    key: \"seek\",\n    value: function () {\n      var _seek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(position) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = this._pending;\n\n                if (!_context3.t0) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this._pending;\n\n              case 4:\n                this.position = Math.min(position, this.size);\n                return _context3.abrupt(\"return\", position < this.size);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function seek(_x2) {\n        return _seek.apply(this, arguments);\n      }\n\n      return seek;\n    }()\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(nBytes) {\n        var file, size, position, pos, offset, bytesRead, end, buffer, _yield$file$read;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.t0 = this._pending;\n\n                if (!_context4.t0) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this._pending;\n\n              case 4:\n                file = this._handle, size = this.size, position = this.position;\n\n                if (!(file && position < size)) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                if (typeof nBytes !== 'number') {\n                  nBytes = Infinity;\n                }\n\n                pos = position, offset = 0, bytesRead = 0;\n                end = Math.min(size, pos + Math.min(size - pos, nBytes));\n                buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n\n              case 10:\n                if (!((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength)) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 13;\n                return file.read(buffer, offset, buffer.byteLength - offset, pos);\n\n              case 13:\n                _yield$file$read = _context4.sent;\n                bytesRead = _yield$file$read.bytesRead;\n                _context4.next = 10;\n                break;\n\n              case 17:\n                return _context4.abrupt(\"return\", buffer);\n\n              case 18:\n                return _context4.abrupt(\"return\", null);\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function read(_x3) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"readAt\",\n    value: function () {\n      var _readAt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(position, nBytes) {\n        var file, size, end, buffer;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.t0 = this._pending;\n\n                if (!_context5.t0) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                _context5.next = 4;\n                return this._pending;\n\n              case 4:\n                file = this._handle, size = this.size;\n\n                if (!(file && position + nBytes < size)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                end = Math.min(size, position + nBytes);\n                buffer = new Uint8Array(end - position);\n                _context5.next = 10;\n                return file.read(buffer, 0, nBytes, position);\n\n              case 10:\n                return _context5.abrupt(\"return\", _context5.sent.buffer);\n\n              case 11:\n                return _context5.abrupt(\"return\", new Uint8Array(nBytes));\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function readAt(_x4, _x5) {\n        return _readAt.apply(this, arguments);\n      }\n\n      return readAt;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var f;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                f = this._handle;\n                this._handle = null;\n                _context6.t0 = f;\n\n                if (!_context6.t0) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _context6.next = 6;\n                return f.close();\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(value) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.close();\n\n              case 2:\n                return _context7.abrupt(\"return\", {\n                  done: true,\n                  value: value\n                });\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _throw(_x6) {\n        return _throw2.apply(this, arguments);\n      }\n\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(value) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.close();\n\n              case 2:\n                return _context8.abrupt(\"return\", {\n                  done: true,\n                  value: value\n                });\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function _return(_x7) {\n        return _return2.apply(this, arguments);\n      }\n\n      return _return;\n    }()\n  }]);\n\n  return AsyncRandomAccessFile;\n}(AsyncByteStream);","map":{"version":3,"mappings":"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","names":["ByteStream","AsyncByteStream","toUint8Array","RandomAccessFile","buffer","byteLength","size","position","readAt","byteOffset","DataView","getInt32","Math","min","nBytes","Infinity","subarray","buf","end","Uint8Array","value","close","done","AsyncRandomAccessFile","file","_handle","_pending","stat","pos","offset","bytesRead","max","read","f"],"sources":["io/file.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n"]},"metadata":{},"sourceType":"module"}