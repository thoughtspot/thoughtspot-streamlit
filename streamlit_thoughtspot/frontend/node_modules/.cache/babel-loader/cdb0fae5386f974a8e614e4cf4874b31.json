{"ast":null,"code":"import _slicedToArray from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\n\nexport var BinaryBuilder = /*#__PURE__*/function (_VariableWidthBuilder) {\n  _inherits(BinaryBuilder, _VariableWidthBuilder);\n\n  var _super = _createSuper(BinaryBuilder);\n\n  function BinaryBuilder(opts) {\n    var _this;\n\n    _classCallCheck(this, BinaryBuilder);\n\n    _this = _super.call(this, opts);\n    _this._values = new BufferBuilder(new Uint8Array(0));\n    return _this;\n  }\n\n  _createClass(BinaryBuilder, [{\n    key: \"byteLength\",\n    get: function get() {\n      var size = this._pendingLength + this.length * 4;\n      this._offsets && (size += this._offsets.byteLength);\n      this._values && (size += this._values.byteLength);\n      this._nulls && (size += this._nulls.byteLength);\n      return size;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      return _get(_getPrototypeOf(BinaryBuilder.prototype), \"setValue\", this).call(this, index, toUint8Array(value));\n    }\n  }, {\n    key: \"_flushPending\",\n    value: function _flushPending(pending, pendingLength) {\n      var offsets = this._offsets;\n\n      var data = this._values.reserve(pendingLength).buffer;\n\n      var index = 0,\n          length = 0,\n          offset = 0,\n          value;\n\n      var _iterator = _createForOfIteratorHelper(pending),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2);\n\n          index = _step$value[0];\n          value = _step$value[1];\n\n          if (value === undefined) {\n            offsets.set(index, 0);\n          } else {\n            length = value.length;\n            data.set(value, offset);\n            offsets.set(index, length);\n            offset += length;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return BinaryBuilder;\n}(VariableWidthBuilder);","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,oBAAT,QAAqD,YAArD;AAEA;;AACA,WAAaC,aAAb;EAAA;;EAAA;;EACI,uBAAYC,IAAZ,EAA+C;IAAA;;IAAA;;IAC3C,0BAAMA,IAAN;IACA,MAAKC,OAAL,GAAe,IAAIJ,aAAJ,CAAkB,IAAIK,UAAJ,CAAe,CAAf,CAAlB,CAAf;IAF2C;EAG9C;;EAJL;IAAA;IAAA,KAKI,eAAqB;MACjB,IAAIC,IAAI,GAAG,KAAKC,cAAL,GAAuB,KAAKC,MAAL,GAAc,CAAhD;MACA,KAAKC,QAAL,KAAkBH,IAAI,IAAI,KAAKG,QAAL,CAAcC,UAAxC;MACA,KAAKN,OAAL,KAAiBE,IAAI,IAAI,KAAKF,OAAL,CAAaM,UAAtC;MACA,KAAKC,MAAL,KAAgBL,IAAI,IAAI,KAAKK,MAAL,CAAYD,UAApC;MACA,OAAOJ,IAAP;IACH;EAXL;IAAA;IAAA,OAYW,kBAASM,KAAT,EAAwBC,KAAxB,EAAyC;MAC5C,mFAAsBD,KAAtB,EAA6Bb,YAAY,CAACc,KAAD,CAAzC;IACH;EAdL;IAAA;IAAA,OAec,uBAAcC,OAAd,EAA4DC,aAA5D,EAAiF;MACvF,IAAMC,OAAO,GAAG,KAAKP,QAArB;;MACA,IAAMQ,IAAI,GAAG,KAAKb,OAAL,CAAac,OAAb,CAAqBH,aAArB,EAAoCI,MAAjD;;MACA,IAAIP,KAAK,GAAG,CAAZ;MAAA,IAAeJ,MAAM,GAAG,CAAxB;MAAA,IAA2BY,MAAM,GAAG,CAApC;MAAA,IAAuCP,KAAvC;;MAHuF,2CAIhEC,OAJgE;MAAA;;MAAA;QAIvF,oDAAgC;UAAA;;UAA1BF,KAA0B;UAAnBC,KAAmB;;UAC5B,IAAIA,KAAK,KAAKQ,SAAd,EAAyB;YACrBL,OAAO,CAACM,GAAR,CAAYV,KAAZ,EAAmB,CAAnB;UACH,CAFD,MAEO;YACHJ,MAAM,GAAGK,KAAK,CAACL,MAAf;YACAS,IAAI,CAACK,GAAL,CAAST,KAAT,EAAgBO,MAAhB;YACAJ,OAAO,CAACM,GAAR,CAAYV,KAAZ,EAAmBJ,MAAnB;YACAY,MAAM,IAAIZ,MAAV;UACH;QACJ;MAbsF;QAAA;MAAA;QAAA;MAAA;IAc1F;EA7BL;;EAAA;AAAA,EAAgDP,oBAAhD","names":["toUint8Array","BufferBuilder","VariableWidthBuilder","BinaryBuilder","opts","_values","Uint8Array","size","_pendingLength","length","_offsets","byteLength","_nulls","index","value","pending","pendingLength","offsets","data","reserve","buffer","offset","undefined","set"],"sources":["builder/binary.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}