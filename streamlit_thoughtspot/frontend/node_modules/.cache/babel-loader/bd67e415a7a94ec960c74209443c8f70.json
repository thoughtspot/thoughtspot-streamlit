{"ast":null,"code":"import _toConsumableArray from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\n\nexport var BaseVector = /*#__PURE__*/function (_AbstractVector, _Symbol$toStringTag) {\n  _inherits(BaseVector, _AbstractVector);\n\n  var _super = _createSuper(BaseVector);\n\n  function BaseVector(data, children) {\n    var _this;\n\n    _classCallCheck(this, BaseVector);\n\n    _this = _super.call(this);\n    _this._children = children;\n    _this.numChildren = data.childData.length;\n\n    _this._bindDataAccessors(_this.data = data);\n\n    return _this;\n  }\n\n  _createClass(BaseVector, [{\n    key: \"type\",\n    get: function get() {\n      return this.data.type;\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this.data.typeId;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.data.length;\n    }\n  }, {\n    key: \"offset\",\n    get: function get() {\n      return this.data.offset;\n    }\n  }, {\n    key: \"stride\",\n    get: function get() {\n      return this.data.stride;\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      return this.data.nullCount;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this.data.byteLength;\n    }\n  }, {\n    key: \"VectorName\",\n    get: function get() {\n      return \"\".concat(Type[this.typeId], \"Vector\");\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this.type.ArrayType;\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this.data.values;\n    }\n  }, {\n    key: \"typeIds\",\n    get: function get() {\n      return this.data.typeIds;\n    }\n  }, {\n    key: \"nullBitmap\",\n    get: function get() {\n      return this.data.nullBitmap;\n    }\n  }, {\n    key: \"valueOffsets\",\n    get: function get() {\n      return this.data.valueOffsets;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"\".concat(this.VectorName, \"<\").concat(this.type[Symbol.toStringTag], \">\");\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(data) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;\n      return Vector.new(data, children);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n\n      return Chunked.concat.apply(Chunked, [this].concat(others));\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(begin, end) {\n      // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n      // clamp between 0 and length, and wrap around on negative indices, e.g.\n      // slice(-1, 5) or slice(5, -1)\n      return clampRange(this, begin, end, this._sliceInternal);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      if (this.nullCount > 0) {\n        var idx = this.offset + index;\n        var val = this.nullBitmap[idx >> 3];\n        var mask = val & 1 << idx % 8;\n        return mask !== 0;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      return index < 0 || index >= this.numChildren ? null : (this._children || (this._children = []))[index] || (this._children[index] = Vector.new(this.data.childData[index]));\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _toConsumableArray(this);\n    }\n  }, {\n    key: \"_sliceInternal\",\n    value: function _sliceInternal(self, begin, end) {\n      return self.clone(self.data.slice(begin, end - begin), null);\n    } // @ts-ignore\n\n  }, {\n    key: \"_bindDataAccessors\",\n    value: function _bindDataAccessors(data) {// Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n  }]);\n\n  return BaseVector;\n}(AbstractVector, Symbol.toStringTag);\nBaseVector.prototype[Symbol.isConcatSpreadable] = true;","map":{"version":3,"mappings":"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","names":["Type","Chunked","clampRange","AbstractVector","Vector","BaseVector","data","children","_children","numChildren","childData","length","_bindDataAccessors","type","typeId","offset","stride","nullCount","byteLength","ArrayType","values","typeIds","nullBitmap","valueOffsets","VectorName","Symbol","toStringTag","new","others","concat","begin","end","_sliceInternal","index","idx","val","mask","self","clone","slice","prototype","isConcatSpreadable"],"sources":["vector/base.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n"]},"metadata":{},"sourceType":"module"}