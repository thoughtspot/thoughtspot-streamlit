{"ast":null,"code":"import _classCallCheck from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot-streamlit/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* tslint:disable:class-name */\n\n/**\n * @enum {number}\n */\nexport var org;\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var MetadataVersion;\n\n        (function (MetadataVersion) {\n          /**\n           * 0.1.0\n           */\n          MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n          /**\n           * 0.2.0\n           */\n\n          MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n          /**\n           * 0.3.0 -> 0.7.1\n           */\n\n          MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n          /**\n           * >= 0.8.0\n           */\n\n          MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n        })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var UnionMode;\n\n        (function (UnionMode) {\n          UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n          UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n        })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Precision;\n\n        (function (Precision) {\n          Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n          Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n          Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n        })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var DateUnit;\n\n        (function (DateUnit) {\n          DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n          DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n        })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var TimeUnit;\n\n        (function (TimeUnit) {\n          TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n          TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n          TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n          TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n        })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var IntervalUnit;\n\n        (function (IntervalUnit) {\n          IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n          IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n        })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Type;\n\n        (function (Type) {\n          Type[Type[\"NONE\"] = 0] = \"NONE\";\n          Type[Type[\"Null\"] = 1] = \"Null\";\n          Type[Type[\"Int\"] = 2] = \"Int\";\n          Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n          Type[Type[\"Binary\"] = 4] = \"Binary\";\n          Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n          Type[Type[\"Bool\"] = 6] = \"Bool\";\n          Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n          Type[Type[\"Date\"] = 8] = \"Date\";\n          Type[Type[\"Time\"] = 9] = \"Time\";\n          Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n          Type[Type[\"Interval\"] = 11] = \"Interval\";\n          Type[Type[\"List\"] = 12] = \"List\";\n          Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n          Type[Type[\"Union\"] = 14] = \"Union\";\n          Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n          Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n          Type[Type[\"Map\"] = 17] = \"Map\";\n          Type[Type[\"Duration\"] = 18] = \"Duration\";\n          Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n          Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n          Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n        })(Type = flatbuf.Type || (flatbuf.Type = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Endianness;\n\n        (function (Endianness) {\n          Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n          Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n        })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Null = /*#__PURE__*/function () {\n          function Null() {\n            _classCallCheck(this, Null);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Null\n           */\n\n\n          _createClass(Null, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Null= obj\n             * @returns Null\n             */\n\n          }], [{\n            key: \"getRootAsNull\",\n            value: function getRootAsNull(bb, obj) {\n              return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startNull\",\n            value: function startNull(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endNull\",\n            value: function endNull(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createNull\",\n            value: function createNull(builder) {\n              Null.startNull(builder);\n              return Null.endNull(builder);\n            }\n          }]);\n\n          return Null;\n        }();\n\n        flatbuf.Null = Null;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Struct_ = /*#__PURE__*/function () {\n          function Struct_() {\n            _classCallCheck(this, Struct_);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Struct_\n           */\n\n\n          _createClass(Struct_, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Struct_= obj\n             * @returns Struct_\n             */\n\n          }], [{\n            key: \"getRootAsStruct_\",\n            value: function getRootAsStruct_(bb, obj) {\n              return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startStruct_\",\n            value: function startStruct_(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endStruct_\",\n            value: function endStruct_(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createStruct_\",\n            value: function createStruct_(builder) {\n              Struct_.startStruct_(builder);\n              return Struct_.endStruct_(builder);\n            }\n          }]);\n\n          return Struct_;\n        }();\n\n        flatbuf.Struct_ = Struct_;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var List = /*#__PURE__*/function () {\n          function List() {\n            _classCallCheck(this, List);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns List\n           */\n\n\n          _createClass(List, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param List= obj\n             * @returns List\n             */\n\n          }], [{\n            key: \"getRootAsList\",\n            value: function getRootAsList(bb, obj) {\n              return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startList\",\n            value: function startList(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endList\",\n            value: function endList(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createList\",\n            value: function createList(builder) {\n              List.startList(builder);\n              return List.endList(builder);\n            }\n          }]);\n\n          return List;\n        }();\n\n        flatbuf.List = List;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var LargeList = /*#__PURE__*/function () {\n          function LargeList() {\n            _classCallCheck(this, LargeList);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeList\n           */\n\n\n          _createClass(LargeList, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param LargeList= obj\n             * @returns LargeList\n             */\n\n          }], [{\n            key: \"getRootAsLargeList\",\n            value: function getRootAsLargeList(bb, obj) {\n              return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startLargeList\",\n            value: function startLargeList(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endLargeList\",\n            value: function endLargeList(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createLargeList\",\n            value: function createLargeList(builder) {\n              LargeList.startLargeList(builder);\n              return LargeList.endLargeList(builder);\n            }\n          }]);\n\n          return LargeList;\n        }();\n\n        flatbuf.LargeList = LargeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var FixedSizeList = /*#__PURE__*/function () {\n          function FixedSizeList() {\n            _classCallCheck(this, FixedSizeList);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeList\n           */\n\n\n          _createClass(FixedSizeList, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param FixedSizeList= obj\n             * @returns FixedSizeList\n             */\n\n          }, {\n            key: \"listSize\",\n            value:\n            /**\n             * Number of list items per value\n             *\n             * @returns number\n             */\n            function listSize() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsFixedSizeList\",\n            value: function getRootAsFixedSizeList(bb, obj) {\n              return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startFixedSizeList\",\n            value: function startFixedSizeList(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number listSize\n             */\n\n          }, {\n            key: \"addListSize\",\n            value: function addListSize(builder, listSize) {\n              builder.addFieldInt32(0, listSize, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endFixedSizeList\",\n            value: function endFixedSizeList(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createFixedSizeList\",\n            value: function createFixedSizeList(builder, listSize) {\n              FixedSizeList.startFixedSizeList(builder);\n              FixedSizeList.addListSize(builder, listSize);\n              return FixedSizeList.endFixedSizeList(builder);\n            }\n          }]);\n\n          return FixedSizeList;\n        }();\n\n        flatbuf.FixedSizeList = FixedSizeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Map = /*#__PURE__*/function () {\n          function Map() {\n            _classCallCheck(this, Map);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Map\n           */\n\n\n          _createClass(Map, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Map= obj\n             * @returns Map\n             */\n\n          }, {\n            key: \"keysSorted\",\n            value:\n            /**\n             * Set to true if the keys within each value are sorted\n             *\n             * @returns boolean\n             */\n            function keysSorted() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsMap\",\n            value: function getRootAsMap(bb, obj) {\n              return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startMap\",\n            value: function startMap(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean keysSorted\n             */\n\n          }, {\n            key: \"addKeysSorted\",\n            value: function addKeysSorted(builder, keysSorted) {\n              builder.addFieldInt8(0, +keysSorted, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endMap\",\n            value: function endMap(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createMap\",\n            value: function createMap(builder, keysSorted) {\n              Map.startMap(builder);\n              Map.addKeysSorted(builder, keysSorted);\n              return Map.endMap(builder);\n            }\n          }]);\n\n          return Map;\n        }();\n\n        flatbuf.Map = Map;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Union = /*#__PURE__*/function () {\n          function Union() {\n            _classCallCheck(this, Union);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Union\n           */\n\n\n          _createClass(Union, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Union= obj\n             * @returns Union\n             */\n\n          }, {\n            key: \"mode\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.UnionMode\n             */\n            function mode() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n            }\n            /**\n             * @param number index\n             * @returns number\n             */\n\n          }, {\n            key: \"typeIds\",\n            value: function typeIds(index) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"typeIdsLength\",\n            value: function typeIdsLength() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @returns Int32Array\n             */\n\n          }, {\n            key: \"typeIdsArray\",\n            value: function typeIdsArray() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsUnion\",\n            value: function getRootAsUnion(bb, obj) {\n              return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startUnion\",\n            value: function startUnion(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.UnionMode mode\n             */\n\n          }, {\n            key: \"addMode\",\n            value: function addMode(builder, mode) {\n              builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset typeIdsOffset\n             */\n\n          }, {\n            key: \"addTypeIds\",\n            value: function addTypeIds(builder, typeIdsOffset) {\n              builder.addFieldOffset(1, typeIdsOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<number> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createTypeIdsVector\",\n            value: function createTypeIdsVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startTypeIdsVector\",\n            value: function startTypeIdsVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endUnion\",\n            value: function endUnion(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createUnion\",\n            value: function createUnion(builder, mode, typeIdsOffset) {\n              Union.startUnion(builder);\n              Union.addMode(builder, mode);\n              Union.addTypeIds(builder, typeIdsOffset);\n              return Union.endUnion(builder);\n            }\n          }]);\n\n          return Union;\n        }();\n\n        flatbuf.Union = Union;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Int = /*#__PURE__*/function () {\n          function Int() {\n            _classCallCheck(this, Int);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Int\n           */\n\n\n          _createClass(Int, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Int= obj\n             * @returns Int\n             */\n\n          }, {\n            key: \"bitWidth\",\n            value:\n            /**\n             * @returns number\n             */\n            function bitWidth() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @returns boolean\n             */\n\n          }, {\n            key: \"isSigned\",\n            value: function isSigned() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsInt\",\n            value: function getRootAsInt(bb, obj) {\n              return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startInt\",\n            value: function startInt(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number bitWidth\n             */\n\n          }, {\n            key: \"addBitWidth\",\n            value: function addBitWidth(builder, bitWidth) {\n              builder.addFieldInt32(0, bitWidth, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean isSigned\n             */\n\n          }, {\n            key: \"addIsSigned\",\n            value: function addIsSigned(builder, isSigned) {\n              builder.addFieldInt8(1, +isSigned, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endInt\",\n            value: function endInt(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createInt\",\n            value: function createInt(builder, bitWidth, isSigned) {\n              Int.startInt(builder);\n              Int.addBitWidth(builder, bitWidth);\n              Int.addIsSigned(builder, isSigned);\n              return Int.endInt(builder);\n            }\n          }]);\n\n          return Int;\n        }();\n\n        flatbuf.Int = Int;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var FloatingPoint = /*#__PURE__*/function () {\n          function FloatingPoint() {\n            _classCallCheck(this, FloatingPoint);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FloatingPoint\n           */\n\n\n          _createClass(FloatingPoint, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param FloatingPoint= obj\n             * @returns FloatingPoint\n             */\n\n          }, {\n            key: \"precision\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.Precision\n             */\n            function precision() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Precision.HALF;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsFloatingPoint\",\n            value: function getRootAsFloatingPoint(bb, obj) {\n              return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startFloatingPoint\",\n            value: function startFloatingPoint(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.Precision precision\n             */\n\n          }, {\n            key: \"addPrecision\",\n            value: function addPrecision(builder, precision) {\n              builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endFloatingPoint\",\n            value: function endFloatingPoint(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createFloatingPoint\",\n            value: function createFloatingPoint(builder, precision) {\n              FloatingPoint.startFloatingPoint(builder);\n              FloatingPoint.addPrecision(builder, precision);\n              return FloatingPoint.endFloatingPoint(builder);\n            }\n          }]);\n\n          return FloatingPoint;\n        }();\n\n        flatbuf.FloatingPoint = FloatingPoint;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Utf8 = /*#__PURE__*/function () {\n          function Utf8() {\n            _classCallCheck(this, Utf8);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Utf8\n           */\n\n\n          _createClass(Utf8, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Utf8= obj\n             * @returns Utf8\n             */\n\n          }], [{\n            key: \"getRootAsUtf8\",\n            value: function getRootAsUtf8(bb, obj) {\n              return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startUtf8\",\n            value: function startUtf8(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endUtf8\",\n            value: function endUtf8(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createUtf8\",\n            value: function createUtf8(builder) {\n              Utf8.startUtf8(builder);\n              return Utf8.endUtf8(builder);\n            }\n          }]);\n\n          return Utf8;\n        }();\n\n        flatbuf.Utf8 = Utf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Opaque binary data\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Binary = /*#__PURE__*/function () {\n          function Binary() {\n            _classCallCheck(this, Binary);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Binary\n           */\n\n\n          _createClass(Binary, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Binary= obj\n             * @returns Binary\n             */\n\n          }], [{\n            key: \"getRootAsBinary\",\n            value: function getRootAsBinary(bb, obj) {\n              return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startBinary\",\n            value: function startBinary(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endBinary\",\n            value: function endBinary(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createBinary\",\n            value: function createBinary(builder) {\n              Binary.startBinary(builder);\n              return Binary.endBinary(builder);\n            }\n          }]);\n\n          return Binary;\n        }();\n\n        flatbuf.Binary = Binary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var LargeUtf8 = /*#__PURE__*/function () {\n          function LargeUtf8() {\n            _classCallCheck(this, LargeUtf8);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeUtf8\n           */\n\n\n          _createClass(LargeUtf8, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param LargeUtf8= obj\n             * @returns LargeUtf8\n             */\n\n          }], [{\n            key: \"getRootAsLargeUtf8\",\n            value: function getRootAsLargeUtf8(bb, obj) {\n              return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startLargeUtf8\",\n            value: function startLargeUtf8(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endLargeUtf8\",\n            value: function endLargeUtf8(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createLargeUtf8\",\n            value: function createLargeUtf8(builder) {\n              LargeUtf8.startLargeUtf8(builder);\n              return LargeUtf8.endLargeUtf8(builder);\n            }\n          }]);\n\n          return LargeUtf8;\n        }();\n\n        flatbuf.LargeUtf8 = LargeUtf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var LargeBinary = /*#__PURE__*/function () {\n          function LargeBinary() {\n            _classCallCheck(this, LargeBinary);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeBinary\n           */\n\n\n          _createClass(LargeBinary, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param LargeBinary= obj\n             * @returns LargeBinary\n             */\n\n          }], [{\n            key: \"getRootAsLargeBinary\",\n            value: function getRootAsLargeBinary(bb, obj) {\n              return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startLargeBinary\",\n            value: function startLargeBinary(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endLargeBinary\",\n            value: function endLargeBinary(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createLargeBinary\",\n            value: function createLargeBinary(builder) {\n              LargeBinary.startLargeBinary(builder);\n              return LargeBinary.endLargeBinary(builder);\n            }\n          }]);\n\n          return LargeBinary;\n        }();\n\n        flatbuf.LargeBinary = LargeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var FixedSizeBinary = /*#__PURE__*/function () {\n          function FixedSizeBinary() {\n            _classCallCheck(this, FixedSizeBinary);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeBinary\n           */\n\n\n          _createClass(FixedSizeBinary, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param FixedSizeBinary= obj\n             * @returns FixedSizeBinary\n             */\n\n          }, {\n            key: \"byteWidth\",\n            value:\n            /**\n             * Number of bytes per value\n             *\n             * @returns number\n             */\n            function byteWidth() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsFixedSizeBinary\",\n            value: function getRootAsFixedSizeBinary(bb, obj) {\n              return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startFixedSizeBinary\",\n            value: function startFixedSizeBinary(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number byteWidth\n             */\n\n          }, {\n            key: \"addByteWidth\",\n            value: function addByteWidth(builder, byteWidth) {\n              builder.addFieldInt32(0, byteWidth, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endFixedSizeBinary\",\n            value: function endFixedSizeBinary(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createFixedSizeBinary\",\n            value: function createFixedSizeBinary(builder, byteWidth) {\n              FixedSizeBinary.startFixedSizeBinary(builder);\n              FixedSizeBinary.addByteWidth(builder, byteWidth);\n              return FixedSizeBinary.endFixedSizeBinary(builder);\n            }\n          }]);\n\n          return FixedSizeBinary;\n        }();\n\n        flatbuf.FixedSizeBinary = FixedSizeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Bool = /*#__PURE__*/function () {\n          function Bool() {\n            _classCallCheck(this, Bool);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Bool\n           */\n\n\n          _createClass(Bool, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Bool= obj\n             * @returns Bool\n             */\n\n          }], [{\n            key: \"getRootAsBool\",\n            value: function getRootAsBool(bb, obj) {\n              return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }, {\n            key: \"startBool\",\n            value: function startBool(builder) {\n              builder.startObject(0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endBool\",\n            value: function endBool(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createBool\",\n            value: function createBool(builder) {\n              Bool.startBool(builder);\n              return Bool.endBool(builder);\n            }\n          }]);\n\n          return Bool;\n        }();\n\n        flatbuf.Bool = Bool;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Decimal = /*#__PURE__*/function () {\n          function Decimal() {\n            _classCallCheck(this, Decimal);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Decimal\n           */\n\n\n          _createClass(Decimal, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Decimal= obj\n             * @returns Decimal\n             */\n\n          }, {\n            key: \"precision\",\n            value:\n            /**\n             * Total number of decimal digits\n             *\n             * @returns number\n             */\n            function precision() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * Number of digits after the decimal point \".\"\n             *\n             * @returns number\n             */\n\n          }, {\n            key: \"scale\",\n            value: function scale() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDecimal\",\n            value: function getRootAsDecimal(bb, obj) {\n              return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDecimal\",\n            value: function startDecimal(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number precision\n             */\n\n          }, {\n            key: \"addPrecision\",\n            value: function addPrecision(builder, precision) {\n              builder.addFieldInt32(0, precision, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number scale\n             */\n\n          }, {\n            key: \"addScale\",\n            value: function addScale(builder, scale) {\n              builder.addFieldInt32(1, scale, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDecimal\",\n            value: function endDecimal(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDecimal\",\n            value: function createDecimal(builder, precision, scale) {\n              Decimal.startDecimal(builder);\n              Decimal.addPrecision(builder, precision);\n              Decimal.addScale(builder, scale);\n              return Decimal.endDecimal(builder);\n            }\n          }]);\n\n          return Decimal;\n        }();\n\n        flatbuf.Decimal = Decimal;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Date = /*#__PURE__*/function () {\n          function Date() {\n            _classCallCheck(this, Date);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Date\n           */\n\n\n          _createClass(Date, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Date= obj\n             * @returns Date\n             */\n\n          }, {\n            key: \"unit\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.DateUnit\n             */\n            function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDate\",\n            value: function getRootAsDate(bb, obj) {\n              return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDate\",\n            value: function startDate(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.DateUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDate\",\n            value: function endDate(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDate\",\n            value: function createDate(builder, unit) {\n              Date.startDate(builder);\n              Date.addUnit(builder, unit);\n              return Date.endDate(builder);\n            }\n          }]);\n\n          return Date;\n        }();\n\n        flatbuf.Date = Date;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Time = /*#__PURE__*/function () {\n          function Time() {\n            _classCallCheck(this, Time);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Time\n           */\n\n\n          _createClass(Time, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Time= obj\n             * @returns Time\n             */\n\n          }, {\n            key: \"unit\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.TimeUnit\n             */\n            function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"bitWidth\",\n            value: function bitWidth() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsTime\",\n            value: function getRootAsTime(bb, obj) {\n              return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startTime\",\n            value: function startTime(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.TimeUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number bitWidth\n             */\n\n          }, {\n            key: \"addBitWidth\",\n            value: function addBitWidth(builder, bitWidth) {\n              builder.addFieldInt32(1, bitWidth, 32);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endTime\",\n            value: function endTime(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createTime\",\n            value: function createTime(builder, unit, bitWidth) {\n              Time.startTime(builder);\n              Time.addUnit(builder, unit);\n              Time.addBitWidth(builder, bitWidth);\n              return Time.endTime(builder);\n            }\n          }]);\n\n          return Time;\n        }();\n\n        flatbuf.Time = Time;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Timestamp = /*#__PURE__*/function () {\n          function Timestamp() {\n            _classCallCheck(this, Timestamp);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Timestamp\n           */\n\n\n          _createClass(Timestamp, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Timestamp= obj\n             * @returns Timestamp\n             */\n\n          }, {\n            key: \"unit\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.TimeUnit\n             */\n            function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n            }\n          }, {\n            key: \"timezone\",\n            value: function timezone(optionalEncoding) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsTimestamp\",\n            value: function getRootAsTimestamp(bb, obj) {\n              return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startTimestamp\",\n            value: function startTimestamp(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.TimeUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset timezoneOffset\n             */\n\n          }, {\n            key: \"addTimezone\",\n            value: function addTimezone(builder, timezoneOffset) {\n              builder.addFieldOffset(1, timezoneOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endTimestamp\",\n            value: function endTimestamp(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createTimestamp\",\n            value: function createTimestamp(builder, unit, timezoneOffset) {\n              Timestamp.startTimestamp(builder);\n              Timestamp.addUnit(builder, unit);\n              Timestamp.addTimezone(builder, timezoneOffset);\n              return Timestamp.endTimestamp(builder);\n            }\n          }]);\n\n          return Timestamp;\n        }();\n\n        flatbuf.Timestamp = Timestamp;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Interval = /*#__PURE__*/function () {\n          function Interval() {\n            _classCallCheck(this, Interval);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Interval\n           */\n\n\n          _createClass(Interval, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Interval= obj\n             * @returns Interval\n             */\n\n          }, {\n            key: \"unit\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.IntervalUnit\n             */\n            function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsInterval\",\n            value: function getRootAsInterval(bb, obj) {\n              return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startInterval\",\n            value: function startInterval(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.IntervalUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endInterval\",\n            value: function endInterval(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createInterval\",\n            value: function createInterval(builder, unit) {\n              Interval.startInterval(builder);\n              Interval.addUnit(builder, unit);\n              return Interval.endInterval(builder);\n            }\n          }]);\n\n          return Interval;\n        }();\n\n        flatbuf.Interval = Interval;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Duration = /*#__PURE__*/function () {\n          function Duration() {\n            _classCallCheck(this, Duration);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Duration\n           */\n\n\n          _createClass(Duration, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Duration= obj\n             * @returns Duration\n             */\n\n          }, {\n            key: \"unit\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.TimeUnit\n             */\n            function unit() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDuration\",\n            value: function getRootAsDuration(bb, obj) {\n              return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDuration\",\n            value: function startDuration(builder) {\n              builder.startObject(1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.TimeUnit unit\n             */\n\n          }, {\n            key: \"addUnit\",\n            value: function addUnit(builder, unit) {\n              builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDuration\",\n            value: function endDuration(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDuration\",\n            value: function createDuration(builder, unit) {\n              Duration.startDuration(builder);\n              Duration.addUnit(builder, unit);\n              return Duration.endDuration(builder);\n            }\n          }]);\n\n          return Duration;\n        }();\n\n        flatbuf.Duration = Duration;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var KeyValue = /*#__PURE__*/function () {\n          function KeyValue() {\n            _classCallCheck(this, KeyValue);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns KeyValue\n           */\n\n\n          _createClass(KeyValue, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param KeyValue= obj\n             * @returns KeyValue\n             */\n\n          }, {\n            key: \"key\",\n            value: function key(optionalEncoding) {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n            }\n          }, {\n            key: \"value\",\n            value: function value(optionalEncoding) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsKeyValue\",\n            value: function getRootAsKeyValue(bb, obj) {\n              return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startKeyValue\",\n            value: function startKeyValue(builder) {\n              builder.startObject(2);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset keyOffset\n             */\n\n          }, {\n            key: \"addKey\",\n            value: function addKey(builder, keyOffset) {\n              builder.addFieldOffset(0, keyOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset valueOffset\n             */\n\n          }, {\n            key: \"addValue\",\n            value: function addValue(builder, valueOffset) {\n              builder.addFieldOffset(1, valueOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endKeyValue\",\n            value: function endKeyValue(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createKeyValue\",\n            value: function createKeyValue(builder, keyOffset, valueOffset) {\n              KeyValue.startKeyValue(builder);\n              KeyValue.addKey(builder, keyOffset);\n              KeyValue.addValue(builder, valueOffset);\n              return KeyValue.endKeyValue(builder);\n            }\n          }]);\n\n          return KeyValue;\n        }();\n\n        flatbuf.KeyValue = KeyValue;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var DictionaryEncoding = /*#__PURE__*/function () {\n          function DictionaryEncoding() {\n            _classCallCheck(this, DictionaryEncoding);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryEncoding\n           */\n\n\n          _createClass(DictionaryEncoding, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param DictionaryEncoding= obj\n             * @returns DictionaryEncoding\n             */\n\n          }, {\n            key: \"id\",\n            value:\n            /**\n             * The known dictionary id in the application where this data is used. In\n             * the file or streaming formats, the dictionary ids are found in the\n             * DictionaryBatch messages\n             *\n             * @returns flatbuffers.Long\n             */\n            function id() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * The dictionary indices are constrained to be positive integers. If this\n             * field is null, the indices must be signed int32\n             *\n             * @param org.apache.arrow.flatbuf.Int= obj\n             * @returns org.apache.arrow.flatbuf.Int|null\n             */\n\n          }, {\n            key: \"indexType\",\n            value: function indexType(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n            }\n            /**\n             * By default, dictionaries are not ordered, or the order does not have\n             * semantic meaning. In some statistical, applications, dictionary-encoding\n             * is used to represent ordered categorical data, and we provide a way to\n             * preserve that metadata here\n             *\n             * @returns boolean\n             */\n\n          }, {\n            key: \"isOrdered\",\n            value: function isOrdered() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsDictionaryEncoding\",\n            value: function getRootAsDictionaryEncoding(bb, obj) {\n              return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDictionaryEncoding\",\n            value: function startDictionaryEncoding(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long id\n             */\n\n          }, {\n            key: \"addId\",\n            value: function addId(builder, id) {\n              builder.addFieldInt64(0, id, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset indexTypeOffset\n             */\n\n          }, {\n            key: \"addIndexType\",\n            value: function addIndexType(builder, indexTypeOffset) {\n              builder.addFieldOffset(1, indexTypeOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean isOrdered\n             */\n\n          }, {\n            key: \"addIsOrdered\",\n            value: function addIsOrdered(builder, isOrdered) {\n              builder.addFieldInt8(2, +isOrdered, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endDictionaryEncoding\",\n            value: function endDictionaryEncoding(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDictionaryEncoding\",\n            value: function createDictionaryEncoding(builder, id, indexTypeOffset, isOrdered) {\n              DictionaryEncoding.startDictionaryEncoding(builder);\n              DictionaryEncoding.addId(builder, id);\n              DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n              DictionaryEncoding.addIsOrdered(builder, isOrdered);\n              return DictionaryEncoding.endDictionaryEncoding(builder);\n            }\n          }]);\n\n          return DictionaryEncoding;\n        }();\n\n        flatbuf.DictionaryEncoding = DictionaryEncoding;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Field = /*#__PURE__*/function () {\n          function Field() {\n            _classCallCheck(this, Field);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Field\n           */\n\n\n          _createClass(Field, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Field= obj\n             * @returns Field\n             */\n\n          }, {\n            key: \"name\",\n            value: function name(optionalEncoding) {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n            }\n            /**\n             * Whether or not this field can contain nulls. Should be true in general.\n             *\n             * @returns boolean\n             */\n\n          }, {\n            key: \"nullable\",\n            value: function nullable() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @returns org.apache.arrow.flatbuf.Type\n             */\n\n          }, {\n            key: \"typeType\",\n            value: function typeType() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ?\n              /**  */\n              this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.Type.NONE;\n            }\n            /**\n             * This is the type of the decoded value if the field is dictionary encoded.\n             *\n             * @param flatbuffers.Table obj\n             * @returns ?flatbuffers.Table\n             */\n\n          }, {\n            key: \"type\",\n            value: function type(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 10);\n\n              return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n            }\n            /**\n             * Present only if the field is dictionary encoded.\n             *\n             * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n             * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n             */\n\n          }, {\n            key: \"dictionary\",\n            value: function dictionary(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 12);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n            }\n            /**\n             * children apply only to nested data types like Struct, List and Union. For\n             * primitive types children will have length 0.\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.Field= obj\n             * @returns org.apache.arrow.flatbuf.Field\n             */\n\n          }, {\n            key: \"children\",\n            value: function children(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 14);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"childrenLength\",\n            value: function childrenLength() {\n              var offset = this.bb.__offset(this.bb_pos, 14);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * User-defined metadata\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.KeyValue= obj\n             * @returns org.apache.arrow.flatbuf.KeyValue\n             */\n\n          }, {\n            key: \"customMetadata\",\n            value: function customMetadata(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 16);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"customMetadataLength\",\n            value: function customMetadataLength() {\n              var offset = this.bb.__offset(this.bb_pos, 16);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsField\",\n            value: function getRootAsField(bb, obj) {\n              return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startField\",\n            value: function startField(builder) {\n              builder.startObject(7);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset nameOffset\n             */\n\n          }, {\n            key: \"addName\",\n            value: function addName(builder, nameOffset) {\n              builder.addFieldOffset(0, nameOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean nullable\n             */\n\n          }, {\n            key: \"addNullable\",\n            value: function addNullable(builder, nullable) {\n              builder.addFieldInt8(1, +nullable, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.Type typeType\n             */\n\n          }, {\n            key: \"addTypeType\",\n            value: function addTypeType(builder, typeType) {\n              builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset typeOffset\n             */\n\n          }, {\n            key: \"addType\",\n            value: function addType(builder, typeOffset) {\n              builder.addFieldOffset(3, typeOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset dictionaryOffset\n             */\n\n          }, {\n            key: \"addDictionary\",\n            value: function addDictionary(builder, dictionaryOffset) {\n              builder.addFieldOffset(4, dictionaryOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset childrenOffset\n             */\n\n          }, {\n            key: \"addChildren\",\n            value: function addChildren(builder, childrenOffset) {\n              builder.addFieldOffset(5, childrenOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createChildrenVector\",\n            value: function createChildrenVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startChildrenVector\",\n            value: function startChildrenVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset customMetadataOffset\n             */\n\n          }, {\n            key: \"addCustomMetadata\",\n            value: function addCustomMetadata(builder, customMetadataOffset) {\n              builder.addFieldOffset(6, customMetadataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createCustomMetadataVector\",\n            value: function createCustomMetadataVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startCustomMetadataVector\",\n            value: function startCustomMetadataVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endField\",\n            value: function endField(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createField\",\n            value: function createField(builder, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {\n              Field.startField(builder);\n              Field.addName(builder, nameOffset);\n              Field.addNullable(builder, nullable);\n              Field.addTypeType(builder, typeType);\n              Field.addType(builder, typeOffset);\n              Field.addDictionary(builder, dictionaryOffset);\n              Field.addChildren(builder, childrenOffset);\n              Field.addCustomMetadata(builder, customMetadataOffset);\n              return Field.endField(builder);\n            }\n          }]);\n\n          return Field;\n        }();\n\n        flatbuf.Field = Field;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Buffer = /*#__PURE__*/function () {\n          function Buffer() {\n            _classCallCheck(this, Buffer);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Buffer\n           */\n\n\n          _createClass(Buffer, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * The relative offset into the shared memory page where the bytes for this\n             * buffer starts\n             *\n             * @returns flatbuffers.Long\n             */\n\n          }, {\n            key: \"offset\",\n            value: function offset() {\n              return this.bb.readInt64(this.bb_pos);\n            }\n            /**\n             * The absolute length (in bytes) of the memory buffer. The memory is found\n             * from offset (inclusive) to offset + length (non-inclusive).\n             *\n             * @returns flatbuffers.Long\n             */\n\n          }, {\n            key: \"length\",\n            value: function length() {\n              return this.bb.readInt64(this.bb_pos + 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long offset\n             * @param flatbuffers.Long length\n             * @returns flatbuffers.Offset\n             */\n\n          }], [{\n            key: \"createBuffer\",\n            value: function createBuffer(builder, offset, length) {\n              builder.prep(8, 16);\n              builder.writeInt64(length);\n              builder.writeInt64(offset);\n              return builder.offset();\n            }\n          }]);\n\n          return Buffer;\n        }();\n\n        flatbuf.Buffer = Buffer;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        var Schema = /*#__PURE__*/function () {\n          function Schema() {\n            _classCallCheck(this, Schema);\n\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Schema\n           */\n\n\n          _createClass(Schema, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Schema= obj\n             * @returns Schema\n             */\n\n          }, {\n            key: \"endianness\",\n            value:\n            /**\n             * endianness of the buffer\n             * it is Little Endian by default\n             * if endianness doesn't match the underlying system then the vectors need to be converted\n             *\n             * @returns org.apache.arrow.flatbuf.Endianness\n             */\n            function endianness() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n\n              return offset ?\n              /**  */\n              this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Endianness.Little;\n            }\n            /**\n             * @param number index\n             * @param org.apache.arrow.flatbuf.Field= obj\n             * @returns org.apache.arrow.flatbuf.Field\n             */\n\n          }, {\n            key: \"fields\",\n            value: function fields(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"fieldsLength\",\n            value: function fieldsLength() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param number index\n             * @param org.apache.arrow.flatbuf.KeyValue= obj\n             * @returns org.apache.arrow.flatbuf.KeyValue\n             */\n\n          }, {\n            key: \"customMetadata\",\n            value: function customMetadata(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n\n          }, {\n            key: \"customMetadataLength\",\n            value: function customMetadataLength() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n\n          }], [{\n            key: \"getRootAsSchema\",\n            value: function getRootAsSchema(bb, obj) {\n              return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startSchema\",\n            value: function startSchema(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.Endianness endianness\n             */\n\n          }, {\n            key: \"addEndianness\",\n            value: function addEndianness(builder, endianness) {\n              builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset fieldsOffset\n             */\n\n          }, {\n            key: \"addFields\",\n            value: function addFields(builder, fieldsOffset) {\n              builder.addFieldOffset(1, fieldsOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createFieldsVector\",\n            value: function createFieldsVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startFieldsVector\",\n            value: function startFieldsVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset customMetadataOffset\n             */\n\n          }, {\n            key: \"addCustomMetadata\",\n            value: function addCustomMetadata(builder, customMetadataOffset) {\n              builder.addFieldOffset(2, customMetadataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"createCustomMetadataVector\",\n            value: function createCustomMetadataVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n\n          }, {\n            key: \"startCustomMetadataVector\",\n            value: function startCustomMetadataVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n\n          }, {\n            key: \"endSchema\",\n            value: function endSchema(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset offset\n             */\n\n          }, {\n            key: \"finishSchemaBuffer\",\n            value: function finishSchemaBuffer(builder, offset) {\n              builder.finish(offset);\n            }\n          }, {\n            key: \"createSchema\",\n            value: function createSchema(builder, endianness, fieldsOffset, customMetadataOffset) {\n              Schema.startSchema(builder);\n              Schema.addEndianness(builder, endianness);\n              Schema.addFields(builder, fieldsOffset);\n              Schema.addCustomMetadata(builder, customMetadataOffset);\n              return Schema.endSchema(builder);\n            }\n          }]);\n\n          return Schema;\n        }();\n\n        flatbuf.Schema = Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"mappings":"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","names":["org","MetadataVersion","flatbuf","arrow","apache","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","i","bb","bb_pos","obj","__init","readInt32","position","builder","startObject","offset","endObject","startNull","endNull","Struct_","startStruct_","endStruct_","List","startList","endList","LargeList","startLargeList","endLargeList","FixedSizeList","__offset","listSize","addFieldInt32","startFixedSizeList","addListSize","endFixedSizeList","Map","readInt8","keysSorted","addFieldInt8","startMap","addKeysSorted","endMap","Union","readInt16","Sparse","index","__vector","__vector_len","Int32Array","bytes","buffer","byteOffset","mode","addFieldInt16","typeIdsOffset","addFieldOffset","data","startVector","length","addInt32","endVector","numElems","startUnion","addMode","addTypeIds","endUnion","Int","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","startUtf8","endUtf8","Binary","startBinary","endBinary","LargeUtf8","startLargeUtf8","endLargeUtf8","LargeBinary","startLargeBinary","endLargeBinary","FixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","startBool","endBool","Decimal","scale","startDecimal","addScale","endDecimal","Date","MILLISECOND","unit","startDate","addUnit","endDate","Time","startTime","endTime","Timestamp","SECOND","optionalEncoding","__string","timezoneOffset","startTimestamp","addTimezone","endTimestamp","Interval","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","readInt64","createLong","__indirect","id","addFieldInt64","indexTypeOffset","isOrdered","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","Field","readUint8","NONE","__union","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","addOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Buffer","prep","writeInt64","Schema","Little","endianness","fieldsOffset","finish","startSchema","addEndianness","addFields","endSchema"],"sources":["fb/Schema.ts"],"sourcesContent":["/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}