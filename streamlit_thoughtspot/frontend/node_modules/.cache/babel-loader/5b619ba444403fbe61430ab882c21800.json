{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\n/** @ignore */\n\nexport class VectorLoader extends Visitor {\n  constructor(bytes, nodes, buffers, dictionaries) {\n    super();\n    this.nodesIndex = -1;\n    this.buffersIndex = -1;\n    this.bytes = bytes;\n    this.nodes = nodes;\n    this.buffers = buffers;\n    this.dictionaries = dictionaries;\n  }\n\n  visit(node) {\n    return super.visit(node instanceof Field ? node.type : node);\n  }\n\n  visitNull(type) {\n    let {\n      length\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Null(type, 0, length);\n  }\n\n  visitBool(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitInt(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitFloat(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitUtf8(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n  }\n\n  visitBinary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n  }\n\n  visitFixedSizeBinary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitDate(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitTimestamp(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitTime(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitDecimal(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitList(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n  }\n\n  visitStruct(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));\n  }\n\n  visitUnion(type) {\n    return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n  }\n\n  visitDenseUnion(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));\n  }\n\n  visitSparseUnion(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));\n  }\n\n  visitDictionary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));\n  }\n\n  visitInterval(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitFixedSizeList(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));\n  }\n\n  visitMap(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n  }\n\n  nextFieldNode() {\n    return this.nodes[++this.nodesIndex];\n  }\n\n  nextBufferRange() {\n    return this.buffers[++this.buffersIndex];\n  }\n\n  readNullBitmap(type, nullCount) {\n    let buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n    return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n  }\n\n  readOffsets(type, buffer) {\n    return this.readData(type, buffer);\n  }\n\n  readTypeIds(type, buffer) {\n    return this.readData(type, buffer);\n  }\n\n  readData(_type) {\n    let {\n      length,\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return this.bytes.subarray(offset, offset + length);\n  }\n\n  readDictionary(type) {\n    return this.dictionaries.get(type.id);\n  }\n\n}\n/** @ignore */\n\nexport class JSONVectorLoader extends VectorLoader {\n  constructor(sources, nodes, buffers, dictionaries) {\n    super(new Uint8Array(0), nodes, buffers, dictionaries);\n    this.sources = sources;\n  }\n\n  readNullBitmap(_type, nullCount) {\n    let {\n      offset\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n    return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n  }\n\n  readOffsets(_type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n  }\n\n  readTypeIds(type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n  }\n\n  readData(type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    const {\n      sources\n    } = this;\n\n    if (DataType.isTimestamp(type)) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDecimal(type)) {\n      return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n    } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n      return binaryDataFromJSON(sources[offset]);\n    } else if (DataType.isBool(type)) {\n      return packBools(sources[offset]);\n    } else if (DataType.isUtf8(type)) {\n      return encodeUtf8(sources[offset].join(''));\n    }\n\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map(x => +x)));\n  }\n\n}\n/** @ignore */\n\nfunction binaryDataFromJSON(values) {\n  // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n  // There are definitely more efficient ways to do this... but it gets the\n  // job done.\n  const joined = values.join('');\n  const data = new Uint8Array(joined.length / 2);\n\n  for (let i = 0; i < joined.length; i += 2) {\n    data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n  }\n\n  return data;\n}","map":{"version":3,"mappings":"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","names":["Data","Field","DataType","Visitor","packBools","encodeUtf8","Int64","Int128","UnionMode","DateUnit","toArrayBufferView","VectorLoader","constructor","bytes","nodes","buffers","dictionaries","visit","node","type","visitNull","length","nextFieldNode","Null","visitBool","nullCount","Bool","readNullBitmap","readData","visitInt","Int","visitFloat","Float","visitUtf8","Utf8","readOffsets","visitBinary","Binary","visitFixedSizeBinary","FixedSizeBinary","visitDate","Date","visitTimestamp","Timestamp","visitTime","Time","visitDecimal","Decimal","visitList","List","children","visitStruct","Struct","visitMany","visitUnion","mode","Sparse","visitSparseUnion","visitDenseUnion","Union","readTypeIds","visitDictionary","Dictionary","indices","readDictionary","visitInterval","Interval","visitFixedSizeList","FixedSizeList","visitMap","Map","nodesIndex","nextBufferRange","buffersIndex","buffer","Uint8Array","_type","offset","subarray","get","id","JSONVectorLoader","sources","Int32Array","ArrayType","isTimestamp","convertArray","isInt","isTime","bitWidth","isDate","unit","MILLISECOND","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","join","map","x","values","joined","data","i","parseInt","substr"],"sources":["visitor/vectorloader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}