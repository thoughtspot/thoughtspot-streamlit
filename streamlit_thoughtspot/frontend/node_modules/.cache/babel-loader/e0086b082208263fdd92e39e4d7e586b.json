{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/src/ThoughtspotComponent.tsx\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { SearchEmbed, AuthType, init } from '@thoughtspot/visual-embed-sdk';\nimport React, { useEffect } from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nfunction ThoughtspotSearchComponent(_ref) {\n  let {\n    args\n  } = _ref;\n  let host = args[\"host\"];\n  let sso = args[\"sso\"];\n  let height = Object.keys(args).includes(\"height\") ? args[\"height\"] : 600;\n  let width = Object.keys(args).includes(\"width\") ? args[\"width\"] : 1000;\n  Streamlit.setFrameHeight(height);\n  init({\n    thoughtSpotHost: host,\n    authType: sso ? AuthType.SAML : AuthType.None\n  });\n  useEffect(() => {\n    var element = document.getElementById('ts-embed');\n    const searchEmbed = new SearchEmbed(element, {\n      frameParams: {\n        width: width + \"px\",\n        height: height + \"px\"\n      }\n    });\n    searchEmbed.render();\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: width + \"px\",\n      height: height + \"px\"\n    },\n    id: \"ts-embed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"TS Embed\");\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(ThoughtspotSearchComponent);","map":{"version":3,"names":["Streamlit","withStreamlitConnection","SearchEmbed","AuthType","init","React","useEffect","ThoughtspotSearchComponent","args","host","sso","height","Object","keys","includes","width","setFrameHeight","thoughtSpotHost","authType","SAML","None","element","document","getElementById","searchEmbed","frameParams","render"],"sources":["/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/src/ThoughtspotComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps\n} from \"streamlit-component-lib\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent\n}\nfrom '@thoughtspot/visual-embed-sdk';\nimport React, {useEffect, ReactElement, ReactNode} from \"react\"\n\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\n\n function ThoughtspotSearchComponent({args}: ComponentProps): ReactElement {\n\n  let host = args[\"host\"];\n  let sso = args[\"sso\"];\n  let height = Object.keys(args).includes(\"height\") ? args[\"height\"] : 600\n  let width = Object.keys(args).includes(\"width\") ? args[\"width\"] : 1000\n\n  Streamlit.setFrameHeight(height)\n\n  \n  init({\n    thoughtSpotHost: host,\n    authType: sso ? AuthType.SAML : AuthType.None,\n  });\n\n  useEffect(()=>{\n      var element : any =  document.getElementById('ts-embed');\n      const searchEmbed = new SearchEmbed(element, {\n        frameParams: {\n            width: width+\"px\",\n            height: height+\"px\",\n        },\n      });\n      searchEmbed.render()\n    })\n    return (\n      <div style={{width:width+\"px\",height:height+\"px\"}} id=\"ts-embed\">\n        TS Embed\n      </div>  \n    )\n }\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ThoughtspotSearchComponent)\n"],"mappings":";AAAA,SACEA,SADF,EAGEC,uBAHF,QAKO,yBALP;AAMA,SACEC,WADF,EAEEC,QAFF,EAGEC,IAHF,QAQK,+BARL;AASA,OAAOC,KAAP,IAAeC,SAAf,QAAwD,OAAxD;;AAQA;AACA;AACA;AACA;AAGC,SAASC,0BAAT,OAA0E;EAAA,IAAtC;IAACC;EAAD,CAAsC;EAEzE,IAAIC,IAAI,GAAGD,IAAI,CAAC,MAAD,CAAf;EACA,IAAIE,GAAG,GAAGF,IAAI,CAAC,KAAD,CAAd;EACA,IAAIG,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,QAAlB,CAA2B,QAA3B,IAAuCN,IAAI,CAAC,QAAD,CAA3C,GAAwD,GAArE;EACA,IAAIO,KAAK,GAAGH,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,QAAlB,CAA2B,OAA3B,IAAsCN,IAAI,CAAC,OAAD,CAA1C,GAAsD,IAAlE;EAEAR,SAAS,CAACgB,cAAV,CAAyBL,MAAzB;EAGAP,IAAI,CAAC;IACHa,eAAe,EAAER,IADd;IAEHS,QAAQ,EAAER,GAAG,GAAGP,QAAQ,CAACgB,IAAZ,GAAmBhB,QAAQ,CAACiB;EAFtC,CAAD,CAAJ;EAKAd,SAAS,CAAC,MAAI;IACV,IAAIe,OAAa,GAAIC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAArB;IACA,MAAMC,WAAW,GAAG,IAAItB,WAAJ,CAAgBmB,OAAhB,EAAyB;MAC3CI,WAAW,EAAE;QACTV,KAAK,EAAEA,KAAK,GAAC,IADJ;QAETJ,MAAM,EAAEA,MAAM,GAAC;MAFN;IAD8B,CAAzB,CAApB;IAMAa,WAAW,CAACE,MAAZ;EACD,CATM,CAAT;EAUE,oBACE;IAAK,KAAK,EAAE;MAACX,KAAK,EAACA,KAAK,GAAC,IAAb;MAAkBJ,MAAM,EAACA,MAAM,GAAC;IAAhC,CAAZ;IAAmD,EAAE,EAAC,UAAtD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cADF;AAKF,C,CAEF;AACA;AACA;AACA;AACA;;;AACA,eAAeV,uBAAuB,CAACM,0BAAD,CAAtC"},"metadata":{},"sourceType":"module"}