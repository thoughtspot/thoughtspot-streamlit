{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { AsyncByteStream } from '../../io/stream';\n/** @ignore */\n\nexport function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {\n  const writer = new this(writableStrategy);\n  const reader = new AsyncByteStream(writer);\n  const readable = new ReadableStream({\n    type: 'bytes',\n\n    async cancel() {\n      await reader.cancel();\n    },\n\n    async pull(controller) {\n      await next(controller);\n    },\n\n    async start(controller) {\n      await next(controller);\n    }\n\n  }, {\n    'highWaterMark': 2 ** 14,\n    ...readableStrategy\n  });\n  return {\n    writable: new WritableStream(writer, writableStrategy),\n    readable\n  };\n\n  async function next(controller) {\n    let buf = null;\n    let size = controller.desiredSize;\n\n    while (buf = await reader.read(size || null)) {\n      controller.enqueue(buf);\n\n      if (size != null && (size -= buf.byteLength) <= 0) {\n        return;\n      }\n    }\n\n    controller.close();\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAASA,eAAT,QAAgC,iBAAhC;AAGA;;AACA,OAAM,SAAUC,iCAAV,CAEFC,gBAFE,EAGFC,gBAHE,EAGuD;EAGzD,MAAMC,MAAM,GAAG,IAAI,IAAJ,CAAYF,gBAAZ,CAAf;EACA,MAAMG,MAAM,GAAG,IAAIL,eAAJ,CAAoBI,MAApB,CAAf;EACA,MAAME,QAAQ,GAAG,IAAIC,cAAJ,CAAmB;IAChCC,IAAI,EAAE,OAD0B;;IAEhC,MAAMC,MAAN,GAAY;MAAK,MAAMJ,MAAM,CAACI,MAAP,EAAN;IAAwB,CAFT;;IAGhC,MAAMC,IAAN,CAAWC,UAAX,EAAqB;MAAI,MAAMC,IAAI,CAACD,UAAD,CAAV;IAAyB,CAHlB;;IAIhC,MAAME,KAAN,CAAYF,UAAZ,EAAsB;MAAI,MAAMC,IAAI,CAACD,UAAD,CAAV;IAAyB;;EAJnB,CAAnB,EAKd;IAAE,iBAAiB,KAAK,EAAxB;IAA4B,GAAGR;EAA/B,CALc,CAAjB;EAOA,OAAO;IAAEW,QAAQ,EAAE,IAAIC,cAAJ,CAAmBX,MAAnB,EAA2BF,gBAA3B,CAAZ;IAA0DI;EAA1D,CAAP;;EAEA,eAAeM,IAAf,CAAoBD,UAApB,EAA2E;IACvE,IAAIK,GAAG,GAAsB,IAA7B;IACA,IAAIC,IAAI,GAAGN,UAAU,CAACO,WAAtB;;IACA,OAAOF,GAAG,GAAG,MAAMX,MAAM,CAACc,IAAP,CAAYF,IAAI,IAAI,IAApB,CAAnB,EAA8C;MAC1CN,UAAU,CAACS,OAAX,CAAmBJ,GAAnB;;MACA,IAAIC,IAAI,IAAI,IAAR,IAAgB,CAACA,IAAI,IAAID,GAAG,CAACK,UAAb,KAA4B,CAAhD,EAAmD;QAAE;MAAS;IACjE;;IACDV,UAAU,CAACW,KAAX;EACH;AACJ","names":["AsyncByteStream","recordBatchWriterThroughDOMStream","writableStrategy","readableStrategy","writer","reader","readable","ReadableStream","type","cancel","pull","controller","next","start","writable","WritableStream","buf","size","desiredSize","read","enqueue","byteLength","close"],"sources":["io/whatwg/writer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}