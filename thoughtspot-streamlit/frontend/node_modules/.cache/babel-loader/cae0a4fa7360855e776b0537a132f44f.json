{"ast":null,"code":"/* istanbul ignore file */\nimport { Visitor } from '../visitor';\nimport { TimeUnit } from '../enum';\n/** @ignore */\n\nconst sum = (x, y) => x + y;\n/** @ignore */\n\n\nconst variableWidthColumnErrorMessage = type => `Cannot compute the byte width of variable-width column ${type}`;\n/** @ignore */\n\n\nexport class ByteWidthVisitor extends Visitor {\n  visitNull(____) {\n    return 0;\n  }\n\n  visitInt(type) {\n    return type.bitWidth / 8;\n  }\n\n  visitFloat(type) {\n    return type.ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  visitBinary(type) {\n    throw new Error(variableWidthColumnErrorMessage(type));\n  }\n\n  visitUtf8(type) {\n    throw new Error(variableWidthColumnErrorMessage(type));\n  }\n\n  visitBool(____) {\n    return 1 / 8;\n  }\n\n  visitDecimal(____) {\n    return 16;\n  }\n\n  visitDate(type) {\n    return (type.unit + 1) * 4;\n  }\n\n  visitTime(type) {\n    return type.bitWidth / 8;\n  }\n\n  visitTimestamp(type) {\n    return type.unit === TimeUnit.SECOND ? 4 : 8;\n  }\n\n  visitInterval(type) {\n    return (type.unit + 1) * 4;\n  }\n\n  visitList(type) {\n    throw new Error(variableWidthColumnErrorMessage(type));\n  }\n\n  visitStruct(type) {\n    return this.visitFields(type.children).reduce(sum, 0);\n  }\n\n  visitUnion(type) {\n    return this.visitFields(type.children).reduce(sum, 0);\n  }\n\n  visitFixedSizeBinary(type) {\n    return type.byteWidth;\n  }\n\n  visitFixedSizeList(type) {\n    return type.listSize * this.visitFields(type.children).reduce(sum, 0);\n  }\n\n  visitMap(type) {\n    return this.visitFields(type.children).reduce(sum, 0);\n  }\n\n  visitDictionary(type) {\n    return this.visit(type.indices);\n  }\n\n  visitFields(fields) {\n    return (fields || []).map(field => this.visit(field.type));\n  }\n\n  visitSchema(schema) {\n    return this.visitFields(schema.fields).reduce(sum, 0);\n  }\n\n}\n/** @ignore */\n\nexport const instance = new ByteWidthVisitor();","map":{"version":3,"mappings":"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","names":["Visitor","TimeUnit","sum","x","y","variableWidthColumnErrorMessage","type","ByteWidthVisitor","visitNull","____","visitInt","bitWidth","visitFloat","ArrayType","BYTES_PER_ELEMENT","visitBinary","Error","visitUtf8","visitBool","visitDecimal","visitDate","unit","visitTime","visitTimestamp","SECOND","visitInterval","visitList","visitStruct","visitFields","children","reduce","visitUnion","visitFixedSizeBinary","byteWidth","visitFixedSizeList","listSize","visitMap","visitDictionary","visit","indices","fields","map","field","visitSchema","schema","instance"],"sources":["visitor/bytewidth.ts"],"sourcesContent":["/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n"]},"metadata":{},"sourceType":"module"}