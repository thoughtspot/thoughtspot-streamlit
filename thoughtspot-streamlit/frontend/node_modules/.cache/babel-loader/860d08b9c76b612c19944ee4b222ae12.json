{"ast":null,"code":"var _jsxFileName = \"/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/src/ThoughtspotSearchComponent.tsx\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { SearchEmbed, AuthType, init, LiveboardEmbed } from '@thoughtspot/visual-embed-sdk';\nimport React, { useEffect } from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nfunction ThoughtspotSearchComponent(_ref) {\n  let {\n    args\n  } = _ref;\n  let component = args[\"component\"];\n  let host = args[\"host\"];\n  let sso = Object.keys(args).includes(\"sso\") ? args[\"sso\"] : false;\n  let height = Object.keys(args).includes(\"height\") ? args[\"height\"] : 600;\n  let width = Object.keys(args).includes(\"width\") ? args[\"width\"] : 1000;\n  let dataSources = Object.keys(args).includes(\"datasources\") ? args[\"datasources\"] : [];\n  let searchString = Object.keys(args).includes(\"searchstring\") ? args[\"searchstring\"] : null;\n  let liveboardId = Object.keys(args).includes(\"liveboardid\") ? args[\"liveboardid\"] : null;\n  let vizId = Object.keys(args).includes(\"vizid\") ? args[\"vizid\"] : null;\n  Streamlit.setFrameHeight(height);\n  init({\n    thoughtSpotHost: host,\n    authType: sso ? AuthType.SAML : AuthType.None\n  });\n  useEffect(() => {\n    var element = document.getElementById('ts-embed');\n\n    if (component == \"search\") {\n      const searchEmbed = new SearchEmbed(element, {\n        searchOptions: {\n          searchTokenString: searchString,\n          executeSearch: true\n        },\n        dataSources: dataSources,\n        frameParams: {\n          width: width + \"px\",\n          height: height + \"px\"\n        }\n      });\n      searchEmbed.render();\n    } else {\n      const liveboardembed = new LiveboardEmbed(element, {\n        liveboardId: liveboardId,\n        vizId: vizId,\n        frameParams: {\n          width: width + \"px\",\n          height: height + \"px\"\n        }\n      });\n      liveboardembed.render();\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: width + \"px\",\n      height: height + \"px\"\n    },\n    id: \"ts-embed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"TS Embed\");\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(ThoughtspotSearchComponent);","map":{"version":3,"names":["Streamlit","withStreamlitConnection","SearchEmbed","AuthType","init","LiveboardEmbed","React","useEffect","ThoughtspotSearchComponent","args","component","host","sso","Object","keys","includes","height","width","dataSources","searchString","liveboardId","vizId","setFrameHeight","thoughtSpotHost","authType","SAML","None","element","document","getElementById","searchEmbed","searchOptions","searchTokenString","executeSearch","frameParams","render","liveboardembed"],"sources":["/Users/nathan.schroeder/Documents/dev/template/streamlit_thoughtspot/frontend/src/ThoughtspotSearchComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps\n} from \"streamlit-component-lib\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent,\n  LiveboardEmbed\n}\nfrom '@thoughtspot/visual-embed-sdk';\nimport React, {useEffect, ReactElement, ReactNode} from \"react\"\n\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\n\n function ThoughtspotSearchComponent({args}: ComponentProps): ReactElement {\n\n  let component = args[\"component\"]\n\n  let host = args[\"host\"];\n  let sso = Object.keys(args).includes(\"sso\") ? args[\"sso\"] : false\n  let height = Object.keys(args).includes(\"height\") ? args[\"height\"] : 600\n  let width = Object.keys(args).includes(\"width\") ? args[\"width\"] : 1000\n  let dataSources = Object.keys(args).includes(\"datasources\") ? args[\"datasources\"] : []\n  let searchString = Object.keys(args).includes(\"searchstring\") ? args[\"searchstring\"] : null\n\n  let liveboardId : string = Object.keys(args).includes(\"liveboardid\") ? args[\"liveboardid\"] : null\n  let vizId :string = Object.keys(args).includes(\"vizid\") ? args[\"vizid\"] : null\n\n  Streamlit.setFrameHeight(height)\n\n  \n  init({\n    thoughtSpotHost: host,\n    authType: sso ? AuthType.SAML : AuthType.None,\n  });\n\n  useEffect(()=>{\n    var element : any =  document.getElementById('ts-embed');\n\n    if (component == \"search\"){\n      const searchEmbed = new SearchEmbed(element, {\n        searchOptions:{\n          searchTokenString:searchString,\n          executeSearch:true\n        },\n        dataSources: dataSources,\n        frameParams: {\n            width: width+\"px\",\n            height: height+\"px\",\n        },\n      });\n      searchEmbed.render()\n    }else{\n      const liveboardembed = new LiveboardEmbed(element, {\n        liveboardId: liveboardId,\n        vizId: vizId,\n        frameParams: {\n            width: width+\"px\",\n            height: height+\"px\",\n        },\n      });\n      liveboardembed.render()\n    }\n\n    })\n    return (\n      <div style={{width:width+\"px\",height:height+\"px\"}} id=\"ts-embed\">\n        TS Embed\n      </div>  \n    )\n }\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ThoughtspotSearchComponent)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}