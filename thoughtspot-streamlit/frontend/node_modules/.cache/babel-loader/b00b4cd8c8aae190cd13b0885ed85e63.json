{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type';\n/**\n * @ignore\n * @private\n **/\n\nexport class Message {\n  constructor(bodyLength, version, headerType, header) {\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = () => header);\n    this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n  /** @nocollapse */\n\n\n  static fromJSON(msg, headerType) {\n    const message = new Message(0, MetadataVersion.V4, headerType);\n    message._createHeader = messageHeaderFromJSON(msg, headerType);\n    return message;\n  }\n  /** @nocollapse */\n\n\n  static decode(buf) {\n    buf = new ByteBuffer(toUint8Array(buf));\n\n    const _message = _Message.getRootAsMessage(buf);\n\n    const bodyLength = _message.bodyLength();\n\n    const version = _message.version();\n\n    const headerType = _message.headerType();\n\n    const message = new Message(bodyLength, version, headerType);\n    message._createHeader = decodeMessageHeader(_message, headerType);\n    return message;\n  }\n  /** @nocollapse */\n\n\n  static encode(message) {\n    let b = new Builder(),\n        headerOffset = -1;\n\n    if (message.isSchema()) {\n      headerOffset = Schema.encode(b, message.header());\n    } else if (message.isRecordBatch()) {\n      headerOffset = RecordBatch.encode(b, message.header());\n    } else if (message.isDictionaryBatch()) {\n      headerOffset = DictionaryBatch.encode(b, message.header());\n    }\n\n    _Message.startMessage(b);\n\n    _Message.addVersion(b, MetadataVersion.V4);\n\n    _Message.addHeader(b, headerOffset);\n\n    _Message.addHeaderType(b, message.headerType);\n\n    _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n\n    _Message.finishMessageBuffer(b, _Message.endMessage(b));\n\n    return b.asUint8Array();\n  }\n  /** @nocollapse */\n\n\n  static from(header) {\n    let bodyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (header instanceof Schema) {\n      return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n    }\n\n    if (header instanceof RecordBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n    }\n\n    if (header instanceof DictionaryBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n    }\n\n    throw new Error(`Unrecognized Message header: ${header}`);\n  }\n\n  get type() {\n    return this.headerType;\n  }\n\n  get version() {\n    return this._version;\n  }\n\n  get headerType() {\n    return this._headerType;\n  }\n\n  get bodyLength() {\n    return this._bodyLength;\n  }\n\n  header() {\n    return this._createHeader();\n  }\n\n  isSchema() {\n    return this.headerType === MessageHeader.Schema;\n  }\n\n  isRecordBatch() {\n    return this.headerType === MessageHeader.RecordBatch;\n  }\n\n  isDictionaryBatch() {\n    return this.headerType === MessageHeader.DictionaryBatch;\n  }\n\n}\n/**\n * @ignore\n * @private\n **/\n\nexport class RecordBatch {\n  get nodes() {\n    return this._nodes;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  get buffers() {\n    return this._buffers;\n  }\n\n  constructor(length, nodes, buffers) {\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = typeof length === 'number' ? length : length.low;\n  }\n\n}\n/**\n * @ignore\n * @private\n **/\n\nexport class DictionaryBatch {\n  get id() {\n    return this._id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  get isDelta() {\n    return this._isDelta;\n  }\n\n  get length() {\n    return this.data.length;\n  }\n\n  get nodes() {\n    return this.data.nodes;\n  }\n\n  get buffers() {\n    return this.data.buffers;\n  }\n\n  constructor(data, id) {\n    let isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = typeof id === 'number' ? id : id.low;\n  }\n\n}\n/**\n * @ignore\n * @private\n **/\n\nexport class BufferRegion {\n  constructor(offset, length) {\n    this.offset = typeof offset === 'number' ? offset : offset.low;\n    this.length = typeof length === 'number' ? length : length.low;\n  }\n\n}\n/**\n * @ignore\n * @private\n **/\n\nexport class FieldNode {\n  constructor(length, nullCount) {\n    this.length = typeof length === 'number' ? length : length.low;\n    this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n  }\n\n}\n/** @ignore */\n\nfunction messageHeaderFromJSON(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\n/** @ignore */\n\n\nfunction decodeMessageHeader(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\n\nfunction decodeSchema(_schema) {\n  let dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  const fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\n\n\nfunction decodeRecordBatch(batch) {\n  let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\n\n\nfunction decodeDictionaryBatch(batch) {\n  let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\n\n\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\n\n\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\n\n\nfunction decodeFieldNodes(batch) {\n  const nodes = [];\n\n  for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n\n  return nodes;\n}\n/** @ignore */\n\n\nfunction decodeBuffers(batch, version) {\n  const bufferRegions = [];\n\n  for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n\n  return bufferRegions;\n}\n/** @ignore */\n\n\nfunction decodeSchemaFields(schema, dictionaries) {\n  const fields = [];\n\n  for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n\n  return fields;\n}\n/** @ignore */\n\n\nfunction decodeFieldChildren(field, dictionaries) {\n  const children = [];\n\n  for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n\n  return children;\n}\n/** @ignore */\n\n\nfunction decodeField(f, dictionaries) {\n  let id;\n  let field;\n  let type;\n  let keys;\n  let dictType;\n  let dictMeta; // If no dictionary encoding\n\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  } // tslint:disable\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = dictMeta.id().low)) {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n    dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  } // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n  // data type and wrap in a new Dictionary type and field.\n  else {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n\n  return field || null;\n}\n/** @ignore */\n\n\nfunction decodeCustomMetadata(parent) {\n  const data = new Map();\n\n  if (parent) {\n    for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n\n  return data;\n}\n/** @ignore */\n\n\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\n\n\nfunction decodeFieldType(f, children) {\n  const typeId = f.typeType();\n\n  switch (typeId) {\n    case Type.NONE:\n      return new Null();\n\n    case Type.Null:\n      return new Null();\n\n    case Type.Binary:\n      return new Binary();\n\n    case Type.Utf8:\n      return new Utf8();\n\n    case Type.Bool:\n      return new Bool();\n\n    case Type.List:\n      return new List((children || [])[0]);\n\n    case Type.Struct_:\n      return new Struct(children || []);\n  }\n\n  switch (typeId) {\n    case Type.Int:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n\n    case Type.FloatingPoint:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n        return new Float(t.precision());\n      }\n\n    case Type.Decimal:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n        return new Decimal(t.scale(), t.precision());\n      }\n\n    case Type.Date:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n        return new Date_(t.unit());\n      }\n\n    case Type.Time:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n        return new Time(t.unit(), t.bitWidth());\n      }\n\n    case Type.Timestamp:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n        return new Timestamp(t.unit(), t.timezone());\n      }\n\n    case Type.Interval:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n        return new Interval(t.unit());\n      }\n\n    case Type.Union:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n        return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n      }\n\n    case Type.FixedSizeBinary:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n        return new FixedSizeBinary(t.byteWidth());\n      }\n\n    case Type.FixedSizeList:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n        return new FixedSizeList(t.listSize(), (children || [])[0]);\n      }\n\n    case Type.Map:\n      {\n        const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n        return new Map_((children || [])[0], t.keysSorted());\n      }\n  }\n\n  throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n/** @ignore */\n\n\nfunction encodeSchema(b, schema) {\n  const fieldOffsets = schema.fields.map(f => Field.encode(b, f));\n\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n\n  const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n  const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, [...schema.metadata].map(_ref => {\n    let [k, v] = _ref;\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n\n    _KeyValue.startKeyValue(b);\n\n    _KeyValue.addKey(b, key);\n\n    _KeyValue.addValue(b, val);\n\n    return _KeyValue.endKeyValue(b);\n  }));\n\n  _Schema.startSchema(b);\n\n  _Schema.addFields(b, fieldsVectorOffset);\n\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n\n  return _Schema.endSchema(b);\n}\n/** @ignore */\n\n\nfunction encodeField(b, field) {\n  let nameOffset = -1;\n  let typeOffset = -1;\n  let dictionaryOffset = -1;\n  let type = field.type;\n  let typeId = field.typeId;\n\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n\n  const childOffsets = (type.children || []).map(f => Field.encode(b, f));\n\n  const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n  const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, [...field.metadata].map(_ref2 => {\n    let [k, v] = _ref2;\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n\n    _KeyValue.startKeyValue(b);\n\n    _KeyValue.addKey(b, key);\n\n    _KeyValue.addValue(b, val);\n\n    return _KeyValue.endKeyValue(b);\n  }));\n\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n\n  _Field.startField(b);\n\n  _Field.addType(b, typeOffset);\n\n  _Field.addTypeType(b, typeId);\n\n  _Field.addChildren(b, childrenVectorOffset);\n\n  _Field.addNullable(b, !!field.nullable);\n\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n\n  return _Field.endField(b);\n}\n/** @ignore */\n\n\nfunction encodeRecordBatch(b, recordBatch) {\n  const nodes = recordBatch.nodes || [];\n  const buffers = recordBatch.buffers || [];\n\n  _RecordBatch.startNodesVector(b, nodes.length);\n\n  nodes.slice().reverse().forEach(n => FieldNode.encode(b, n));\n  const nodesVectorOffset = b.endVector();\n\n  _RecordBatch.startBuffersVector(b, buffers.length);\n\n  buffers.slice().reverse().forEach(b_ => BufferRegion.encode(b, b_));\n  const buffersVectorOffset = b.endVector();\n\n  _RecordBatch.startRecordBatch(b);\n\n  _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\n\n\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n\n  _DictionaryBatch.startDictionaryBatch(b);\n\n  _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n\n  _DictionaryBatch.addData(b, dataOffset);\n\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\n\n\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\n\n\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\n\n\nconst platformIsLittleEndian = function () {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true\n  /* littleEndian */\n  ); // Int16Array uses the platform's endianness.\n\n  return new Int16Array(buffer)[0] === 256;\n}();","map":{"version":3,"mappings":"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","names":["flatbuffers","Schema_","Message_","Schema","Field","toUint8Array","MessageHeader","MetadataVersion","instance","typeAssembler","fieldFromJSON","schemaFromJSON","recordBatchFromJSON","dictionaryBatchFromJSON","Long","Builder","ByteBuffer","Type","org","apache","arrow","flatbuf","_Field","_Schema","_Buffer","Buffer","_Message","Message","_KeyValue","KeyValue","_FieldNode","FieldNode","_Endianness","Endianness","_RecordBatch","RecordBatch","_DictionaryBatch","DictionaryBatch","DataType","Dictionary","Utf8","Binary","Decimal","FixedSizeBinary","List","FixedSizeList","Map_","Struct","Union","Bool","Null","Int","Float","Date_","Time","Interval","Timestamp","Int32","constructor","bodyLength","version","headerType","header","_version","_headerType","body","Uint8Array","_createHeader","_bodyLength","low","fromJSON","msg","message","V4","messageHeaderFromJSON","decode","buf","_message","getRootAsMessage","decodeMessageHeader","encode","b","headerOffset","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addVersion","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","asUint8Array","from","Error","type","nodes","_nodes","length","_length","buffers","_buffers","id","_id","data","_data","isDelta","_isDelta","BufferRegion","offset","nullCount","encodeField","decodeField","encodeSchema","decodeSchema","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","_schema","dictionaries","Map","fields","decodeSchemaFields","decodeCustomMetadata","batch","decodeFieldNodes","decodeBuffers","f","i","j","n","nodesLength","bufferRegions","buffersLength","bb_pos","schema","fieldsLength","decodeFieldChildren","field","children","childrenLength","keys","dictType","dictMeta","dictionary","decodeFieldType","name","nullable","has","indexType","decodeIndexType","set","isOrdered","get","parent","entry","key","customMetadataLength","customMetadata","value","_type","isSigned","bitWidth","typeId","typeType","NONE","Struct_","t","FloatingPoint","precision","scale","Date","unit","timezone","mode","typeIdsArray","byteWidth","listSize","keysSorted","fieldOffsets","map","startFieldsVector","fieldsVectorOffset","createFieldsVector","metadataOffset","metadata","size","createCustomMetadataVector","k","v","createString","val","startKeyValue","addKey","addValue","endKeyValue","startSchema","addFields","addEndianness","platformIsLittleEndian","Little","Big","addCustomMetadata","endSchema","nameOffset","typeOffset","dictionaryOffset","isDictionary","visit","childOffsets","childrenVectorOffset","createChildrenVector","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","endField","recordBatch","startNodesVector","slice","reverse","forEach","nodesVectorOffset","endVector","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","dictionaryBatch","dataOffset","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","node","createFieldNode","createBuffer","buffer","ArrayBuffer","DataView","setInt16","Int16Array"],"sources":["ipc/metadata/message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n"]},"metadata":{},"sourceType":"module"}