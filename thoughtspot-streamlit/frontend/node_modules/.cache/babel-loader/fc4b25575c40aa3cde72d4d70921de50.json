{"ast":null,"code":"/* tslint:disable:class-name */\n\n/**\n * @enum {number}\n */\nexport var org;\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let MetadataVersion;\n\n        (function (MetadataVersion) {\n          /**\n           * 0.1.0\n           */\n          MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n          /**\n           * 0.2.0\n           */\n\n          MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n          /**\n           * 0.3.0 -> 0.7.1\n           */\n\n          MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n          /**\n           * >= 0.8.0\n           */\n\n          MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n        })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let UnionMode;\n\n        (function (UnionMode) {\n          UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n          UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n        })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let Precision;\n\n        (function (Precision) {\n          Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n          Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n          Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n        })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let DateUnit;\n\n        (function (DateUnit) {\n          DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n          DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n        })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let TimeUnit;\n\n        (function (TimeUnit) {\n          TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n          TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n          TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n          TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n        })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let IntervalUnit;\n\n        (function (IntervalUnit) {\n          IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n          IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n        })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let Type;\n\n        (function (Type) {\n          Type[Type[\"NONE\"] = 0] = \"NONE\";\n          Type[Type[\"Null\"] = 1] = \"Null\";\n          Type[Type[\"Int\"] = 2] = \"Int\";\n          Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n          Type[Type[\"Binary\"] = 4] = \"Binary\";\n          Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n          Type[Type[\"Bool\"] = 6] = \"Bool\";\n          Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n          Type[Type[\"Date\"] = 8] = \"Date\";\n          Type[Type[\"Time\"] = 9] = \"Time\";\n          Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n          Type[Type[\"Interval\"] = 11] = \"Interval\";\n          Type[Type[\"List\"] = 12] = \"List\";\n          Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n          Type[Type[\"Union\"] = 14] = \"Union\";\n          Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n          Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n          Type[Type[\"Map\"] = 17] = \"Map\";\n          Type[Type[\"Duration\"] = 18] = \"Duration\";\n          Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n          Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n          Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n        })(Type = flatbuf.Type || (flatbuf.Type = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let Endianness;\n\n        (function (Endianness) {\n          Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n          Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n        })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Null {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Null\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Null= obj\n           * @returns Null\n           */\n\n\n          static getRootAsNull(bb, obj) {\n            return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startNull(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endNull(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createNull(builder) {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n          }\n\n        }\n\n        flatbuf.Null = Null;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Struct_ {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Struct_\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Struct_= obj\n           * @returns Struct_\n           */\n\n\n          static getRootAsStruct_(bb, obj) {\n            return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startStruct_(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endStruct_(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createStruct_(builder) {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n          }\n\n        }\n\n        flatbuf.Struct_ = Struct_;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class List {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns List\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param List= obj\n           * @returns List\n           */\n\n\n          static getRootAsList(bb, obj) {\n            return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startList(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createList(builder) {\n            List.startList(builder);\n            return List.endList(builder);\n          }\n\n        }\n\n        flatbuf.List = List;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class LargeList {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeList\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeList= obj\n           * @returns LargeList\n           */\n\n\n          static getRootAsLargeList(bb, obj) {\n            return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startLargeList(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endLargeList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createLargeList(builder) {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n          }\n\n        }\n\n        flatbuf.LargeList = LargeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class FixedSizeList {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeList\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FixedSizeList= obj\n           * @returns FixedSizeList\n           */\n\n\n          static getRootAsFixedSizeList(bb, obj) {\n            return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Number of list items per value\n           *\n           * @returns number\n           */\n\n\n          listSize() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startFixedSizeList(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number listSize\n           */\n\n\n          static addListSize(builder, listSize) {\n            builder.addFieldInt32(0, listSize, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endFixedSizeList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createFixedSizeList(builder, listSize) {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n          }\n\n        }\n\n        flatbuf.FixedSizeList = FixedSizeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Map {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Map\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Map= obj\n           * @returns Map\n           */\n\n\n          static getRootAsMap(bb, obj) {\n            return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Set to true if the keys within each value are sorted\n           *\n           * @returns boolean\n           */\n\n\n          keysSorted() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startMap(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean keysSorted\n           */\n\n\n          static addKeysSorted(builder, keysSorted) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endMap(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createMap(builder, keysSorted) {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n          }\n\n        }\n\n        flatbuf.Map = Map;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Union {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Union\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Union= obj\n           * @returns Union\n           */\n\n\n          static getRootAsUnion(bb, obj) {\n            return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.UnionMode\n           */\n\n\n          mode() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n          }\n          /**\n           * @param number index\n           * @returns number\n           */\n\n\n          typeIds(index) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n          }\n          /**\n           * @returns number\n           */\n\n\n          typeIdsLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @returns Int32Array\n           */\n\n\n          typeIdsArray() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startUnion(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.UnionMode mode\n           */\n\n\n          static addMode(builder, mode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset typeIdsOffset\n           */\n\n\n          static addTypeIds(builder, typeIdsOffset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<number> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createTypeIdsVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addInt32(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startTypeIdsVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endUnion(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createUnion(builder, mode, typeIdsOffset) {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n          }\n\n        }\n\n        flatbuf.Union = Union;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Int {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Int\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Int= obj\n           * @returns Int\n           */\n\n\n          static getRootAsInt(bb, obj) {\n            return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns number\n           */\n\n\n          bitWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @returns boolean\n           */\n\n\n          isSigned() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startInt(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number bitWidth\n           */\n\n\n          static addBitWidth(builder, bitWidth) {\n            builder.addFieldInt32(0, bitWidth, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isSigned\n           */\n\n\n          static addIsSigned(builder, isSigned) {\n            builder.addFieldInt8(1, +isSigned, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endInt(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createInt(builder, bitWidth, isSigned) {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n          }\n\n        }\n\n        flatbuf.Int = Int;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class FloatingPoint {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FloatingPoint\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FloatingPoint= obj\n           * @returns FloatingPoint\n           */\n\n\n          static getRootAsFloatingPoint(bb, obj) {\n            return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.Precision\n           */\n\n\n          precision() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Precision.HALF;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startFloatingPoint(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Precision precision\n           */\n\n\n          static addPrecision(builder, precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endFloatingPoint(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createFloatingPoint(builder, precision) {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n          }\n\n        }\n\n        flatbuf.FloatingPoint = FloatingPoint;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Utf8 {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Utf8\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Utf8= obj\n           * @returns Utf8\n           */\n\n\n          static getRootAsUtf8(bb, obj) {\n            return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startUtf8(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endUtf8(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createUtf8(builder) {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n          }\n\n        }\n\n        flatbuf.Utf8 = Utf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Opaque binary data\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Binary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Binary\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Binary= obj\n           * @returns Binary\n           */\n\n\n          static getRootAsBinary(bb, obj) {\n            return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startBinary(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createBinary(builder) {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n          }\n\n        }\n\n        flatbuf.Binary = Binary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class LargeUtf8 {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeUtf8\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeUtf8= obj\n           * @returns LargeUtf8\n           */\n\n\n          static getRootAsLargeUtf8(bb, obj) {\n            return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startLargeUtf8(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endLargeUtf8(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createLargeUtf8(builder) {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n          }\n\n        }\n\n        flatbuf.LargeUtf8 = LargeUtf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class LargeBinary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeBinary\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeBinary= obj\n           * @returns LargeBinary\n           */\n\n\n          static getRootAsLargeBinary(bb, obj) {\n            return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startLargeBinary(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endLargeBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createLargeBinary(builder) {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n          }\n\n        }\n\n        flatbuf.LargeBinary = LargeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class FixedSizeBinary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeBinary\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FixedSizeBinary= obj\n           * @returns FixedSizeBinary\n           */\n\n\n          static getRootAsFixedSizeBinary(bb, obj) {\n            return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Number of bytes per value\n           *\n           * @returns number\n           */\n\n\n          byteWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startFixedSizeBinary(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number byteWidth\n           */\n\n\n          static addByteWidth(builder, byteWidth) {\n            builder.addFieldInt32(0, byteWidth, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endFixedSizeBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createFixedSizeBinary(builder, byteWidth) {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n          }\n\n        }\n\n        flatbuf.FixedSizeBinary = FixedSizeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Bool {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Bool\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Bool= obj\n           * @returns Bool\n           */\n\n\n          static getRootAsBool(bb, obj) {\n            return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startBool(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endBool(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createBool(builder) {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n          }\n\n        }\n\n        flatbuf.Bool = Bool;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Decimal {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Decimal\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Decimal= obj\n           * @returns Decimal\n           */\n\n\n          static getRootAsDecimal(bb, obj) {\n            return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Total number of decimal digits\n           *\n           * @returns number\n           */\n\n\n          precision() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * Number of digits after the decimal point \".\"\n           *\n           * @returns number\n           */\n\n\n          scale() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDecimal(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number precision\n           */\n\n\n          static addPrecision(builder, precision) {\n            builder.addFieldInt32(0, precision, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number scale\n           */\n\n\n          static addScale(builder, scale) {\n            builder.addFieldInt32(1, scale, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDecimal(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDecimal(builder, precision, scale) {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n          }\n\n        }\n\n        flatbuf.Decimal = Decimal;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Date {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Date\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Date= obj\n           * @returns Date\n           */\n\n\n          static getRootAsDate(bb, obj) {\n            return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.DateUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDate(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.DateUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDate(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDate(builder, unit) {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n          }\n\n        }\n\n        flatbuf.Date = Date;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Time {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Time\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Time= obj\n           * @returns Time\n           */\n\n\n          static getRootAsTime(bb, obj) {\n            return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n          }\n          /**\n           * @returns number\n           */\n\n\n          bitWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startTime(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number bitWidth\n           */\n\n\n          static addBitWidth(builder, bitWidth) {\n            builder.addFieldInt32(1, bitWidth, 32);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endTime(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createTime(builder, unit, bitWidth) {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n          }\n\n        }\n\n        flatbuf.Time = Time;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Timestamp {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Timestamp\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Timestamp= obj\n           * @returns Timestamp\n           */\n\n\n          static getRootAsTimestamp(bb, obj) {\n            return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n          }\n\n          timezone(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startTimestamp(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset timezoneOffset\n           */\n\n\n          static addTimezone(builder, timezoneOffset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endTimestamp(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createTimestamp(builder, unit, timezoneOffset) {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n          }\n\n        }\n\n        flatbuf.Timestamp = Timestamp;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Interval {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Interval\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Interval= obj\n           * @returns Interval\n           */\n\n\n          static getRootAsInterval(bb, obj) {\n            return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.IntervalUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startInterval(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.IntervalUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endInterval(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createInterval(builder, unit) {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n          }\n\n        }\n\n        flatbuf.Interval = Interval;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Duration {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Duration\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Duration= obj\n           * @returns Duration\n           */\n\n\n          static getRootAsDuration(bb, obj) {\n            return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDuration(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDuration(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDuration(builder, unit) {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n          }\n\n        }\n\n        flatbuf.Duration = Duration;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class KeyValue {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns KeyValue\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param KeyValue= obj\n           * @returns KeyValue\n           */\n\n\n          static getRootAsKeyValue(bb, obj) {\n            return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n\n          key(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n\n          value(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startKeyValue(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset keyOffset\n           */\n\n\n          static addKey(builder, keyOffset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset valueOffset\n           */\n\n\n          static addValue(builder, valueOffset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endKeyValue(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createKeyValue(builder, keyOffset, valueOffset) {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n          }\n\n        }\n\n        flatbuf.KeyValue = KeyValue;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class DictionaryEncoding {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryEncoding\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param DictionaryEncoding= obj\n           * @returns DictionaryEncoding\n           */\n\n\n          static getRootAsDictionaryEncoding(bb, obj) {\n            return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * The known dictionary id in the application where this data is used. In\n           * the file or streaming formats, the dictionary ids are found in the\n           * DictionaryBatch messages\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          id() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * The dictionary indices are constrained to be positive integers. If this\n           * field is null, the indices must be signed int32\n           *\n           * @param org.apache.arrow.flatbuf.Int= obj\n           * @returns org.apache.arrow.flatbuf.Int|null\n           */\n\n\n          indexType(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * By default, dictionaries are not ordered, or the order does not have\n           * semantic meaning. In some statistical, applications, dictionary-encoding\n           * is used to represent ordered categorical data, and we provide a way to\n           * preserve that metadata here\n           *\n           * @returns boolean\n           */\n\n\n          isOrdered() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDictionaryEncoding(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long id\n           */\n\n\n          static addId(builder, id) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset indexTypeOffset\n           */\n\n\n          static addIndexType(builder, indexTypeOffset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isOrdered\n           */\n\n\n          static addIsOrdered(builder, isOrdered) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDictionaryEncoding(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDictionaryEncoding(builder, id, indexTypeOffset, isOrdered) {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n          }\n\n        }\n\n        flatbuf.DictionaryEncoding = DictionaryEncoding;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Field {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Field\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Field= obj\n           * @returns Field\n           */\n\n\n          static getRootAsField(bb, obj) {\n            return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n\n          name(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * Whether or not this field can contain nulls. Should be true in general.\n           *\n           * @returns boolean\n           */\n\n\n          nullable() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.Type\n           */\n\n\n          typeType() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ?\n            /**  */\n            this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.Type.NONE;\n          }\n          /**\n           * This is the type of the decoded value if the field is dictionary encoded.\n           *\n           * @param flatbuffers.Table obj\n           * @returns ?flatbuffers.Table\n           */\n\n\n          type(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 10);\n\n            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n          }\n          /**\n           * Present only if the field is dictionary encoded.\n           *\n           * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n           * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n           */\n\n\n          dictionary(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * children apply only to nested data types like Struct, List and Union. For\n           * primitive types children will have length 0.\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Field= obj\n           * @returns org.apache.arrow.flatbuf.Field\n           */\n\n\n          children(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 14);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          childrenLength() {\n            let offset = this.bb.__offset(this.bb_pos, 14);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * User-defined metadata\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n\n\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 16);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 16);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startField(builder) {\n            builder.startObject(7);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset nameOffset\n           */\n\n\n          static addName(builder, nameOffset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean nullable\n           */\n\n\n          static addNullable(builder, nullable) {\n            builder.addFieldInt8(1, +nullable, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Type typeType\n           */\n\n\n          static addTypeType(builder, typeType) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset typeOffset\n           */\n\n\n          static addType(builder, typeOffset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset dictionaryOffset\n           */\n\n\n          static addDictionary(builder, dictionaryOffset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset childrenOffset\n           */\n\n\n          static addChildren(builder, childrenOffset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createChildrenVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startChildrenVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n\n\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endField(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createField(builder, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n          }\n\n        }\n\n        flatbuf.Field = Field;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Buffer {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Buffer\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * The relative offset into the shared memory page where the bytes for this\n           * buffer starts\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          offset() {\n            return this.bb.readInt64(this.bb_pos);\n          }\n          /**\n           * The absolute length (in bytes) of the memory buffer. The memory is found\n           * from offset (inclusive) to offset + length (non-inclusive).\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          length() {\n            return this.bb.readInt64(this.bb_pos + 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long offset\n           * @param flatbuffers.Long length\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createBuffer(builder, offset, length) {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n          }\n\n        }\n\n        flatbuf.Buffer = Buffer;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Schema {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Schema\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Schema= obj\n           * @returns Schema\n           */\n\n\n          static getRootAsSchema(bb, obj) {\n            return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * endianness of the buffer\n           * it is Little Endian by default\n           * if endianness doesn't match the underlying system then the vectors need to be converted\n           *\n           * @returns org.apache.arrow.flatbuf.Endianness\n           */\n\n\n          endianness() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Endianness.Little;\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Field= obj\n           * @returns org.apache.arrow.flatbuf.Field\n           */\n\n\n          fields(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          fieldsLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n\n\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startSchema(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Endianness endianness\n           */\n\n\n          static addEndianness(builder, endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset fieldsOffset\n           */\n\n\n          static addFields(builder, fieldsOffset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createFieldsVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startFieldsVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n\n\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endSchema(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset offset\n           */\n\n\n          static finishSchemaBuffer(builder, offset) {\n            builder.finish(offset);\n          }\n\n          static createSchema(builder, endianness, fieldsOffset, customMetadataOffset) {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n          }\n\n        }\n\n        flatbuf.Schema = Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"mappings":"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","names":["org","MetadataVersion","flatbuf","arrow","apache","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","constructor","__init","i","bb","bb_pos","getRootAsNull","obj","readInt32","position","startNull","builder","startObject","endNull","offset","endObject","createNull","Struct_","getRootAsStruct_","startStruct_","endStruct_","createStruct_","List","getRootAsList","startList","endList","createList","LargeList","getRootAsLargeList","startLargeList","endLargeList","createLargeList","FixedSizeList","getRootAsFixedSizeList","listSize","__offset","startFixedSizeList","addListSize","addFieldInt32","endFixedSizeList","createFixedSizeList","Map","getRootAsMap","keysSorted","readInt8","startMap","addKeysSorted","addFieldInt8","endMap","createMap","Union","getRootAsUnion","mode","readInt16","Sparse","typeIds","index","__vector","typeIdsLength","__vector_len","typeIdsArray","Int32Array","bytes","buffer","byteOffset","startUnion","addMode","addFieldInt16","addTypeIds","typeIdsOffset","addFieldOffset","createTypeIdsVector","data","startVector","length","addInt32","endVector","startTypeIdsVector","numElems","endUnion","createUnion","Int","getRootAsInt","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","createInt","FloatingPoint","getRootAsFloatingPoint","precision","HALF","startFloatingPoint","addPrecision","endFloatingPoint","createFloatingPoint","Utf8","getRootAsUtf8","startUtf8","endUtf8","createUtf8","Binary","getRootAsBinary","startBinary","endBinary","createBinary","LargeUtf8","getRootAsLargeUtf8","startLargeUtf8","endLargeUtf8","createLargeUtf8","LargeBinary","getRootAsLargeBinary","startLargeBinary","endLargeBinary","createLargeBinary","FixedSizeBinary","getRootAsFixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","createFixedSizeBinary","Bool","getRootAsBool","startBool","endBool","createBool","Decimal","getRootAsDecimal","scale","startDecimal","addScale","endDecimal","createDecimal","Date","getRootAsDate","unit","MILLISECOND","startDate","addUnit","endDate","createDate","Time","getRootAsTime","startTime","endTime","createTime","Timestamp","getRootAsTimestamp","SECOND","timezone","optionalEncoding","__string","startTimestamp","addTimezone","timezoneOffset","endTimestamp","createTimestamp","Interval","getRootAsInterval","YEAR_MONTH","startInterval","endInterval","createInterval","Duration","getRootAsDuration","startDuration","endDuration","createDuration","KeyValue","getRootAsKeyValue","key","value","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","createKeyValue","DictionaryEncoding","getRootAsDictionaryEncoding","id","readInt64","createLong","indexType","__indirect","isOrdered","startDictionaryEncoding","addId","addFieldInt64","addIndexType","indexTypeOffset","addIsOrdered","endDictionaryEncoding","createDictionaryEncoding","Field","getRootAsField","name","nullable","typeType","readUint8","NONE","type","__union","dictionary","children","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","addType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","addOffset","startChildrenVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","createField","Buffer","createBuffer","prep","writeInt64","Schema","getRootAsSchema","endianness","Little","fields","fieldsLength","startSchema","addEndianness","addFields","fieldsOffset","createFieldsVector","startFieldsVector","endSchema","finishSchemaBuffer","finish","createSchema"],"sources":["fb/Schema.ts"],"sourcesContent":["/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}