{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n/** @ignore */\n\nexport function recordBatchReaderThroughDOMStream(writableStrategy, readableStrategy) {\n  const queue = new AsyncByteQueue();\n  let reader = null;\n  const readable = new ReadableStream({\n    async cancel() {\n      await queue.close();\n    },\n\n    async start(controller) {\n      await next(controller, reader || (reader = await open()));\n    },\n\n    async pull(controller) {\n      reader ? await next(controller, reader) : controller.close();\n    }\n\n  });\n  return {\n    writable: new WritableStream(queue, {\n      'highWaterMark': 2 ** 14,\n      ...writableStrategy\n    }),\n    readable\n  };\n\n  async function open() {\n    return await (await RecordBatchReader.from(queue)).open(readableStrategy);\n  }\n\n  async function next(controller, reader) {\n    let size = controller.desiredSize;\n    let r = null;\n\n    while (!(r = await reader.next()).done) {\n      controller.enqueue(r.value);\n\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n\n    controller.close();\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAASA,cAAT,QAA+B,iBAA/B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAEA;;AACA,OAAM,SAAUC,iCAAV,CAAyFC,gBAAzF,EAAuIC,gBAAvI,EAAkL;EAEpL,MAAMC,KAAK,GAAG,IAAIL,cAAJ,EAAd;EACA,IAAIM,MAAM,GAAgC,IAA1C;EAEA,MAAMC,QAAQ,GAAG,IAAIC,cAAJ,CAAmC;IAChD,MAAMC,MAAN,GAAY;MAAK,MAAMJ,KAAK,CAACK,KAAN,EAAN;IAAsB,CADS;;IAEhD,MAAMC,KAAN,CAAYC,UAAZ,EAAsB;MAAI,MAAMC,IAAI,CAACD,UAAD,EAAaN,MAAM,KAAKA,MAAM,GAAG,MAAMQ,IAAI,EAAxB,CAAnB,CAAV;IAA4D,CAFtC;;IAGhD,MAAMC,IAAN,CAAWH,UAAX,EAAqB;MAAIN,MAAM,GAAG,MAAMO,IAAI,CAACD,UAAD,EAAaN,MAAb,CAAb,GAAoCM,UAAU,CAACF,KAAX,EAA1C;IAA+D;;EAHxC,CAAnC,CAAjB;EAMA,OAAO;IAAEM,QAAQ,EAAE,IAAIC,cAAJ,CAAmBZ,KAAnB,EAA0B;MAAE,iBAAiB,KAAK,EAAxB;MAA4B,GAAGF;IAA/B,CAA1B,CAAZ;IAA0FI;EAA1F,CAAP;;EAEA,eAAeO,IAAf,GAAmB;IACf,OAAO,MAAM,CAAC,MAAMb,iBAAiB,CAACiB,IAAlB,CAA0Bb,KAA1B,CAAP,EAAyCS,IAAzC,CAA8CV,gBAA9C,CAAb;EACH;;EAED,eAAeS,IAAf,CAAoBD,UAApB,EAAiFN,MAAjF,EAA6G;IACzG,IAAIa,IAAI,GAAGP,UAAU,CAACQ,WAAtB;IACA,IAAIC,CAAC,GAA0C,IAA/C;;IACA,OAAO,CAAC,CAACA,CAAC,GAAG,MAAMf,MAAM,CAACO,IAAP,EAAX,EAA0BS,IAAlC,EAAwC;MACpCV,UAAU,CAACW,OAAX,CAAmBF,CAAC,CAACG,KAArB;;MACA,IAAIL,IAAI,IAAI,IAAR,IAAgB,EAAEA,IAAF,IAAU,CAA9B,EAAiC;QAC7B;MACH;IACJ;;IACDP,UAAU,CAACF,KAAX;EACH;AACJ","names":["AsyncByteQueue","RecordBatchReader","recordBatchReaderThroughDOMStream","writableStrategy","readableStrategy","queue","reader","readable","ReadableStream","cancel","close","start","controller","next","open","pull","writable","WritableStream","from","size","desiredSize","r","done","enqueue","value"],"sources":["io/whatwg/reader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}