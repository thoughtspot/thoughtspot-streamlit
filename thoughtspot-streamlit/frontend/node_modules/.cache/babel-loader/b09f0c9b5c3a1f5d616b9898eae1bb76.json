{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Dictionary } from '../type';\nimport { Builder } from '../builder';\n/** @ignore */\n\nexport class DictionaryBuilder extends Builder {\n  constructor(_ref) {\n    let {\n      'type': type,\n      'nullValues': nulls,\n      'dictionaryHashFunction': hashFn\n    } = _ref;\n    super({\n      type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered)\n    });\n    this._nulls = null;\n    this._dictionaryOffset = 0;\n    this._keysToIndices = Object.create(null);\n    this.indices = Builder.new({\n      'type': this.type.indices,\n      'nullValues': nulls\n    });\n    this.dictionary = Builder.new({\n      'type': this.type.dictionary,\n      'nullValues': null\n    });\n\n    if (typeof hashFn === 'function') {\n      this.valueToKey = hashFn;\n    }\n  }\n\n  get values() {\n    return this.indices.values;\n  }\n\n  get nullCount() {\n    return this.indices.nullCount;\n  }\n\n  get nullBitmap() {\n    return this.indices.nullBitmap;\n  }\n\n  get byteLength() {\n    return this.indices.byteLength + this.dictionary.byteLength;\n  }\n\n  get reservedLength() {\n    return this.indices.reservedLength + this.dictionary.reservedLength;\n  }\n\n  get reservedByteLength() {\n    return this.indices.reservedByteLength + this.dictionary.reservedByteLength;\n  }\n\n  isValid(value) {\n    return this.indices.isValid(value);\n  }\n\n  setValid(index, valid) {\n    const indices = this.indices;\n    valid = indices.setValid(index, valid);\n    this.length = indices.length;\n    return valid;\n  }\n\n  setValue(index, value) {\n    let keysToIndices = this._keysToIndices;\n    let key = this.valueToKey(value);\n    let idx = keysToIndices[key];\n\n    if (idx === undefined) {\n      keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n    }\n\n    return this.indices.setValue(index, idx);\n  }\n\n  flush() {\n    const type = this.type;\n    const prev = this._dictionary;\n    const curr = this.dictionary.toVector();\n    const data = this.indices.flush().clone(type);\n    data.dictionary = prev ? prev.concat(curr) : curr;\n    this.finished || (this._dictionaryOffset += curr.length);\n    this._dictionary = data.dictionary;\n    this.clear();\n    return data;\n  }\n\n  finish() {\n    this.indices.finish();\n    this.dictionary.finish();\n    this._dictionaryOffset = 0;\n    this._keysToIndices = Object.create(null);\n    return super.finish();\n  }\n\n  clear() {\n    this.indices.clear();\n    this.dictionary.clear();\n    return super.clear();\n  }\n\n  valueToKey(val) {\n    return typeof val === 'string' ? val : `${val}`;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Dictionary","Builder","DictionaryBuilder","constructor","type","nulls","hashFn","dictionary","indices","id","isOrdered","_nulls","_dictionaryOffset","_keysToIndices","Object","create","new","valueToKey","values","nullCount","nullBitmap","byteLength","reservedLength","reservedByteLength","isValid","value","setValid","index","valid","length","setValue","keysToIndices","key","idx","undefined","append","flush","prev","_dictionary","curr","toVector","data","clone","concat","finished","clear","finish","val"],"sources":["builder/dictionary.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}