{"ast":null,"code":"import _classCallCheck from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/nathan.schroeder/Documents/dev/template/thoughtspot_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * Copyright (c) 2022\n *\n * Full application embedding\n * https://developers.thoughtspot.com/docs/?pageid=full-embed\n *\n * @summary Full app embed\n * @module\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { Param, HostEvent } from '../types';\nimport { V1Embed } from './ts-embed';\n/**\n * Pages within the ThoughtSpot app that can be embedded.\n */\n// eslint-disable-next-line no-shadow\n\nexport var Page;\n\n(function (Page) {\n  /**\n   * Home page\n   */\n  Page[\"Home\"] = \"home\";\n  /**\n   * Search page\n   */\n\n  Page[\"Search\"] = \"search\";\n  /**\n   * Saved answers listing page\n   */\n\n  Page[\"Answers\"] = \"answers\";\n  /**\n   * Liveboards listing page\n   */\n\n  Page[\"Liveboards\"] = \"liveboards\";\n  /**\n   * @hidden\n   */\n\n  Page[\"Pinboards\"] = \"pinboards\";\n  /**\n   * Data management page\n   */\n\n  Page[\"Data\"] = \"data\";\n  /**\n   * SpotIQ listing page\n   */\n\n  Page[\"SpotIQ\"] = \"spotiq\";\n})(Page || (Page = {}));\n/**\n * Embeds full ThoughtSpot experience in a host application.\n * @Category App Embed\n */\n\n\nexport var AppEmbed = /*#__PURE__*/function (_V1Embed) {\n  _inherits(AppEmbed, _V1Embed);\n\n  var _super = _createSuper(AppEmbed);\n\n  // eslint-disable-next-line no-useless-constructor\n  function AppEmbed(domSelector, viewConfig) {\n    _classCallCheck(this, AppEmbed);\n\n    return _super.call(this, domSelector, viewConfig);\n  }\n  /**\n   * Constructs a map of parameters to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n\n\n  _createClass(AppEmbed, [{\n    key: \"getEmbedParams\",\n    value: function getEmbedParams() {\n      var params = this.getBaseQueryParams();\n      var _this$viewConfig = this.viewConfig,\n          tag = _this$viewConfig.tag,\n          hideObjects = _this$viewConfig.hideObjects,\n          _this$viewConfig$live = _this$viewConfig.liveboardV2,\n          liveboardV2 = _this$viewConfig$live === void 0 ? false : _this$viewConfig$live;\n\n      if (tag) {\n        params[Param.Tag] = tag;\n      }\n\n      if (hideObjects && hideObjects.length) {\n        params[Param.HideObjects] = JSON.stringify(hideObjects);\n      }\n\n      params[Param.LiveboardV2Enabled] = liveboardV2;\n      var queryParams = getQueryParamString(params, true);\n      return queryParams;\n    }\n    /**\n     * Constructs the URL of the ThoughtSpot app page to be rendered.\n     * @param pageId The ID of the page to be embedded.\n     */\n\n  }, {\n    key: \"getIFrameSrc\",\n    value: function getIFrameSrc(pageId, runtimeFilters) {\n      var filterQuery = getFilterQuery(runtimeFilters || []);\n      var queryParams = this.getEmbedParams();\n      var queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n      var url = \"\".concat(this.getV1EmbedBasePath(queryString, this.viewConfig.showPrimaryNavbar, this.viewConfig.disableProfileAndHelp, true, this.viewConfig.enableSearchAssist), \"/\").concat(pageId);\n      var tsPostHashParams = this.getThoughtSpotPostUrlParams();\n      url = \"\".concat(url).concat(tsPostHashParams);\n      return url;\n    }\n    /**\n     * Gets the ThoughtSpot route of the page for a particular page ID.\n     * @param pageId The identifier for a page in the ThoughtSpot app.\n     */\n\n  }, {\n    key: \"getPageRoute\",\n    value: function getPageRoute(pageId) {\n      switch (pageId) {\n        case Page.Search:\n          return 'answer';\n\n        case Page.Answers:\n          return 'answers';\n\n        case Page.Liveboards:\n          return 'pinboards';\n\n        case Page.Pinboards:\n          return 'pinboards';\n\n        case Page.Data:\n          return 'data/tables';\n\n        case Page.SpotIQ:\n          return 'insights/results';\n\n        case Page.Home:\n        default:\n          return 'home';\n      }\n    }\n    /**\n     * Formats the path provided by the user.\n     * @param path The URL path.\n     * @returns The URL path that the embedded app understands.\n     */\n\n  }, {\n    key: \"formatPath\",\n    value: function formatPath(path) {\n      if (!path) {\n        return null;\n      } // remove leading slash\n\n\n      if (path.indexOf('/') === 0) {\n        return path.substring(1);\n      }\n\n      return path;\n    }\n    /**\n     * Navigate to particular page for app embed. eg:answers/pinboards/home\n     * This is used for embedding answers, pinboards, visualizations and full application only.\n     * @param path string | number The string, set to iframe src and navigate to new page\n     * eg: appEmbed.navigateToPage('pinboards')\n     * When used with `noReload` this can also be a number like 1/-1 to go forward/back.\n     * @param noReload boolean Trigger the navigation without reloading the page\n     * @version SDK: 1.12.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n     */\n\n  }, {\n    key: \"navigateToPage\",\n    value: function navigateToPage(path) {\n      var noReload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.iFrame) {\n        console.log('Please call render before invoking this method');\n        return;\n      }\n\n      if (noReload) {\n        this.trigger(HostEvent.Navigate, path);\n      } else {\n        if (typeof path !== 'string') {\n          console.warn('Path can only by a string when triggered without noReload');\n          return;\n        }\n\n        var iframeSrc = this.iFrame.src;\n        var embedPath = '#/embed';\n        var currentPath = iframeSrc.includes(embedPath) ? embedPath : '#';\n        this.iFrame.src = \"\".concat(iframeSrc.split(currentPath)[0]).concat(currentPath, \"/\").concat(path.replace(/^\\/?#?\\//, ''));\n      }\n    }\n    /**\n     * Renders the embedded application pages in the ThoughtSpot app.\n     * @param renderOptions An object containing the page ID\n     * to be embedded.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      _get(_getPrototypeOf(AppEmbed.prototype), \"render\", this).call(this);\n\n      var _this$viewConfig2 = this.viewConfig,\n          pageId = _this$viewConfig2.pageId,\n          runtimeFilters = _this$viewConfig2.runtimeFilters,\n          path = _this$viewConfig2.path;\n      var pageRoute = this.formatPath(path) || this.getPageRoute(pageId);\n      var src = this.getIFrameSrc(pageRoute, runtimeFilters);\n      this.renderV1Embed(src);\n      return this;\n    }\n  }]);\n\n  return AppEmbed;\n}(V1Embed);","map":{"version":3,"mappings":"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","names":["getFilterQuery","getQueryParamString","Param","HostEvent","V1Embed","Page","AppEmbed","domSelector","viewConfig","params","getBaseQueryParams","tag","hideObjects","liveboardV2","Tag","length","HideObjects","JSON","stringify","LiveboardV2Enabled","queryParams","pageId","runtimeFilters","filterQuery","getEmbedParams","queryString","filter","Boolean","join","url","getV1EmbedBasePath","showPrimaryNavbar","disableProfileAndHelp","enableSearchAssist","tsPostHashParams","getThoughtSpotPostUrlParams","Search","Answers","Liveboards","Pinboards","Data","SpotIQ","Home","path","indexOf","substring","noReload","iFrame","console","log","trigger","Navigate","warn","iframeSrc","src","embedPath","currentPath","includes","split","replace","pageRoute","formatPath","getPageRoute","getIFrameSrc","renderV1Embed"],"sourceRoot":"","sources":["../../../src/embed/app.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}