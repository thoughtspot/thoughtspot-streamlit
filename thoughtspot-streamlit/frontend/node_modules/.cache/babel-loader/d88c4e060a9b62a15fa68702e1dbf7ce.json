{"ast":null,"code":"/* eslint-disable import/no-mutable-exports */\n\n/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport EventEmitter from 'eventemitter3';\nimport { getThoughtSpotHost } from '../config';\nimport { AuthType } from '../types';\nimport { authenticate, logout as _logout, AuthFailureType, AuthStatus } from '../auth';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nlet config = {};\nconst CONFIG_DEFAULTS = {\n  loginFailedMessage: 'Not logged in',\n  authType: AuthType.None\n};\nexport let authPromise;\nexport const getEmbedConfig = () => config;\nexport const getAuthPromise = () => authPromise;\nlet authEE;\nexport function notifyAuthSDKSuccess() {\n  if (!authEE) {\n    console.error('SDK not initialized');\n    return;\n  }\n\n  authEE.emit(AuthStatus.SDK_SUCCESS);\n}\nexport function notifyAuthSuccess() {\n  if (!authEE) {\n    console.error('SDK not initialized');\n    return;\n  }\n\n  authEE.emit(AuthStatus.SUCCESS);\n}\nexport function notifyAuthFailure(failureType) {\n  if (!authEE) {\n    console.error('SDK not initialized');\n    return;\n  }\n\n  authEE.emit(AuthStatus.FAILURE, failureType);\n}\nexport function notifyLogout() {\n  if (!authEE) {\n    console.error('SDK not initialized');\n    return;\n  }\n\n  authEE.emit(AuthStatus.LOGOUT);\n}\n/**\n * Perform authentication on the ThoughtSpot app as applicable.\n */\n\nexport const handleAuth = () => {\n  authPromise = authenticate(config);\n  authPromise.then(isLoggedIn => {\n    if (!isLoggedIn) {\n      notifyAuthFailure(AuthFailureType.SDK);\n    } else {\n      notifyAuthSDKSuccess();\n    }\n  }, () => {\n    notifyAuthFailure(AuthFailureType.SDK);\n  });\n  return authPromise;\n};\n/**\n * Prefetches static resources from the specified URL. Web browsers can then cache the prefetched resources and serve them from the user's local disk to provide faster access to your app.\n * @param url The URL provided for prefetch\n */\n\nexport const prefetch = url => {\n  if (url === '') {\n    // eslint-disable-next-line no-console\n    console.warn('The prefetch method does not have a valid URL');\n  } else {\n    const iFrame = document.createElement('iframe');\n    iFrame.src = url || config.thoughtSpotHost;\n    iFrame.style.width = '0';\n    iFrame.style.height = '0';\n    iFrame.style.border = '0';\n    iFrame.classList.add('prefetchIframe');\n    document.body.appendChild(iFrame);\n  }\n};\n/**\n * Initialize the ThoughtSpot embed SDK globally and perform\n * authentication if applicable.\n * @param embedConfig The configuration object containing ThoughtSpot host,\n * authentication mechanism and so on.\n *\n * eg: authStatus = init(config);\n * authStatus.on(AuthStatus.FAILURE, (reason) => { // do something here });\n *\n * @returns event emitter which emits events on authentication success, failure and logout. {@link AuthStatus}\n */\n\nexport const init = embedConfig => {\n  config = { ...CONFIG_DEFAULTS,\n    ...embedConfig,\n    thoughtSpotHost: getThoughtSpotHost(embedConfig)\n  };\n  authEE = new EventEmitter();\n  handleAuth();\n  uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_CALLED_INIT, {\n    authType: config.authType,\n    host: config.thoughtSpotHost\n  });\n\n  if (config.callPrefetch) {\n    prefetch(config.thoughtSpotHost);\n  }\n\n  return authEE;\n};\nexport function disableAutoLogin() {\n  config.autoLogin = false;\n}\n/**\n * Logout from ThoughtSpot. This also sets the autoLogin flag to false, to prevent\n * the SDK from automatically logging in again.\n *\n * You can call the `init` method again to re login, if autoLogin is set to true in this\n * second call it will be honored.\n *\n * @param doNotDisableAutoLogin This flag when passed will not disable autoLogin\n * @returns Promise which resolves when logout completes.\n * @version SDK: 1.10.1 | ThoughtSpot: 8.2.0.cl, 8.4.1-sw\n */\n\nexport const logout = function () {\n  let doNotDisableAutoLogin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!doNotDisableAutoLogin) {\n    disableAutoLogin();\n  }\n\n  return _logout(config).then(isLoggedIn => {\n    notifyLogout();\n    return isLoggedIn;\n  });\n};\nlet renderQueue = Promise.resolve();\n/**\n * Renders functions in a queue, resolves to next function only after the callback next is called\n * @param fn The function being registered\n */\n\nexport const renderInQueue = fn => {\n  const {\n    queueMultiRenders = false\n  } = config;\n\n  if (queueMultiRenders) {\n    renderQueue = renderQueue.then(() => new Promise(res => fn(res)));\n  } else {\n    // Sending an empty function to keep it consistent with the above usage.\n    fn(() => {}); // eslint-disable-line @typescript-eslint/no-empty-function\n  }\n}; // For testing purposes only\n\nexport function reset() {\n  config = {};\n  authEE = null;\n  authPromise = null;\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","getThoughtSpotHost","AuthType","authenticate","logout","_logout","AuthFailureType","AuthStatus","uploadMixpanelEvent","MIXPANEL_EVENT","config","CONFIG_DEFAULTS","loginFailedMessage","authType","None","authPromise","getEmbedConfig","getAuthPromise","authEE","notifyAuthSDKSuccess","console","error","emit","SDK_SUCCESS","notifyAuthSuccess","SUCCESS","notifyAuthFailure","failureType","FAILURE","notifyLogout","LOGOUT","handleAuth","then","isLoggedIn","SDK","prefetch","url","warn","iFrame","document","createElement","src","thoughtSpotHost","style","width","height","border","classList","add","body","appendChild","init","embedConfig","VISUAL_SDK_CALLED_INIT","host","callPrefetch","disableAutoLogin","autoLogin","doNotDisableAutoLogin","renderQueue","Promise","resolve","renderInQueue","fn","queueMultiRenders","res","reset"],"sourceRoot":"","sources":["../../../src/embed/base.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}