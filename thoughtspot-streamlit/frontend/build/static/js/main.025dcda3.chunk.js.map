{"version":3,"sources":["ThoughtspotSearchComponent.tsx","index.tsx"],"names":["withStreamlitConnection","args","host","sso","Object","keys","includes","height","width","dataSources","searchString","Streamlit","setFrameHeight","init","thoughtSpotHost","authType","AuthType","SAML","None","useEffect","element","document","getElementById","SearchEmbed","searchOptions","searchTokenString","executeSearch","frameParams","render","style","id","ReactDOM","StrictMode"],"mappings":"8OAyEeA,mBA5Cd,YAA2E,IAAtCC,EAAqC,EAArCA,KAEhCC,EAAOD,EAAI,KACXE,IAAMC,OAAOC,KAAKJ,GAAMK,SAAS,QAASL,EAAI,IAC9CM,EAASH,OAAOC,KAAKJ,GAAMK,SAAS,UAAYL,EAAI,OAAa,IACjEO,EAAQJ,OAAOC,KAAKJ,GAAMK,SAAS,SAAWL,EAAI,MAAY,IAC9DQ,EAAcL,OAAOC,KAAKJ,GAAMK,SAAS,eAAiBL,EAAI,YAAkB,GAChFS,EAAeN,OAAOC,KAAKJ,GAAMK,SAAS,gBAAkBL,EAAI,aAAmB,KAyBrF,OAvBFU,IAAUC,eAAeL,GAGzBM,YAAK,CACHC,gBAAiBZ,EACjBa,SAAUZ,EAAMa,IAASC,KAAOD,IAASE,OAG3CC,qBAAU,WACN,IAAIC,EAAiBC,SAASC,eAAe,YACzB,IAAIC,IAAYH,EAAS,CAC3CI,cAAc,CACZC,kBAAkBf,EAClBgB,eAAc,GAEhBjB,YAAaA,EACbkB,YAAa,CACTnB,MAAOA,EAAM,KACbD,OAAQA,EAAO,QAGTqB,YAGZ,yBAAKC,MAAO,CAACrB,MAAMA,EAAM,KAAKD,OAAOA,EAAO,MAAOuB,GAAG,YAAtD,eCjDNC,IAASH,OACP,kBAAC,IAAMI,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASC,eAAe,W","file":"static/js/main.025dcda3.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps\n} from \"streamlit-component-lib\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent\n}\nfrom '@thoughtspot/visual-embed-sdk';\nimport React, {useEffect, ReactElement, ReactNode} from \"react\"\n\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\n\n function ThoughtspotSearchComponent({args}: ComponentProps): ReactElement {\n\n  let host = args[\"host\"];\n  let sso = Object.keys(args).includes(\"sso\") ? args[\"sso\"] : false\n  let height = Object.keys(args).includes(\"height\") ? args[\"height\"] : 600\n  let width = Object.keys(args).includes(\"width\") ? args[\"width\"] : 1000\n  let dataSources = Object.keys(args).includes(\"datasources\") ? args[\"datasources\"] : []\n  let searchString = Object.keys(args).includes(\"searchstring\") ? args[\"searchstring\"] : null\n\n  Streamlit.setFrameHeight(height)\n\n  \n  init({\n    thoughtSpotHost: host,\n    authType: sso ? AuthType.SAML : AuthType.None,\n  });\n\n  useEffect(()=>{\n      var element : any =  document.getElementById('ts-embed');\n      const searchEmbed = new SearchEmbed(element, {\n        searchOptions:{\n          searchTokenString:searchString,\n          executeSearch:true\n        },\n        dataSources: dataSources,\n        frameParams: {\n            width: width+\"px\",\n            height: height+\"px\",\n        },\n      });\n      searchEmbed.render()\n    })\n    return (\n      <div style={{width:width+\"px\",height:height+\"px\"}} id=\"ts-embed\">\n        TS Embed\n      </div>  \n    )\n }\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ThoughtspotSearchComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ThoughtspotSearchComponent from \"./ThoughtspotSearchComponent\"\nimport {\n  SearchEmbed,\n  AuthType,\n  init,\n  prefetch,\n  EmbedEvent,\n  HostEvent\n}\nfrom '@thoughtspot/visual-embed-sdk';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThoughtspotSearchComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}